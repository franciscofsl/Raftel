### YamlMime:XRefMap
sorted: true
references:
- uid: Raftel.Application
  name: Raftel.Application
  href: api/Raftel.Application.yml
  commentId: N:Raftel.Application
  fullName: Raftel.Application
  nameWithType: Raftel.Application
- uid: Raftel.Application.Abstractions
  name: Raftel.Application.Abstractions
  href: api/Raftel.Application.Abstractions.yml
  commentId: N:Raftel.Application.Abstractions
  fullName: Raftel.Application.Abstractions
  nameWithType: Raftel.Application.Abstractions
- uid: Raftel.Application.Abstractions.IRequestDispatcher
  name: IRequestDispatcher
  href: api/Raftel.Application.Abstractions.IRequestDispatcher.yml
  commentId: T:Raftel.Application.Abstractions.IRequestDispatcher
  fullName: Raftel.Application.Abstractions.IRequestDispatcher
  nameWithType: IRequestDispatcher
- uid: Raftel.Application.Abstractions.IRequestDispatcher.DispatchAsync*
  name: DispatchAsync
  href: api/Raftel.Application.Abstractions.IRequestDispatcher.yml
  commentId: Overload:Raftel.Application.Abstractions.IRequestDispatcher.DispatchAsync
  isSpec: "True"
  fullName: Raftel.Application.Abstractions.IRequestDispatcher.DispatchAsync
  nameWithType: IRequestDispatcher.DispatchAsync
- uid: Raftel.Application.Abstractions.IRequestDispatcher.DispatchAsync``2(``0)
  name: DispatchAsync<TRequest, TResponse>(TRequest)
  href: api/Raftel.Application.Abstractions.IRequestDispatcher.yml
  commentId: M:Raftel.Application.Abstractions.IRequestDispatcher.DispatchAsync``2(``0)
  name.vb: DispatchAsync(Of TRequest, TResponse)(TRequest)
  fullName: Raftel.Application.Abstractions.IRequestDispatcher.DispatchAsync<TRequest, TResponse>(TRequest)
  fullName.vb: Raftel.Application.Abstractions.IRequestDispatcher.DispatchAsync(Of TRequest, TResponse)(TRequest)
  nameWithType: IRequestDispatcher.DispatchAsync<TRequest, TResponse>(TRequest)
  nameWithType.vb: IRequestDispatcher.DispatchAsync(Of TRequest, TResponse)(TRequest)
- uid: Raftel.Application.Abstractions.IRequestHandler`2
  name: IRequestHandler<TRequest, TResponse>
  href: api/Raftel.Application.Abstractions.IRequestHandler-2.yml
  commentId: T:Raftel.Application.Abstractions.IRequestHandler`2
  name.vb: IRequestHandler(Of TRequest, TResponse)
  fullName: Raftel.Application.Abstractions.IRequestHandler<TRequest, TResponse>
  fullName.vb: Raftel.Application.Abstractions.IRequestHandler(Of TRequest, TResponse)
  nameWithType: IRequestHandler<TRequest, TResponse>
  nameWithType.vb: IRequestHandler(Of TRequest, TResponse)
- uid: Raftel.Application.Abstractions.IRequestHandler`2.HandleAsync(`0)
  name: HandleAsync(TRequest)
  href: api/Raftel.Application.Abstractions.IRequestHandler-2.yml
  commentId: M:Raftel.Application.Abstractions.IRequestHandler`2.HandleAsync(`0)
  fullName: Raftel.Application.Abstractions.IRequestHandler<TRequest, TResponse>.HandleAsync(TRequest)
  fullName.vb: Raftel.Application.Abstractions.IRequestHandler(Of TRequest, TResponse).HandleAsync(TRequest)
  nameWithType: IRequestHandler<TRequest, TResponse>.HandleAsync(TRequest)
  nameWithType.vb: IRequestHandler(Of TRequest, TResponse).HandleAsync(TRequest)
- uid: Raftel.Application.Abstractions.IRequestHandler`2.HandleAsync*
  name: HandleAsync
  href: api/Raftel.Application.Abstractions.IRequestHandler-2.yml
  commentId: Overload:Raftel.Application.Abstractions.IRequestHandler`2.HandleAsync
  isSpec: "True"
  fullName: Raftel.Application.Abstractions.IRequestHandler<TRequest, TResponse>.HandleAsync
  fullName.vb: Raftel.Application.Abstractions.IRequestHandler(Of TRequest, TResponse).HandleAsync
  nameWithType: IRequestHandler<TRequest, TResponse>.HandleAsync
  nameWithType.vb: IRequestHandler(Of TRequest, TResponse).HandleAsync
- uid: Raftel.Application.Abstractions.IRequestMiddleware`2
  name: IRequestMiddleware<TRequest, TResponse>
  href: api/Raftel.Application.Abstractions.IRequestMiddleware-2.yml
  commentId: T:Raftel.Application.Abstractions.IRequestMiddleware`2
  name.vb: IRequestMiddleware(Of TRequest, TResponse)
  fullName: Raftel.Application.Abstractions.IRequestMiddleware<TRequest, TResponse>
  fullName.vb: Raftel.Application.Abstractions.IRequestMiddleware(Of TRequest, TResponse)
  nameWithType: IRequestMiddleware<TRequest, TResponse>
  nameWithType.vb: IRequestMiddleware(Of TRequest, TResponse)
- uid: Raftel.Application.Abstractions.IRequestMiddleware`2.HandleAsync(`0,Raftel.Application.Abstractions.RequestHandlerDelegate{`1})
  name: HandleAsync(TRequest, RequestHandlerDelegate<TResponse>)
  href: api/Raftel.Application.Abstractions.IRequestMiddleware-2.yml
  commentId: M:Raftel.Application.Abstractions.IRequestMiddleware`2.HandleAsync(`0,Raftel.Application.Abstractions.RequestHandlerDelegate{`1})
  name.vb: HandleAsync(TRequest, RequestHandlerDelegate(Of TResponse))
  fullName: Raftel.Application.Abstractions.IRequestMiddleware<TRequest, TResponse>.HandleAsync(TRequest, Raftel.Application.Abstractions.RequestHandlerDelegate<TResponse>)
  fullName.vb: Raftel.Application.Abstractions.IRequestMiddleware(Of TRequest, TResponse).HandleAsync(TRequest, Raftel.Application.Abstractions.RequestHandlerDelegate(Of TResponse))
  nameWithType: IRequestMiddleware<TRequest, TResponse>.HandleAsync(TRequest, RequestHandlerDelegate<TResponse>)
  nameWithType.vb: IRequestMiddleware(Of TRequest, TResponse).HandleAsync(TRequest, RequestHandlerDelegate(Of TResponse))
- uid: Raftel.Application.Abstractions.IRequestMiddleware`2.HandleAsync*
  name: HandleAsync
  href: api/Raftel.Application.Abstractions.IRequestMiddleware-2.yml
  commentId: Overload:Raftel.Application.Abstractions.IRequestMiddleware`2.HandleAsync
  isSpec: "True"
  fullName: Raftel.Application.Abstractions.IRequestMiddleware<TRequest, TResponse>.HandleAsync
  fullName.vb: Raftel.Application.Abstractions.IRequestMiddleware(Of TRequest, TResponse).HandleAsync
  nameWithType: IRequestMiddleware<TRequest, TResponse>.HandleAsync
  nameWithType.vb: IRequestMiddleware(Of TRequest, TResponse).HandleAsync
- uid: Raftel.Application.Abstractions.IRequest`1
  name: IRequest<TResponse>
  href: api/Raftel.Application.Abstractions.IRequest-1.yml
  commentId: T:Raftel.Application.Abstractions.IRequest`1
  name.vb: IRequest(Of TResponse)
  fullName: Raftel.Application.Abstractions.IRequest<TResponse>
  fullName.vb: Raftel.Application.Abstractions.IRequest(Of TResponse)
  nameWithType: IRequest<TResponse>
  nameWithType.vb: IRequest(Of TResponse)
- uid: Raftel.Application.Abstractions.Middlewares
  name: Raftel.Application.Abstractions.Middlewares
  href: api/Raftel.Application.Abstractions.Middlewares.yml
  commentId: N:Raftel.Application.Abstractions.Middlewares
  fullName: Raftel.Application.Abstractions.Middlewares
  nameWithType: Raftel.Application.Abstractions.Middlewares
- uid: Raftel.Application.Abstractions.Middlewares.UnitOfWorkMiddleware`2
  name: UnitOfWorkMiddleware<TRequest, TResponse>
  href: api/Raftel.Application.Abstractions.Middlewares.UnitOfWorkMiddleware-2.yml
  commentId: T:Raftel.Application.Abstractions.Middlewares.UnitOfWorkMiddleware`2
  name.vb: UnitOfWorkMiddleware(Of TRequest, TResponse)
  fullName: Raftel.Application.Abstractions.Middlewares.UnitOfWorkMiddleware<TRequest, TResponse>
  fullName.vb: Raftel.Application.Abstractions.Middlewares.UnitOfWorkMiddleware(Of TRequest, TResponse)
  nameWithType: UnitOfWorkMiddleware<TRequest, TResponse>
  nameWithType.vb: UnitOfWorkMiddleware(Of TRequest, TResponse)
- uid: Raftel.Application.Abstractions.Middlewares.UnitOfWorkMiddleware`2.#ctor(Raftel.Application.IUnitOfWork)
  name: UnitOfWorkMiddleware(IUnitOfWork)
  href: api/Raftel.Application.Abstractions.Middlewares.UnitOfWorkMiddleware-2.yml
  commentId: M:Raftel.Application.Abstractions.Middlewares.UnitOfWorkMiddleware`2.#ctor(Raftel.Application.IUnitOfWork)
  name.vb: New(IUnitOfWork)
  fullName: Raftel.Application.Abstractions.Middlewares.UnitOfWorkMiddleware<TRequest, TResponse>.UnitOfWorkMiddleware(Raftel.Application.IUnitOfWork)
  fullName.vb: Raftel.Application.Abstractions.Middlewares.UnitOfWorkMiddleware(Of TRequest, TResponse).New(Raftel.Application.IUnitOfWork)
  nameWithType: UnitOfWorkMiddleware<TRequest, TResponse>.UnitOfWorkMiddleware(IUnitOfWork)
  nameWithType.vb: UnitOfWorkMiddleware(Of TRequest, TResponse).New(IUnitOfWork)
- uid: Raftel.Application.Abstractions.Middlewares.UnitOfWorkMiddleware`2.#ctor*
  name: UnitOfWorkMiddleware
  href: api/Raftel.Application.Abstractions.Middlewares.UnitOfWorkMiddleware-2.yml
  commentId: Overload:Raftel.Application.Abstractions.Middlewares.UnitOfWorkMiddleware`2.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Raftel.Application.Abstractions.Middlewares.UnitOfWorkMiddleware<TRequest, TResponse>.UnitOfWorkMiddleware
  fullName.vb: Raftel.Application.Abstractions.Middlewares.UnitOfWorkMiddleware(Of TRequest, TResponse).New
  nameWithType: UnitOfWorkMiddleware<TRequest, TResponse>.UnitOfWorkMiddleware
  nameWithType.vb: UnitOfWorkMiddleware(Of TRequest, TResponse).New
- uid: Raftel.Application.Abstractions.Middlewares.UnitOfWorkMiddleware`2.HandleAsync(`0,Raftel.Application.Abstractions.RequestHandlerDelegate{`1})
  name: HandleAsync(TRequest, RequestHandlerDelegate<TResponse>)
  href: api/Raftel.Application.Abstractions.Middlewares.UnitOfWorkMiddleware-2.yml
  commentId: M:Raftel.Application.Abstractions.Middlewares.UnitOfWorkMiddleware`2.HandleAsync(`0,Raftel.Application.Abstractions.RequestHandlerDelegate{`1})
  name.vb: HandleAsync(TRequest, RequestHandlerDelegate(Of TResponse))
  fullName: Raftel.Application.Abstractions.Middlewares.UnitOfWorkMiddleware<TRequest, TResponse>.HandleAsync(TRequest, Raftel.Application.Abstractions.RequestHandlerDelegate<TResponse>)
  fullName.vb: Raftel.Application.Abstractions.Middlewares.UnitOfWorkMiddleware(Of TRequest, TResponse).HandleAsync(TRequest, Raftel.Application.Abstractions.RequestHandlerDelegate(Of TResponse))
  nameWithType: UnitOfWorkMiddleware<TRequest, TResponse>.HandleAsync(TRequest, RequestHandlerDelegate<TResponse>)
  nameWithType.vb: UnitOfWorkMiddleware(Of TRequest, TResponse).HandleAsync(TRequest, RequestHandlerDelegate(Of TResponse))
- uid: Raftel.Application.Abstractions.Middlewares.UnitOfWorkMiddleware`2.HandleAsync*
  name: HandleAsync
  href: api/Raftel.Application.Abstractions.Middlewares.UnitOfWorkMiddleware-2.yml
  commentId: Overload:Raftel.Application.Abstractions.Middlewares.UnitOfWorkMiddleware`2.HandleAsync
  isSpec: "True"
  fullName: Raftel.Application.Abstractions.Middlewares.UnitOfWorkMiddleware<TRequest, TResponse>.HandleAsync
  fullName.vb: Raftel.Application.Abstractions.Middlewares.UnitOfWorkMiddleware(Of TRequest, TResponse).HandleAsync
  nameWithType: UnitOfWorkMiddleware<TRequest, TResponse>.HandleAsync
  nameWithType.vb: UnitOfWorkMiddleware(Of TRequest, TResponse).HandleAsync
- uid: Raftel.Application.Abstractions.Middlewares.ValidationMiddleware`2
  name: ValidationMiddleware<TRequest, TResponse>
  href: api/Raftel.Application.Abstractions.Middlewares.ValidationMiddleware-2.yml
  commentId: T:Raftel.Application.Abstractions.Middlewares.ValidationMiddleware`2
  name.vb: ValidationMiddleware(Of TRequest, TResponse)
  fullName: Raftel.Application.Abstractions.Middlewares.ValidationMiddleware<TRequest, TResponse>
  fullName.vb: Raftel.Application.Abstractions.Middlewares.ValidationMiddleware(Of TRequest, TResponse)
  nameWithType: ValidationMiddleware<TRequest, TResponse>
  nameWithType.vb: ValidationMiddleware(Of TRequest, TResponse)
- uid: Raftel.Application.Abstractions.Middlewares.ValidationMiddleware`2.#ctor(System.Collections.Generic.IEnumerable{Raftel.Domain.Validators.Validator{`0}})
  name: ValidationMiddleware(IEnumerable<Validator<TRequest>>)
  href: api/Raftel.Application.Abstractions.Middlewares.ValidationMiddleware-2.yml
  commentId: M:Raftel.Application.Abstractions.Middlewares.ValidationMiddleware`2.#ctor(System.Collections.Generic.IEnumerable{Raftel.Domain.Validators.Validator{`0}})
  name.vb: New(IEnumerable(Of Validator(Of TRequest)))
  fullName: Raftel.Application.Abstractions.Middlewares.ValidationMiddleware<TRequest, TResponse>.ValidationMiddleware(System.Collections.Generic.IEnumerable<Raftel.Domain.Validators.Validator<TRequest>>)
  fullName.vb: Raftel.Application.Abstractions.Middlewares.ValidationMiddleware(Of TRequest, TResponse).New(System.Collections.Generic.IEnumerable(Of Raftel.Domain.Validators.Validator(Of TRequest)))
  nameWithType: ValidationMiddleware<TRequest, TResponse>.ValidationMiddleware(IEnumerable<Validator<TRequest>>)
  nameWithType.vb: ValidationMiddleware(Of TRequest, TResponse).New(IEnumerable(Of Validator(Of TRequest)))
- uid: Raftel.Application.Abstractions.Middlewares.ValidationMiddleware`2.#ctor*
  name: ValidationMiddleware
  href: api/Raftel.Application.Abstractions.Middlewares.ValidationMiddleware-2.yml
  commentId: Overload:Raftel.Application.Abstractions.Middlewares.ValidationMiddleware`2.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Raftel.Application.Abstractions.Middlewares.ValidationMiddleware<TRequest, TResponse>.ValidationMiddleware
  fullName.vb: Raftel.Application.Abstractions.Middlewares.ValidationMiddleware(Of TRequest, TResponse).New
  nameWithType: ValidationMiddleware<TRequest, TResponse>.ValidationMiddleware
  nameWithType.vb: ValidationMiddleware(Of TRequest, TResponse).New
- uid: Raftel.Application.Abstractions.Middlewares.ValidationMiddleware`2.HandleAsync(`0,Raftel.Application.Abstractions.RequestHandlerDelegate{`1})
  name: HandleAsync(TRequest, RequestHandlerDelegate<TResponse>)
  href: api/Raftel.Application.Abstractions.Middlewares.ValidationMiddleware-2.yml
  commentId: M:Raftel.Application.Abstractions.Middlewares.ValidationMiddleware`2.HandleAsync(`0,Raftel.Application.Abstractions.RequestHandlerDelegate{`1})
  name.vb: HandleAsync(TRequest, RequestHandlerDelegate(Of TResponse))
  fullName: Raftel.Application.Abstractions.Middlewares.ValidationMiddleware<TRequest, TResponse>.HandleAsync(TRequest, Raftel.Application.Abstractions.RequestHandlerDelegate<TResponse>)
  fullName.vb: Raftel.Application.Abstractions.Middlewares.ValidationMiddleware(Of TRequest, TResponse).HandleAsync(TRequest, Raftel.Application.Abstractions.RequestHandlerDelegate(Of TResponse))
  nameWithType: ValidationMiddleware<TRequest, TResponse>.HandleAsync(TRequest, RequestHandlerDelegate<TResponse>)
  nameWithType.vb: ValidationMiddleware(Of TRequest, TResponse).HandleAsync(TRequest, RequestHandlerDelegate(Of TResponse))
- uid: Raftel.Application.Abstractions.Middlewares.ValidationMiddleware`2.HandleAsync*
  name: HandleAsync
  href: api/Raftel.Application.Abstractions.Middlewares.ValidationMiddleware-2.yml
  commentId: Overload:Raftel.Application.Abstractions.Middlewares.ValidationMiddleware`2.HandleAsync
  isSpec: "True"
  fullName: Raftel.Application.Abstractions.Middlewares.ValidationMiddleware<TRequest, TResponse>.HandleAsync
  fullName.vb: Raftel.Application.Abstractions.Middlewares.ValidationMiddleware(Of TRequest, TResponse).HandleAsync
  nameWithType: ValidationMiddleware<TRequest, TResponse>.HandleAsync
  nameWithType.vb: ValidationMiddleware(Of TRequest, TResponse).HandleAsync
- uid: Raftel.Application.Abstractions.RequestDispatcher
  name: RequestDispatcher
  href: api/Raftel.Application.Abstractions.RequestDispatcher.yml
  commentId: T:Raftel.Application.Abstractions.RequestDispatcher
  fullName: Raftel.Application.Abstractions.RequestDispatcher
  nameWithType: RequestDispatcher
- uid: Raftel.Application.Abstractions.RequestDispatcher.#ctor(System.IServiceProvider)
  name: RequestDispatcher(IServiceProvider)
  href: api/Raftel.Application.Abstractions.RequestDispatcher.yml
  commentId: M:Raftel.Application.Abstractions.RequestDispatcher.#ctor(System.IServiceProvider)
  name.vb: New(IServiceProvider)
  fullName: Raftel.Application.Abstractions.RequestDispatcher.RequestDispatcher(System.IServiceProvider)
  fullName.vb: Raftel.Application.Abstractions.RequestDispatcher.New(System.IServiceProvider)
  nameWithType: RequestDispatcher.RequestDispatcher(IServiceProvider)
  nameWithType.vb: RequestDispatcher.New(IServiceProvider)
- uid: Raftel.Application.Abstractions.RequestDispatcher.#ctor*
  name: RequestDispatcher
  href: api/Raftel.Application.Abstractions.RequestDispatcher.yml
  commentId: Overload:Raftel.Application.Abstractions.RequestDispatcher.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Raftel.Application.Abstractions.RequestDispatcher.RequestDispatcher
  fullName.vb: Raftel.Application.Abstractions.RequestDispatcher.New
  nameWithType: RequestDispatcher.RequestDispatcher
  nameWithType.vb: RequestDispatcher.New
- uid: Raftel.Application.Abstractions.RequestDispatcher.DispatchAsync*
  name: DispatchAsync
  href: api/Raftel.Application.Abstractions.RequestDispatcher.yml
  commentId: Overload:Raftel.Application.Abstractions.RequestDispatcher.DispatchAsync
  isSpec: "True"
  fullName: Raftel.Application.Abstractions.RequestDispatcher.DispatchAsync
  nameWithType: RequestDispatcher.DispatchAsync
- uid: Raftel.Application.Abstractions.RequestDispatcher.DispatchAsync``2(``0)
  name: DispatchAsync<TRequest, TResponse>(TRequest)
  href: api/Raftel.Application.Abstractions.RequestDispatcher.yml
  commentId: M:Raftel.Application.Abstractions.RequestDispatcher.DispatchAsync``2(``0)
  name.vb: DispatchAsync(Of TRequest, TResponse)(TRequest)
  fullName: Raftel.Application.Abstractions.RequestDispatcher.DispatchAsync<TRequest, TResponse>(TRequest)
  fullName.vb: Raftel.Application.Abstractions.RequestDispatcher.DispatchAsync(Of TRequest, TResponse)(TRequest)
  nameWithType: RequestDispatcher.DispatchAsync<TRequest, TResponse>(TRequest)
  nameWithType.vb: RequestDispatcher.DispatchAsync(Of TRequest, TResponse)(TRequest)
- uid: Raftel.Application.Abstractions.RequestHandlerDelegate`1
  name: RequestHandlerDelegate<TResponse>
  href: api/Raftel.Application.Abstractions.RequestHandlerDelegate-1.yml
  commentId: T:Raftel.Application.Abstractions.RequestHandlerDelegate`1
  name.vb: RequestHandlerDelegate(Of TResponse)
  fullName: Raftel.Application.Abstractions.RequestHandlerDelegate<TResponse>
  fullName.vb: Raftel.Application.Abstractions.RequestHandlerDelegate(Of TResponse)
  nameWithType: RequestHandlerDelegate<TResponse>
  nameWithType.vb: RequestHandlerDelegate(Of TResponse)
- uid: Raftel.Application.Commands
  name: Raftel.Application.Commands
  href: api/Raftel.Application.Commands.yml
  commentId: N:Raftel.Application.Commands
  fullName: Raftel.Application.Commands
  nameWithType: Raftel.Application.Commands
- uid: Raftel.Application.Commands.CommandDispatcher
  name: CommandDispatcher
  href: api/Raftel.Application.Commands.CommandDispatcher.yml
  commentId: T:Raftel.Application.Commands.CommandDispatcher
  fullName: Raftel.Application.Commands.CommandDispatcher
  nameWithType: CommandDispatcher
- uid: Raftel.Application.Commands.CommandDispatcher.#ctor(Raftel.Application.Abstractions.IRequestDispatcher)
  name: CommandDispatcher(IRequestDispatcher)
  href: api/Raftel.Application.Commands.CommandDispatcher.yml
  commentId: M:Raftel.Application.Commands.CommandDispatcher.#ctor(Raftel.Application.Abstractions.IRequestDispatcher)
  name.vb: New(IRequestDispatcher)
  fullName: Raftel.Application.Commands.CommandDispatcher.CommandDispatcher(Raftel.Application.Abstractions.IRequestDispatcher)
  fullName.vb: Raftel.Application.Commands.CommandDispatcher.New(Raftel.Application.Abstractions.IRequestDispatcher)
  nameWithType: CommandDispatcher.CommandDispatcher(IRequestDispatcher)
  nameWithType.vb: CommandDispatcher.New(IRequestDispatcher)
- uid: Raftel.Application.Commands.CommandDispatcher.#ctor*
  name: CommandDispatcher
  href: api/Raftel.Application.Commands.CommandDispatcher.yml
  commentId: Overload:Raftel.Application.Commands.CommandDispatcher.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Raftel.Application.Commands.CommandDispatcher.CommandDispatcher
  fullName.vb: Raftel.Application.Commands.CommandDispatcher.New
  nameWithType: CommandDispatcher.CommandDispatcher
  nameWithType.vb: CommandDispatcher.New
- uid: Raftel.Application.Commands.CommandDispatcher.DispatchAsync*
  name: DispatchAsync
  href: api/Raftel.Application.Commands.CommandDispatcher.yml
  commentId: Overload:Raftel.Application.Commands.CommandDispatcher.DispatchAsync
  isSpec: "True"
  fullName: Raftel.Application.Commands.CommandDispatcher.DispatchAsync
  nameWithType: CommandDispatcher.DispatchAsync
- uid: Raftel.Application.Commands.CommandDispatcher.DispatchAsync``1(``0)
  name: DispatchAsync<TCommand>(TCommand)
  href: api/Raftel.Application.Commands.CommandDispatcher.yml
  commentId: M:Raftel.Application.Commands.CommandDispatcher.DispatchAsync``1(``0)
  name.vb: DispatchAsync(Of TCommand)(TCommand)
  fullName: Raftel.Application.Commands.CommandDispatcher.DispatchAsync<TCommand>(TCommand)
  fullName.vb: Raftel.Application.Commands.CommandDispatcher.DispatchAsync(Of TCommand)(TCommand)
  nameWithType: CommandDispatcher.DispatchAsync<TCommand>(TCommand)
  nameWithType.vb: CommandDispatcher.DispatchAsync(Of TCommand)(TCommand)
- uid: Raftel.Application.Commands.ICommand
  name: ICommand
  href: api/Raftel.Application.Commands.ICommand.yml
  commentId: T:Raftel.Application.Commands.ICommand
  fullName: Raftel.Application.Commands.ICommand
  nameWithType: ICommand
- uid: Raftel.Application.Commands.ICommandDispatcher
  name: ICommandDispatcher
  href: api/Raftel.Application.Commands.ICommandDispatcher.yml
  commentId: T:Raftel.Application.Commands.ICommandDispatcher
  fullName: Raftel.Application.Commands.ICommandDispatcher
  nameWithType: ICommandDispatcher
- uid: Raftel.Application.Commands.ICommandDispatcher.DispatchAsync*
  name: DispatchAsync
  href: api/Raftel.Application.Commands.ICommandDispatcher.yml
  commentId: Overload:Raftel.Application.Commands.ICommandDispatcher.DispatchAsync
  isSpec: "True"
  fullName: Raftel.Application.Commands.ICommandDispatcher.DispatchAsync
  nameWithType: ICommandDispatcher.DispatchAsync
- uid: Raftel.Application.Commands.ICommandDispatcher.DispatchAsync``1(``0)
  name: DispatchAsync<TCommand>(TCommand)
  href: api/Raftel.Application.Commands.ICommandDispatcher.yml
  commentId: M:Raftel.Application.Commands.ICommandDispatcher.DispatchAsync``1(``0)
  name.vb: DispatchAsync(Of TCommand)(TCommand)
  fullName: Raftel.Application.Commands.ICommandDispatcher.DispatchAsync<TCommand>(TCommand)
  fullName.vb: Raftel.Application.Commands.ICommandDispatcher.DispatchAsync(Of TCommand)(TCommand)
  nameWithType: ICommandDispatcher.DispatchAsync<TCommand>(TCommand)
  nameWithType.vb: ICommandDispatcher.DispatchAsync(Of TCommand)(TCommand)
- uid: Raftel.Application.Commands.ICommandHandler`1
  name: ICommandHandler<TCommand>
  href: api/Raftel.Application.Commands.ICommandHandler-1.yml
  commentId: T:Raftel.Application.Commands.ICommandHandler`1
  name.vb: ICommandHandler(Of TCommand)
  fullName: Raftel.Application.Commands.ICommandHandler<TCommand>
  fullName.vb: Raftel.Application.Commands.ICommandHandler(Of TCommand)
  nameWithType: ICommandHandler<TCommand>
  nameWithType.vb: ICommandHandler(Of TCommand)
- uid: Raftel.Application.DependencyInjection
  name: DependencyInjection
  href: api/Raftel.Application.DependencyInjection.yml
  commentId: T:Raftel.Application.DependencyInjection
  fullName: Raftel.Application.DependencyInjection
  nameWithType: DependencyInjection
- uid: Raftel.Application.DependencyInjection.AddRaftelApplication(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name: AddRaftelApplication(IServiceCollection)
  href: api/Raftel.Application.DependencyInjection.yml
  commentId: M:Raftel.Application.DependencyInjection.AddRaftelApplication(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  fullName: Raftel.Application.DependencyInjection.AddRaftelApplication(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  nameWithType: DependencyInjection.AddRaftelApplication(IServiceCollection)
- uid: Raftel.Application.DependencyInjection.AddRaftelApplication*
  name: AddRaftelApplication
  href: api/Raftel.Application.DependencyInjection.yml
  commentId: Overload:Raftel.Application.DependencyInjection.AddRaftelApplication
  isSpec: "True"
  fullName: Raftel.Application.DependencyInjection.AddRaftelApplication
  nameWithType: DependencyInjection.AddRaftelApplication
- uid: Raftel.Application.Exceptions
  name: Raftel.Application.Exceptions
  href: api/Raftel.Application.Exceptions.yml
  commentId: N:Raftel.Application.Exceptions
  fullName: Raftel.Application.Exceptions
  nameWithType: Raftel.Application.Exceptions
- uid: Raftel.Application.Exceptions.ValidationException
  name: ValidationException
  href: api/Raftel.Application.Exceptions.ValidationException.yml
  commentId: T:Raftel.Application.Exceptions.ValidationException
  fullName: Raftel.Application.Exceptions.ValidationException
  nameWithType: ValidationException
- uid: Raftel.Application.Exceptions.ValidationException.#ctor(System.Collections.Generic.IEnumerable{Raftel.Domain.Abstractions.Error})
  name: ValidationException(IEnumerable<Error>)
  href: api/Raftel.Application.Exceptions.ValidationException.yml
  commentId: M:Raftel.Application.Exceptions.ValidationException.#ctor(System.Collections.Generic.IEnumerable{Raftel.Domain.Abstractions.Error})
  name.vb: New(IEnumerable(Of Error))
  fullName: Raftel.Application.Exceptions.ValidationException.ValidationException(System.Collections.Generic.IEnumerable<Raftel.Domain.Abstractions.Error>)
  fullName.vb: Raftel.Application.Exceptions.ValidationException.New(System.Collections.Generic.IEnumerable(Of Raftel.Domain.Abstractions.Error))
  nameWithType: ValidationException.ValidationException(IEnumerable<Error>)
  nameWithType.vb: ValidationException.New(IEnumerable(Of Error))
- uid: Raftel.Application.Exceptions.ValidationException.#ctor*
  name: ValidationException
  href: api/Raftel.Application.Exceptions.ValidationException.yml
  commentId: Overload:Raftel.Application.Exceptions.ValidationException.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Raftel.Application.Exceptions.ValidationException.ValidationException
  fullName.vb: Raftel.Application.Exceptions.ValidationException.New
  nameWithType: ValidationException.ValidationException
  nameWithType.vb: ValidationException.New
- uid: Raftel.Application.Exceptions.ValidationException.Errors
  name: Errors
  href: api/Raftel.Application.Exceptions.ValidationException.yml
  commentId: P:Raftel.Application.Exceptions.ValidationException.Errors
  fullName: Raftel.Application.Exceptions.ValidationException.Errors
  nameWithType: ValidationException.Errors
- uid: Raftel.Application.Exceptions.ValidationException.Errors*
  name: Errors
  href: api/Raftel.Application.Exceptions.ValidationException.yml
  commentId: Overload:Raftel.Application.Exceptions.ValidationException.Errors
  isSpec: "True"
  fullName: Raftel.Application.Exceptions.ValidationException.Errors
  nameWithType: ValidationException.Errors
- uid: Raftel.Application.Exceptions.ValidationException.ToString
  name: ToString()
  href: api/Raftel.Application.Exceptions.ValidationException.yml
  commentId: M:Raftel.Application.Exceptions.ValidationException.ToString
  fullName: Raftel.Application.Exceptions.ValidationException.ToString()
  nameWithType: ValidationException.ToString()
- uid: Raftel.Application.Exceptions.ValidationException.ToString*
  name: ToString
  href: api/Raftel.Application.Exceptions.ValidationException.yml
  commentId: Overload:Raftel.Application.Exceptions.ValidationException.ToString
  isSpec: "True"
  fullName: Raftel.Application.Exceptions.ValidationException.ToString
  nameWithType: ValidationException.ToString
- uid: Raftel.Application.IUnitOfWork
  name: IUnitOfWork
  href: api/Raftel.Application.IUnitOfWork.yml
  commentId: T:Raftel.Application.IUnitOfWork
  fullName: Raftel.Application.IUnitOfWork
  nameWithType: IUnitOfWork
- uid: Raftel.Application.IUnitOfWork.CommitAsync(System.Threading.CancellationToken)
  name: CommitAsync(CancellationToken)
  href: api/Raftel.Application.IUnitOfWork.yml
  commentId: M:Raftel.Application.IUnitOfWork.CommitAsync(System.Threading.CancellationToken)
  fullName: Raftel.Application.IUnitOfWork.CommitAsync(System.Threading.CancellationToken)
  nameWithType: IUnitOfWork.CommitAsync(CancellationToken)
- uid: Raftel.Application.IUnitOfWork.CommitAsync*
  name: CommitAsync
  href: api/Raftel.Application.IUnitOfWork.yml
  commentId: Overload:Raftel.Application.IUnitOfWork.CommitAsync
  isSpec: "True"
  fullName: Raftel.Application.IUnitOfWork.CommitAsync
  nameWithType: IUnitOfWork.CommitAsync
- uid: Raftel.Application.Queries
  name: Raftel.Application.Queries
  href: api/Raftel.Application.Queries.yml
  commentId: N:Raftel.Application.Queries
  fullName: Raftel.Application.Queries
  nameWithType: Raftel.Application.Queries
- uid: Raftel.Application.Queries.IQueryDispatcher
  name: IQueryDispatcher
  href: api/Raftel.Application.Queries.IQueryDispatcher.yml
  commentId: T:Raftel.Application.Queries.IQueryDispatcher
  fullName: Raftel.Application.Queries.IQueryDispatcher
  nameWithType: IQueryDispatcher
- uid: Raftel.Application.Queries.IQueryDispatcher.DispatchAsync*
  name: DispatchAsync
  href: api/Raftel.Application.Queries.IQueryDispatcher.yml
  commentId: Overload:Raftel.Application.Queries.IQueryDispatcher.DispatchAsync
  isSpec: "True"
  fullName: Raftel.Application.Queries.IQueryDispatcher.DispatchAsync
  nameWithType: IQueryDispatcher.DispatchAsync
- uid: Raftel.Application.Queries.IQueryDispatcher.DispatchAsync``2(``0)
  name: DispatchAsync<TQuery, TResult>(TQuery)
  href: api/Raftel.Application.Queries.IQueryDispatcher.yml
  commentId: M:Raftel.Application.Queries.IQueryDispatcher.DispatchAsync``2(``0)
  name.vb: DispatchAsync(Of TQuery, TResult)(TQuery)
  fullName: Raftel.Application.Queries.IQueryDispatcher.DispatchAsync<TQuery, TResult>(TQuery)
  fullName.vb: Raftel.Application.Queries.IQueryDispatcher.DispatchAsync(Of TQuery, TResult)(TQuery)
  nameWithType: IQueryDispatcher.DispatchAsync<TQuery, TResult>(TQuery)
  nameWithType.vb: IQueryDispatcher.DispatchAsync(Of TQuery, TResult)(TQuery)
- uid: Raftel.Application.Queries.IQueryHandler`2
  name: IQueryHandler<TQuery, TResult>
  href: api/Raftel.Application.Queries.IQueryHandler-2.yml
  commentId: T:Raftel.Application.Queries.IQueryHandler`2
  name.vb: IQueryHandler(Of TQuery, TResult)
  fullName: Raftel.Application.Queries.IQueryHandler<TQuery, TResult>
  fullName.vb: Raftel.Application.Queries.IQueryHandler(Of TQuery, TResult)
  nameWithType: IQueryHandler<TQuery, TResult>
  nameWithType.vb: IQueryHandler(Of TQuery, TResult)
- uid: Raftel.Application.Queries.IQuery`1
  name: IQuery<TResult>
  href: api/Raftel.Application.Queries.IQuery-1.yml
  commentId: T:Raftel.Application.Queries.IQuery`1
  name.vb: IQuery(Of TResult)
  fullName: Raftel.Application.Queries.IQuery<TResult>
  fullName.vb: Raftel.Application.Queries.IQuery(Of TResult)
  nameWithType: IQuery<TResult>
  nameWithType.vb: IQuery(Of TResult)
- uid: Raftel.Application.Queries.QueryDispatcher
  name: QueryDispatcher
  href: api/Raftel.Application.Queries.QueryDispatcher.yml
  commentId: T:Raftel.Application.Queries.QueryDispatcher
  fullName: Raftel.Application.Queries.QueryDispatcher
  nameWithType: QueryDispatcher
- uid: Raftel.Application.Queries.QueryDispatcher.#ctor(Raftel.Application.Abstractions.IRequestDispatcher)
  name: QueryDispatcher(IRequestDispatcher)
  href: api/Raftel.Application.Queries.QueryDispatcher.yml
  commentId: M:Raftel.Application.Queries.QueryDispatcher.#ctor(Raftel.Application.Abstractions.IRequestDispatcher)
  name.vb: New(IRequestDispatcher)
  fullName: Raftel.Application.Queries.QueryDispatcher.QueryDispatcher(Raftel.Application.Abstractions.IRequestDispatcher)
  fullName.vb: Raftel.Application.Queries.QueryDispatcher.New(Raftel.Application.Abstractions.IRequestDispatcher)
  nameWithType: QueryDispatcher.QueryDispatcher(IRequestDispatcher)
  nameWithType.vb: QueryDispatcher.New(IRequestDispatcher)
- uid: Raftel.Application.Queries.QueryDispatcher.#ctor*
  name: QueryDispatcher
  href: api/Raftel.Application.Queries.QueryDispatcher.yml
  commentId: Overload:Raftel.Application.Queries.QueryDispatcher.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Raftel.Application.Queries.QueryDispatcher.QueryDispatcher
  fullName.vb: Raftel.Application.Queries.QueryDispatcher.New
  nameWithType: QueryDispatcher.QueryDispatcher
  nameWithType.vb: QueryDispatcher.New
- uid: Raftel.Application.Queries.QueryDispatcher.DispatchAsync*
  name: DispatchAsync
  href: api/Raftel.Application.Queries.QueryDispatcher.yml
  commentId: Overload:Raftel.Application.Queries.QueryDispatcher.DispatchAsync
  isSpec: "True"
  fullName: Raftel.Application.Queries.QueryDispatcher.DispatchAsync
  nameWithType: QueryDispatcher.DispatchAsync
- uid: Raftel.Application.Queries.QueryDispatcher.DispatchAsync``2(``0)
  name: DispatchAsync<TQuery, TResult>(TQuery)
  href: api/Raftel.Application.Queries.QueryDispatcher.yml
  commentId: M:Raftel.Application.Queries.QueryDispatcher.DispatchAsync``2(``0)
  name.vb: DispatchAsync(Of TQuery, TResult)(TQuery)
  fullName: Raftel.Application.Queries.QueryDispatcher.DispatchAsync<TQuery, TResult>(TQuery)
  fullName.vb: Raftel.Application.Queries.QueryDispatcher.DispatchAsync(Of TQuery, TResult)(TQuery)
  nameWithType: QueryDispatcher.DispatchAsync<TQuery, TResult>(TQuery)
  nameWithType.vb: QueryDispatcher.DispatchAsync(Of TQuery, TResult)(TQuery)
- uid: Raftel.Domain.Abstractions
  name: Raftel.Domain.Abstractions
  href: api/Raftel.Domain.Abstractions.yml
  commentId: N:Raftel.Domain.Abstractions
  fullName: Raftel.Domain.Abstractions
  nameWithType: Raftel.Domain.Abstractions
- uid: Raftel.Domain.Abstractions.Error
  name: Error
  href: api/Raftel.Domain.Abstractions.Error.yml
  commentId: T:Raftel.Domain.Abstractions.Error
  fullName: Raftel.Domain.Abstractions.Error
  nameWithType: Error
- uid: Raftel.Domain.Abstractions.Error.#ctor(System.String,System.String)
  name: Error(string, string)
  href: api/Raftel.Domain.Abstractions.Error.yml
  commentId: M:Raftel.Domain.Abstractions.Error.#ctor(System.String,System.String)
  name.vb: New(String, String)
  fullName: Raftel.Domain.Abstractions.Error.Error(string, string)
  fullName.vb: Raftel.Domain.Abstractions.Error.New(String, String)
  nameWithType: Error.Error(string, string)
  nameWithType.vb: Error.New(String, String)
- uid: Raftel.Domain.Abstractions.Error.#ctor*
  name: Error
  href: api/Raftel.Domain.Abstractions.Error.yml
  commentId: Overload:Raftel.Domain.Abstractions.Error.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Raftel.Domain.Abstractions.Error.Error
  fullName.vb: Raftel.Domain.Abstractions.Error.New
  nameWithType: Error.Error
  nameWithType.vb: Error.New
- uid: Raftel.Domain.Abstractions.Error.Code
  name: Code
  href: api/Raftel.Domain.Abstractions.Error.yml
  commentId: P:Raftel.Domain.Abstractions.Error.Code
  fullName: Raftel.Domain.Abstractions.Error.Code
  nameWithType: Error.Code
- uid: Raftel.Domain.Abstractions.Error.Code*
  name: Code
  href: api/Raftel.Domain.Abstractions.Error.yml
  commentId: Overload:Raftel.Domain.Abstractions.Error.Code
  isSpec: "True"
  fullName: Raftel.Domain.Abstractions.Error.Code
  nameWithType: Error.Code
- uid: Raftel.Domain.Abstractions.Error.Message
  name: Message
  href: api/Raftel.Domain.Abstractions.Error.yml
  commentId: P:Raftel.Domain.Abstractions.Error.Message
  fullName: Raftel.Domain.Abstractions.Error.Message
  nameWithType: Error.Message
- uid: Raftel.Domain.Abstractions.Error.Message*
  name: Message
  href: api/Raftel.Domain.Abstractions.Error.yml
  commentId: Overload:Raftel.Domain.Abstractions.Error.Message
  isSpec: "True"
  fullName: Raftel.Domain.Abstractions.Error.Message
  nameWithType: Error.Message
- uid: Raftel.Domain.Abstractions.Error.None
  name: None
  href: api/Raftel.Domain.Abstractions.Error.yml
  commentId: F:Raftel.Domain.Abstractions.Error.None
  fullName: Raftel.Domain.Abstractions.Error.None
  nameWithType: Error.None
- uid: Raftel.Domain.Abstractions.Error.NullValue
  name: NullValue
  href: api/Raftel.Domain.Abstractions.Error.yml
  commentId: F:Raftel.Domain.Abstractions.Error.NullValue
  fullName: Raftel.Domain.Abstractions.Error.NullValue
  nameWithType: Error.NullValue
- uid: Raftel.Domain.Abstractions.IRepository`2
  name: IRepository<TEntity, TId>
  href: api/Raftel.Domain.Abstractions.IRepository-2.yml
  commentId: T:Raftel.Domain.Abstractions.IRepository`2
  name.vb: IRepository(Of TEntity, TId)
  fullName: Raftel.Domain.Abstractions.IRepository<TEntity, TId>
  fullName.vb: Raftel.Domain.Abstractions.IRepository(Of TEntity, TId)
  nameWithType: IRepository<TEntity, TId>
  nameWithType.vb: IRepository(Of TEntity, TId)
- uid: Raftel.Domain.Abstractions.IRepository`2.AddAsync(`0,System.Threading.CancellationToken)
  name: AddAsync(TEntity, CancellationToken)
  href: api/Raftel.Domain.Abstractions.IRepository-2.yml
  commentId: M:Raftel.Domain.Abstractions.IRepository`2.AddAsync(`0,System.Threading.CancellationToken)
  fullName: Raftel.Domain.Abstractions.IRepository<TEntity, TId>.AddAsync(TEntity, System.Threading.CancellationToken)
  fullName.vb: Raftel.Domain.Abstractions.IRepository(Of TEntity, TId).AddAsync(TEntity, System.Threading.CancellationToken)
  nameWithType: IRepository<TEntity, TId>.AddAsync(TEntity, CancellationToken)
  nameWithType.vb: IRepository(Of TEntity, TId).AddAsync(TEntity, CancellationToken)
- uid: Raftel.Domain.Abstractions.IRepository`2.AddAsync*
  name: AddAsync
  href: api/Raftel.Domain.Abstractions.IRepository-2.yml
  commentId: Overload:Raftel.Domain.Abstractions.IRepository`2.AddAsync
  isSpec: "True"
  fullName: Raftel.Domain.Abstractions.IRepository<TEntity, TId>.AddAsync
  fullName.vb: Raftel.Domain.Abstractions.IRepository(Of TEntity, TId).AddAsync
  nameWithType: IRepository<TEntity, TId>.AddAsync
  nameWithType.vb: IRepository(Of TEntity, TId).AddAsync
- uid: Raftel.Domain.Abstractions.IRepository`2.GetByIdAsync(`1,System.Threading.CancellationToken)
  name: GetByIdAsync(TId, CancellationToken)
  href: api/Raftel.Domain.Abstractions.IRepository-2.yml
  commentId: M:Raftel.Domain.Abstractions.IRepository`2.GetByIdAsync(`1,System.Threading.CancellationToken)
  fullName: Raftel.Domain.Abstractions.IRepository<TEntity, TId>.GetByIdAsync(TId, System.Threading.CancellationToken)
  fullName.vb: Raftel.Domain.Abstractions.IRepository(Of TEntity, TId).GetByIdAsync(TId, System.Threading.CancellationToken)
  nameWithType: IRepository<TEntity, TId>.GetByIdAsync(TId, CancellationToken)
  nameWithType.vb: IRepository(Of TEntity, TId).GetByIdAsync(TId, CancellationToken)
- uid: Raftel.Domain.Abstractions.IRepository`2.GetByIdAsync*
  name: GetByIdAsync
  href: api/Raftel.Domain.Abstractions.IRepository-2.yml
  commentId: Overload:Raftel.Domain.Abstractions.IRepository`2.GetByIdAsync
  isSpec: "True"
  fullName: Raftel.Domain.Abstractions.IRepository<TEntity, TId>.GetByIdAsync
  fullName.vb: Raftel.Domain.Abstractions.IRepository(Of TEntity, TId).GetByIdAsync
  nameWithType: IRepository<TEntity, TId>.GetByIdAsync
  nameWithType.vb: IRepository(Of TEntity, TId).GetByIdAsync
- uid: Raftel.Domain.Abstractions.IRepository`2.ListAllAsync(System.Threading.CancellationToken)
  name: ListAllAsync(CancellationToken)
  href: api/Raftel.Domain.Abstractions.IRepository-2.yml
  commentId: M:Raftel.Domain.Abstractions.IRepository`2.ListAllAsync(System.Threading.CancellationToken)
  fullName: Raftel.Domain.Abstractions.IRepository<TEntity, TId>.ListAllAsync(System.Threading.CancellationToken)
  fullName.vb: Raftel.Domain.Abstractions.IRepository(Of TEntity, TId).ListAllAsync(System.Threading.CancellationToken)
  nameWithType: IRepository<TEntity, TId>.ListAllAsync(CancellationToken)
  nameWithType.vb: IRepository(Of TEntity, TId).ListAllAsync(CancellationToken)
- uid: Raftel.Domain.Abstractions.IRepository`2.ListAllAsync*
  name: ListAllAsync
  href: api/Raftel.Domain.Abstractions.IRepository-2.yml
  commentId: Overload:Raftel.Domain.Abstractions.IRepository`2.ListAllAsync
  isSpec: "True"
  fullName: Raftel.Domain.Abstractions.IRepository<TEntity, TId>.ListAllAsync
  fullName.vb: Raftel.Domain.Abstractions.IRepository(Of TEntity, TId).ListAllAsync
  nameWithType: IRepository<TEntity, TId>.ListAllAsync
  nameWithType.vb: IRepository(Of TEntity, TId).ListAllAsync
- uid: Raftel.Domain.Abstractions.IRepository`2.Remove(`0)
  name: Remove(TEntity)
  href: api/Raftel.Domain.Abstractions.IRepository-2.yml
  commentId: M:Raftel.Domain.Abstractions.IRepository`2.Remove(`0)
  fullName: Raftel.Domain.Abstractions.IRepository<TEntity, TId>.Remove(TEntity)
  fullName.vb: Raftel.Domain.Abstractions.IRepository(Of TEntity, TId).Remove(TEntity)
  nameWithType: IRepository<TEntity, TId>.Remove(TEntity)
  nameWithType.vb: IRepository(Of TEntity, TId).Remove(TEntity)
- uid: Raftel.Domain.Abstractions.IRepository`2.Remove*
  name: Remove
  href: api/Raftel.Domain.Abstractions.IRepository-2.yml
  commentId: Overload:Raftel.Domain.Abstractions.IRepository`2.Remove
  isSpec: "True"
  fullName: Raftel.Domain.Abstractions.IRepository<TEntity, TId>.Remove
  fullName.vb: Raftel.Domain.Abstractions.IRepository(Of TEntity, TId).Remove
  nameWithType: IRepository<TEntity, TId>.Remove
  nameWithType.vb: IRepository(Of TEntity, TId).Remove
- uid: Raftel.Domain.Abstractions.IRepository`2.Update(`0)
  name: Update(TEntity)
  href: api/Raftel.Domain.Abstractions.IRepository-2.yml
  commentId: M:Raftel.Domain.Abstractions.IRepository`2.Update(`0)
  fullName: Raftel.Domain.Abstractions.IRepository<TEntity, TId>.Update(TEntity)
  fullName.vb: Raftel.Domain.Abstractions.IRepository(Of TEntity, TId).Update(TEntity)
  nameWithType: IRepository<TEntity, TId>.Update(TEntity)
  nameWithType.vb: IRepository(Of TEntity, TId).Update(TEntity)
- uid: Raftel.Domain.Abstractions.IRepository`2.Update*
  name: Update
  href: api/Raftel.Domain.Abstractions.IRepository-2.yml
  commentId: Overload:Raftel.Domain.Abstractions.IRepository`2.Update
  isSpec: "True"
  fullName: Raftel.Domain.Abstractions.IRepository<TEntity, TId>.Update
  fullName.vb: Raftel.Domain.Abstractions.IRepository(Of TEntity, TId).Update
  nameWithType: IRepository<TEntity, TId>.Update
  nameWithType.vb: IRepository(Of TEntity, TId).Update
- uid: Raftel.Domain.Abstractions.Result
  name: Result
  href: api/Raftel.Domain.Abstractions.Result.yml
  commentId: T:Raftel.Domain.Abstractions.Result
  fullName: Raftel.Domain.Abstractions.Result
  nameWithType: Result
- uid: Raftel.Domain.Abstractions.Result.#ctor(System.Boolean,Raftel.Domain.Abstractions.Error)
  name: Result(bool, Error)
  href: api/Raftel.Domain.Abstractions.Result.yml
  commentId: M:Raftel.Domain.Abstractions.Result.#ctor(System.Boolean,Raftel.Domain.Abstractions.Error)
  name.vb: New(Boolean, Error)
  fullName: Raftel.Domain.Abstractions.Result.Result(bool, Raftel.Domain.Abstractions.Error)
  fullName.vb: Raftel.Domain.Abstractions.Result.New(Boolean, Raftel.Domain.Abstractions.Error)
  nameWithType: Result.Result(bool, Error)
  nameWithType.vb: Result.New(Boolean, Error)
- uid: Raftel.Domain.Abstractions.Result.#ctor*
  name: Result
  href: api/Raftel.Domain.Abstractions.Result.yml
  commentId: Overload:Raftel.Domain.Abstractions.Result.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Raftel.Domain.Abstractions.Result.Result
  fullName.vb: Raftel.Domain.Abstractions.Result.New
  nameWithType: Result.Result
  nameWithType.vb: Result.New
- uid: Raftel.Domain.Abstractions.Result.Create*
  name: Create
  href: api/Raftel.Domain.Abstractions.Result.yml
  commentId: Overload:Raftel.Domain.Abstractions.Result.Create
  isSpec: "True"
  fullName: Raftel.Domain.Abstractions.Result.Create
  nameWithType: Result.Create
- uid: Raftel.Domain.Abstractions.Result.Create``1(``0)
  name: Create<TValue>(TValue?)
  href: api/Raftel.Domain.Abstractions.Result.yml
  commentId: M:Raftel.Domain.Abstractions.Result.Create``1(``0)
  name.vb: Create(Of TValue)(TValue)
  fullName: Raftel.Domain.Abstractions.Result.Create<TValue>(TValue?)
  fullName.vb: Raftel.Domain.Abstractions.Result.Create(Of TValue)(TValue)
  nameWithType: Result.Create<TValue>(TValue?)
  nameWithType.vb: Result.Create(Of TValue)(TValue)
- uid: Raftel.Domain.Abstractions.Result.Error
  name: Error
  href: api/Raftel.Domain.Abstractions.Result.yml
  commentId: P:Raftel.Domain.Abstractions.Result.Error
  fullName: Raftel.Domain.Abstractions.Result.Error
  nameWithType: Result.Error
- uid: Raftel.Domain.Abstractions.Result.Error*
  name: Error
  href: api/Raftel.Domain.Abstractions.Result.yml
  commentId: Overload:Raftel.Domain.Abstractions.Result.Error
  isSpec: "True"
  fullName: Raftel.Domain.Abstractions.Result.Error
  nameWithType: Result.Error
- uid: Raftel.Domain.Abstractions.Result.Failure(Raftel.Domain.Abstractions.Error)
  name: Failure(Error)
  href: api/Raftel.Domain.Abstractions.Result.yml
  commentId: M:Raftel.Domain.Abstractions.Result.Failure(Raftel.Domain.Abstractions.Error)
  fullName: Raftel.Domain.Abstractions.Result.Failure(Raftel.Domain.Abstractions.Error)
  nameWithType: Result.Failure(Error)
- uid: Raftel.Domain.Abstractions.Result.Failure*
  name: Failure
  href: api/Raftel.Domain.Abstractions.Result.yml
  commentId: Overload:Raftel.Domain.Abstractions.Result.Failure
  isSpec: "True"
  fullName: Raftel.Domain.Abstractions.Result.Failure
  nameWithType: Result.Failure
- uid: Raftel.Domain.Abstractions.Result.Failure``1(Raftel.Domain.Abstractions.Error)
  name: Failure<TValue>(Error)
  href: api/Raftel.Domain.Abstractions.Result.yml
  commentId: M:Raftel.Domain.Abstractions.Result.Failure``1(Raftel.Domain.Abstractions.Error)
  name.vb: Failure(Of TValue)(Error)
  fullName: Raftel.Domain.Abstractions.Result.Failure<TValue>(Raftel.Domain.Abstractions.Error)
  fullName.vb: Raftel.Domain.Abstractions.Result.Failure(Of TValue)(Raftel.Domain.Abstractions.Error)
  nameWithType: Result.Failure<TValue>(Error)
  nameWithType.vb: Result.Failure(Of TValue)(Error)
- uid: Raftel.Domain.Abstractions.Result.IsFailure
  name: IsFailure
  href: api/Raftel.Domain.Abstractions.Result.yml
  commentId: P:Raftel.Domain.Abstractions.Result.IsFailure
  fullName: Raftel.Domain.Abstractions.Result.IsFailure
  nameWithType: Result.IsFailure
- uid: Raftel.Domain.Abstractions.Result.IsFailure*
  name: IsFailure
  href: api/Raftel.Domain.Abstractions.Result.yml
  commentId: Overload:Raftel.Domain.Abstractions.Result.IsFailure
  isSpec: "True"
  fullName: Raftel.Domain.Abstractions.Result.IsFailure
  nameWithType: Result.IsFailure
- uid: Raftel.Domain.Abstractions.Result.IsSuccess
  name: IsSuccess
  href: api/Raftel.Domain.Abstractions.Result.yml
  commentId: P:Raftel.Domain.Abstractions.Result.IsSuccess
  fullName: Raftel.Domain.Abstractions.Result.IsSuccess
  nameWithType: Result.IsSuccess
- uid: Raftel.Domain.Abstractions.Result.IsSuccess*
  name: IsSuccess
  href: api/Raftel.Domain.Abstractions.Result.yml
  commentId: Overload:Raftel.Domain.Abstractions.Result.IsSuccess
  isSpec: "True"
  fullName: Raftel.Domain.Abstractions.Result.IsSuccess
  nameWithType: Result.IsSuccess
- uid: Raftel.Domain.Abstractions.Result.Success
  name: Success()
  href: api/Raftel.Domain.Abstractions.Result.yml
  commentId: M:Raftel.Domain.Abstractions.Result.Success
  fullName: Raftel.Domain.Abstractions.Result.Success()
  nameWithType: Result.Success()
- uid: Raftel.Domain.Abstractions.Result.Success*
  name: Success
  href: api/Raftel.Domain.Abstractions.Result.yml
  commentId: Overload:Raftel.Domain.Abstractions.Result.Success
  isSpec: "True"
  fullName: Raftel.Domain.Abstractions.Result.Success
  nameWithType: Result.Success
- uid: Raftel.Domain.Abstractions.Result.Success``1(``0)
  name: Success<TValue>(TValue)
  href: api/Raftel.Domain.Abstractions.Result.yml
  commentId: M:Raftel.Domain.Abstractions.Result.Success``1(``0)
  name.vb: Success(Of TValue)(TValue)
  fullName: Raftel.Domain.Abstractions.Result.Success<TValue>(TValue)
  fullName.vb: Raftel.Domain.Abstractions.Result.Success(Of TValue)(TValue)
  nameWithType: Result.Success<TValue>(TValue)
  nameWithType.vb: Result.Success(Of TValue)(TValue)
- uid: Raftel.Domain.Abstractions.Result`1
  name: Result<TValue>
  href: api/Raftel.Domain.Abstractions.Result-1.yml
  commentId: T:Raftel.Domain.Abstractions.Result`1
  name.vb: Result(Of TValue)
  fullName: Raftel.Domain.Abstractions.Result<TValue>
  fullName.vb: Raftel.Domain.Abstractions.Result(Of TValue)
  nameWithType: Result<TValue>
  nameWithType.vb: Result(Of TValue)
- uid: Raftel.Domain.Abstractions.Result`1.#ctor(`0,System.Boolean,Raftel.Domain.Abstractions.Error)
  name: Result(TValue, bool, Error)
  href: api/Raftel.Domain.Abstractions.Result-1.yml
  commentId: M:Raftel.Domain.Abstractions.Result`1.#ctor(`0,System.Boolean,Raftel.Domain.Abstractions.Error)
  name.vb: New(TValue, Boolean, Error)
  fullName: Raftel.Domain.Abstractions.Result<TValue>.Result(TValue, bool, Raftel.Domain.Abstractions.Error)
  fullName.vb: Raftel.Domain.Abstractions.Result(Of TValue).New(TValue, Boolean, Raftel.Domain.Abstractions.Error)
  nameWithType: Result<TValue>.Result(TValue, bool, Error)
  nameWithType.vb: Result(Of TValue).New(TValue, Boolean, Error)
- uid: Raftel.Domain.Abstractions.Result`1.#ctor*
  name: Result
  href: api/Raftel.Domain.Abstractions.Result-1.yml
  commentId: Overload:Raftel.Domain.Abstractions.Result`1.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Raftel.Domain.Abstractions.Result<TValue>.Result
  fullName.vb: Raftel.Domain.Abstractions.Result(Of TValue).New
  nameWithType: Result<TValue>.Result
  nameWithType.vb: Result(Of TValue).New
- uid: Raftel.Domain.Abstractions.Result`1.Failure(Raftel.Domain.Abstractions.Error)
  name: Failure(Error)
  href: api/Raftel.Domain.Abstractions.Result-1.yml
  commentId: M:Raftel.Domain.Abstractions.Result`1.Failure(Raftel.Domain.Abstractions.Error)
  fullName: Raftel.Domain.Abstractions.Result<TValue>.Failure(Raftel.Domain.Abstractions.Error)
  fullName.vb: Raftel.Domain.Abstractions.Result(Of TValue).Failure(Raftel.Domain.Abstractions.Error)
  nameWithType: Result<TValue>.Failure(Error)
  nameWithType.vb: Result(Of TValue).Failure(Error)
- uid: Raftel.Domain.Abstractions.Result`1.Failure*
  name: Failure
  href: api/Raftel.Domain.Abstractions.Result-1.yml
  commentId: Overload:Raftel.Domain.Abstractions.Result`1.Failure
  isSpec: "True"
  fullName: Raftel.Domain.Abstractions.Result<TValue>.Failure
  fullName.vb: Raftel.Domain.Abstractions.Result(Of TValue).Failure
  nameWithType: Result<TValue>.Failure
  nameWithType.vb: Result(Of TValue).Failure
- uid: Raftel.Domain.Abstractions.Result`1.Success(`0)
  name: Success(TValue)
  href: api/Raftel.Domain.Abstractions.Result-1.yml
  commentId: M:Raftel.Domain.Abstractions.Result`1.Success(`0)
  fullName: Raftel.Domain.Abstractions.Result<TValue>.Success(TValue)
  fullName.vb: Raftel.Domain.Abstractions.Result(Of TValue).Success(TValue)
  nameWithType: Result<TValue>.Success(TValue)
  nameWithType.vb: Result(Of TValue).Success(TValue)
- uid: Raftel.Domain.Abstractions.Result`1.Success*
  name: Success
  href: api/Raftel.Domain.Abstractions.Result-1.yml
  commentId: Overload:Raftel.Domain.Abstractions.Result`1.Success
  isSpec: "True"
  fullName: Raftel.Domain.Abstractions.Result<TValue>.Success
  fullName.vb: Raftel.Domain.Abstractions.Result(Of TValue).Success
  nameWithType: Result<TValue>.Success
  nameWithType.vb: Result(Of TValue).Success
- uid: Raftel.Domain.Abstractions.Result`1.Value
  name: Value
  href: api/Raftel.Domain.Abstractions.Result-1.yml
  commentId: P:Raftel.Domain.Abstractions.Result`1.Value
  fullName: Raftel.Domain.Abstractions.Result<TValue>.Value
  fullName.vb: Raftel.Domain.Abstractions.Result(Of TValue).Value
  nameWithType: Result<TValue>.Value
  nameWithType.vb: Result(Of TValue).Value
- uid: Raftel.Domain.Abstractions.Result`1.Value*
  name: Value
  href: api/Raftel.Domain.Abstractions.Result-1.yml
  commentId: Overload:Raftel.Domain.Abstractions.Result`1.Value
  isSpec: "True"
  fullName: Raftel.Domain.Abstractions.Result<TValue>.Value
  fullName.vb: Raftel.Domain.Abstractions.Result(Of TValue).Value
  nameWithType: Result<TValue>.Value
  nameWithType.vb: Result(Of TValue).Value
- uid: Raftel.Domain.Abstractions.Result`1.op_Implicit(`0)~Raftel.Domain.Abstractions.Result{`0}
  name: implicit operator Result<TValue>(TValue)
  href: api/Raftel.Domain.Abstractions.Result-1.yml
  commentId: M:Raftel.Domain.Abstractions.Result`1.op_Implicit(`0)~Raftel.Domain.Abstractions.Result{`0}
  name.vb: CType(TValue)
  fullName: Raftel.Domain.Abstractions.Result<TValue>.implicit operator Raftel.Domain.Abstractions.Result<TValue>(TValue)
  fullName.vb: Raftel.Domain.Abstractions.Result(Of TValue).CType(TValue)
  nameWithType: Result<TValue>.implicit operator Result<TValue>(TValue)
  nameWithType.vb: Result(Of TValue).CType(TValue)
- uid: Raftel.Domain.Abstractions.Result`1.op_Implicit*
  name: implicit operator
  href: api/Raftel.Domain.Abstractions.Result-1.yml
  commentId: Overload:Raftel.Domain.Abstractions.Result`1.op_Implicit
  isSpec: "True"
  name.vb: CType
  fullName: Raftel.Domain.Abstractions.Result<TValue>.implicit operator
  fullName.vb: Raftel.Domain.Abstractions.Result(Of TValue).CType
  nameWithType: Result<TValue>.implicit operator
  nameWithType.vb: Result(Of TValue).CType
- uid: Raftel.Domain.BaseTypes
  name: Raftel.Domain.BaseTypes
  href: api/Raftel.Domain.BaseTypes.yml
  commentId: N:Raftel.Domain.BaseTypes
  fullName: Raftel.Domain.BaseTypes
  nameWithType: Raftel.Domain.BaseTypes
- uid: Raftel.Domain.BaseTypes.AggregateRoot`1
  name: AggregateRoot<TId>
  href: api/Raftel.Domain.BaseTypes.AggregateRoot-1.yml
  commentId: T:Raftel.Domain.BaseTypes.AggregateRoot`1
  name.vb: AggregateRoot(Of TId)
  fullName: Raftel.Domain.BaseTypes.AggregateRoot<TId>
  fullName.vb: Raftel.Domain.BaseTypes.AggregateRoot(Of TId)
  nameWithType: AggregateRoot<TId>
  nameWithType.vb: AggregateRoot(Of TId)
- uid: Raftel.Domain.BaseTypes.AggregateRoot`1.#ctor(`0)
  name: AggregateRoot(TId)
  href: api/Raftel.Domain.BaseTypes.AggregateRoot-1.yml
  commentId: M:Raftel.Domain.BaseTypes.AggregateRoot`1.#ctor(`0)
  name.vb: New(TId)
  fullName: Raftel.Domain.BaseTypes.AggregateRoot<TId>.AggregateRoot(TId)
  fullName.vb: Raftel.Domain.BaseTypes.AggregateRoot(Of TId).New(TId)
  nameWithType: AggregateRoot<TId>.AggregateRoot(TId)
  nameWithType.vb: AggregateRoot(Of TId).New(TId)
- uid: Raftel.Domain.BaseTypes.AggregateRoot`1.#ctor*
  name: AggregateRoot
  href: api/Raftel.Domain.BaseTypes.AggregateRoot-1.yml
  commentId: Overload:Raftel.Domain.BaseTypes.AggregateRoot`1.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Raftel.Domain.BaseTypes.AggregateRoot<TId>.AggregateRoot
  fullName.vb: Raftel.Domain.BaseTypes.AggregateRoot(Of TId).New
  nameWithType: AggregateRoot<TId>.AggregateRoot
  nameWithType.vb: AggregateRoot(Of TId).New
- uid: Raftel.Domain.BaseTypes.Entity`1
  name: Entity<TId>
  href: api/Raftel.Domain.BaseTypes.Entity-1.yml
  commentId: T:Raftel.Domain.BaseTypes.Entity`1
  name.vb: Entity(Of TId)
  fullName: Raftel.Domain.BaseTypes.Entity<TId>
  fullName.vb: Raftel.Domain.BaseTypes.Entity(Of TId)
  nameWithType: Entity<TId>
  nameWithType.vb: Entity(Of TId)
- uid: Raftel.Domain.BaseTypes.Entity`1.#ctor(`0)
  name: Entity(TId)
  href: api/Raftel.Domain.BaseTypes.Entity-1.yml
  commentId: M:Raftel.Domain.BaseTypes.Entity`1.#ctor(`0)
  name.vb: New(TId)
  fullName: Raftel.Domain.BaseTypes.Entity<TId>.Entity(TId)
  fullName.vb: Raftel.Domain.BaseTypes.Entity(Of TId).New(TId)
  nameWithType: Entity<TId>.Entity(TId)
  nameWithType.vb: Entity(Of TId).New(TId)
- uid: Raftel.Domain.BaseTypes.Entity`1.#ctor*
  name: Entity
  href: api/Raftel.Domain.BaseTypes.Entity-1.yml
  commentId: Overload:Raftel.Domain.BaseTypes.Entity`1.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Raftel.Domain.BaseTypes.Entity<TId>.Entity
  fullName.vb: Raftel.Domain.BaseTypes.Entity(Of TId).New
  nameWithType: Entity<TId>.Entity
  nameWithType.vb: Entity(Of TId).New
- uid: Raftel.Domain.BaseTypes.Entity`1.Equals(System.Object)
  name: Equals(object?)
  href: api/Raftel.Domain.BaseTypes.Entity-1.yml
  commentId: M:Raftel.Domain.BaseTypes.Entity`1.Equals(System.Object)
  name.vb: Equals(Object)
  fullName: Raftel.Domain.BaseTypes.Entity<TId>.Equals(object?)
  fullName.vb: Raftel.Domain.BaseTypes.Entity(Of TId).Equals(Object)
  nameWithType: Entity<TId>.Equals(object?)
  nameWithType.vb: Entity(Of TId).Equals(Object)
- uid: Raftel.Domain.BaseTypes.Entity`1.Equals*
  name: Equals
  href: api/Raftel.Domain.BaseTypes.Entity-1.yml
  commentId: Overload:Raftel.Domain.BaseTypes.Entity`1.Equals
  isSpec: "True"
  fullName: Raftel.Domain.BaseTypes.Entity<TId>.Equals
  fullName.vb: Raftel.Domain.BaseTypes.Entity(Of TId).Equals
  nameWithType: Entity<TId>.Equals
  nameWithType.vb: Entity(Of TId).Equals
- uid: Raftel.Domain.BaseTypes.Entity`1.GetHashCode
  name: GetHashCode()
  href: api/Raftel.Domain.BaseTypes.Entity-1.yml
  commentId: M:Raftel.Domain.BaseTypes.Entity`1.GetHashCode
  fullName: Raftel.Domain.BaseTypes.Entity<TId>.GetHashCode()
  fullName.vb: Raftel.Domain.BaseTypes.Entity(Of TId).GetHashCode()
  nameWithType: Entity<TId>.GetHashCode()
  nameWithType.vb: Entity(Of TId).GetHashCode()
- uid: Raftel.Domain.BaseTypes.Entity`1.GetHashCode*
  name: GetHashCode
  href: api/Raftel.Domain.BaseTypes.Entity-1.yml
  commentId: Overload:Raftel.Domain.BaseTypes.Entity`1.GetHashCode
  isSpec: "True"
  fullName: Raftel.Domain.BaseTypes.Entity<TId>.GetHashCode
  fullName.vb: Raftel.Domain.BaseTypes.Entity(Of TId).GetHashCode
  nameWithType: Entity<TId>.GetHashCode
  nameWithType.vb: Entity(Of TId).GetHashCode
- uid: Raftel.Domain.BaseTypes.Entity`1.Id
  name: Id
  href: api/Raftel.Domain.BaseTypes.Entity-1.yml
  commentId: P:Raftel.Domain.BaseTypes.Entity`1.Id
  fullName: Raftel.Domain.BaseTypes.Entity<TId>.Id
  fullName.vb: Raftel.Domain.BaseTypes.Entity(Of TId).Id
  nameWithType: Entity<TId>.Id
  nameWithType.vb: Entity(Of TId).Id
- uid: Raftel.Domain.BaseTypes.Entity`1.Id*
  name: Id
  href: api/Raftel.Domain.BaseTypes.Entity-1.yml
  commentId: Overload:Raftel.Domain.BaseTypes.Entity`1.Id
  isSpec: "True"
  fullName: Raftel.Domain.BaseTypes.Entity<TId>.Id
  fullName.vb: Raftel.Domain.BaseTypes.Entity(Of TId).Id
  nameWithType: Entity<TId>.Id
  nameWithType.vb: Entity(Of TId).Id
- uid: Raftel.Domain.BaseTypes.TypedGuidId
  name: TypedGuidId
  href: api/Raftel.Domain.BaseTypes.TypedGuidId.yml
  commentId: T:Raftel.Domain.BaseTypes.TypedGuidId
  fullName: Raftel.Domain.BaseTypes.TypedGuidId
  nameWithType: TypedGuidId
- uid: Raftel.Domain.BaseTypes.TypedGuidId.#ctor(System.Guid)
  name: TypedGuidId(Guid)
  href: api/Raftel.Domain.BaseTypes.TypedGuidId.yml
  commentId: M:Raftel.Domain.BaseTypes.TypedGuidId.#ctor(System.Guid)
  name.vb: New(Guid)
  fullName: Raftel.Domain.BaseTypes.TypedGuidId.TypedGuidId(System.Guid)
  fullName.vb: Raftel.Domain.BaseTypes.TypedGuidId.New(System.Guid)
  nameWithType: TypedGuidId.TypedGuidId(Guid)
  nameWithType.vb: TypedGuidId.New(Guid)
- uid: Raftel.Domain.BaseTypes.TypedGuidId.#ctor*
  name: TypedGuidId
  href: api/Raftel.Domain.BaseTypes.TypedGuidId.yml
  commentId: Overload:Raftel.Domain.BaseTypes.TypedGuidId.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Raftel.Domain.BaseTypes.TypedGuidId.TypedGuidId
  fullName.vb: Raftel.Domain.BaseTypes.TypedGuidId.New
  nameWithType: TypedGuidId.TypedGuidId
  nameWithType.vb: TypedGuidId.New
- uid: Raftel.Domain.BaseTypes.TypedGuidId.NewGuid
  name: NewGuid()
  href: api/Raftel.Domain.BaseTypes.TypedGuidId.yml
  commentId: M:Raftel.Domain.BaseTypes.TypedGuidId.NewGuid
  fullName: Raftel.Domain.BaseTypes.TypedGuidId.NewGuid()
  nameWithType: TypedGuidId.NewGuid()
- uid: Raftel.Domain.BaseTypes.TypedGuidId.NewGuid*
  name: NewGuid
  href: api/Raftel.Domain.BaseTypes.TypedGuidId.yml
  commentId: Overload:Raftel.Domain.BaseTypes.TypedGuidId.NewGuid
  isSpec: "True"
  fullName: Raftel.Domain.BaseTypes.TypedGuidId.NewGuid
  nameWithType: TypedGuidId.NewGuid
- uid: Raftel.Domain.BaseTypes.TypedId`1
  name: TypedId<T>
  href: api/Raftel.Domain.BaseTypes.TypedId-1.yml
  commentId: T:Raftel.Domain.BaseTypes.TypedId`1
  name.vb: TypedId(Of T)
  fullName: Raftel.Domain.BaseTypes.TypedId<T>
  fullName.vb: Raftel.Domain.BaseTypes.TypedId(Of T)
  nameWithType: TypedId<T>
  nameWithType.vb: TypedId(Of T)
- uid: Raftel.Domain.BaseTypes.TypedId`1.#ctor(`0)
  name: TypedId(T)
  href: api/Raftel.Domain.BaseTypes.TypedId-1.yml
  commentId: M:Raftel.Domain.BaseTypes.TypedId`1.#ctor(`0)
  name.vb: New(T)
  fullName: Raftel.Domain.BaseTypes.TypedId<T>.TypedId(T)
  fullName.vb: Raftel.Domain.BaseTypes.TypedId(Of T).New(T)
  nameWithType: TypedId<T>.TypedId(T)
  nameWithType.vb: TypedId(Of T).New(T)
- uid: Raftel.Domain.BaseTypes.TypedId`1.#ctor*
  name: TypedId
  href: api/Raftel.Domain.BaseTypes.TypedId-1.yml
  commentId: Overload:Raftel.Domain.BaseTypes.TypedId`1.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Raftel.Domain.BaseTypes.TypedId<T>.TypedId
  fullName.vb: Raftel.Domain.BaseTypes.TypedId(Of T).New
  nameWithType: TypedId<T>.TypedId
  nameWithType.vb: TypedId(Of T).New
- uid: Raftel.Domain.BaseTypes.TypedId`1.Equals(Raftel.Domain.BaseTypes.TypedId{`0})
  name: Equals(TypedId<T>?)
  href: api/Raftel.Domain.BaseTypes.TypedId-1.yml
  commentId: M:Raftel.Domain.BaseTypes.TypedId`1.Equals(Raftel.Domain.BaseTypes.TypedId{`0})
  name.vb: Equals(TypedId(Of T))
  fullName: Raftel.Domain.BaseTypes.TypedId<T>.Equals(Raftel.Domain.BaseTypes.TypedId<T>?)
  fullName.vb: Raftel.Domain.BaseTypes.TypedId(Of T).Equals(Raftel.Domain.BaseTypes.TypedId(Of T))
  nameWithType: TypedId<T>.Equals(TypedId<T>?)
  nameWithType.vb: TypedId(Of T).Equals(TypedId(Of T))
- uid: Raftel.Domain.BaseTypes.TypedId`1.Equals*
  name: Equals
  href: api/Raftel.Domain.BaseTypes.TypedId-1.yml
  commentId: Overload:Raftel.Domain.BaseTypes.TypedId`1.Equals
  isSpec: "True"
  fullName: Raftel.Domain.BaseTypes.TypedId<T>.Equals
  fullName.vb: Raftel.Domain.BaseTypes.TypedId(Of T).Equals
  nameWithType: TypedId<T>.Equals
  nameWithType.vb: TypedId(Of T).Equals
- uid: Raftel.Domain.BaseTypes.TypedId`1.GetHashCode
  name: GetHashCode()
  href: api/Raftel.Domain.BaseTypes.TypedId-1.yml
  commentId: M:Raftel.Domain.BaseTypes.TypedId`1.GetHashCode
  fullName: Raftel.Domain.BaseTypes.TypedId<T>.GetHashCode()
  fullName.vb: Raftel.Domain.BaseTypes.TypedId(Of T).GetHashCode()
  nameWithType: TypedId<T>.GetHashCode()
  nameWithType.vb: TypedId(Of T).GetHashCode()
- uid: Raftel.Domain.BaseTypes.TypedId`1.GetHashCode*
  name: GetHashCode
  href: api/Raftel.Domain.BaseTypes.TypedId-1.yml
  commentId: Overload:Raftel.Domain.BaseTypes.TypedId`1.GetHashCode
  isSpec: "True"
  fullName: Raftel.Domain.BaseTypes.TypedId<T>.GetHashCode
  fullName.vb: Raftel.Domain.BaseTypes.TypedId(Of T).GetHashCode
  nameWithType: TypedId<T>.GetHashCode
  nameWithType.vb: TypedId(Of T).GetHashCode
- uid: Raftel.Domain.BaseTypes.TypedId`1.ToString
  name: ToString()
  href: api/Raftel.Domain.BaseTypes.TypedId-1.yml
  commentId: M:Raftel.Domain.BaseTypes.TypedId`1.ToString
  fullName: Raftel.Domain.BaseTypes.TypedId<T>.ToString()
  fullName.vb: Raftel.Domain.BaseTypes.TypedId(Of T).ToString()
  nameWithType: TypedId<T>.ToString()
  nameWithType.vb: TypedId(Of T).ToString()
- uid: Raftel.Domain.BaseTypes.TypedId`1.ToString*
  name: ToString
  href: api/Raftel.Domain.BaseTypes.TypedId-1.yml
  commentId: Overload:Raftel.Domain.BaseTypes.TypedId`1.ToString
  isSpec: "True"
  fullName: Raftel.Domain.BaseTypes.TypedId<T>.ToString
  fullName.vb: Raftel.Domain.BaseTypes.TypedId(Of T).ToString
  nameWithType: TypedId<T>.ToString
  nameWithType.vb: TypedId(Of T).ToString
- uid: Raftel.Domain.BaseTypes.TypedId`1.op_Implicit(Raftel.Domain.BaseTypes.TypedId{`0})~`0
  name: implicit operator T(TypedId<T>)
  href: api/Raftel.Domain.BaseTypes.TypedId-1.yml
  commentId: M:Raftel.Domain.BaseTypes.TypedId`1.op_Implicit(Raftel.Domain.BaseTypes.TypedId{`0})~`0
  name.vb: CType(TypedId(Of T))
  fullName: Raftel.Domain.BaseTypes.TypedId<T>.implicit operator T(Raftel.Domain.BaseTypes.TypedId<T>)
  fullName.vb: Raftel.Domain.BaseTypes.TypedId(Of T).CType(Raftel.Domain.BaseTypes.TypedId(Of T))
  nameWithType: TypedId<T>.implicit operator T(TypedId<T>)
  nameWithType.vb: TypedId(Of T).CType(TypedId(Of T))
- uid: Raftel.Domain.BaseTypes.TypedId`1.op_Implicit*
  name: implicit operator
  href: api/Raftel.Domain.BaseTypes.TypedId-1.yml
  commentId: Overload:Raftel.Domain.BaseTypes.TypedId`1.op_Implicit
  isSpec: "True"
  name.vb: CType
  fullName: Raftel.Domain.BaseTypes.TypedId<T>.implicit operator
  fullName.vb: Raftel.Domain.BaseTypes.TypedId(Of T).CType
  nameWithType: TypedId<T>.implicit operator
  nameWithType.vb: TypedId(Of T).CType
- uid: Raftel.Domain.Specifications
  name: Raftel.Domain.Specifications
  href: api/Raftel.Domain.Specifications.yml
  commentId: N:Raftel.Domain.Specifications
  fullName: Raftel.Domain.Specifications
  nameWithType: Raftel.Domain.Specifications
- uid: Raftel.Domain.Specifications.AndSpecification`1
  name: AndSpecification<TModel>
  href: api/Raftel.Domain.Specifications.AndSpecification-1.yml
  commentId: T:Raftel.Domain.Specifications.AndSpecification`1
  name.vb: AndSpecification(Of TModel)
  fullName: Raftel.Domain.Specifications.AndSpecification<TModel>
  fullName.vb: Raftel.Domain.Specifications.AndSpecification(Of TModel)
  nameWithType: AndSpecification<TModel>
  nameWithType.vb: AndSpecification(Of TModel)
- uid: Raftel.Domain.Specifications.AndSpecification`1.#ctor(Raftel.Domain.Specifications.Specification{`0},Raftel.Domain.Specifications.Specification{`0})
  name: AndSpecification(Specification<TModel>, Specification<TModel>)
  href: api/Raftel.Domain.Specifications.AndSpecification-1.yml
  commentId: M:Raftel.Domain.Specifications.AndSpecification`1.#ctor(Raftel.Domain.Specifications.Specification{`0},Raftel.Domain.Specifications.Specification{`0})
  name.vb: New(Specification(Of TModel), Specification(Of TModel))
  fullName: Raftel.Domain.Specifications.AndSpecification<TModel>.AndSpecification(Raftel.Domain.Specifications.Specification<TModel>, Raftel.Domain.Specifications.Specification<TModel>)
  fullName.vb: Raftel.Domain.Specifications.AndSpecification(Of TModel).New(Raftel.Domain.Specifications.Specification(Of TModel), Raftel.Domain.Specifications.Specification(Of TModel))
  nameWithType: AndSpecification<TModel>.AndSpecification(Specification<TModel>, Specification<TModel>)
  nameWithType.vb: AndSpecification(Of TModel).New(Specification(Of TModel), Specification(Of TModel))
- uid: Raftel.Domain.Specifications.AndSpecification`1.#ctor*
  name: AndSpecification
  href: api/Raftel.Domain.Specifications.AndSpecification-1.yml
  commentId: Overload:Raftel.Domain.Specifications.AndSpecification`1.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Raftel.Domain.Specifications.AndSpecification<TModel>.AndSpecification
  fullName.vb: Raftel.Domain.Specifications.AndSpecification(Of TModel).New
  nameWithType: AndSpecification<TModel>.AndSpecification
  nameWithType.vb: AndSpecification(Of TModel).New
- uid: Raftel.Domain.Specifications.AndSpecification`1.ToExpression
  name: ToExpression()
  href: api/Raftel.Domain.Specifications.AndSpecification-1.yml
  commentId: M:Raftel.Domain.Specifications.AndSpecification`1.ToExpression
  fullName: Raftel.Domain.Specifications.AndSpecification<TModel>.ToExpression()
  fullName.vb: Raftel.Domain.Specifications.AndSpecification(Of TModel).ToExpression()
  nameWithType: AndSpecification<TModel>.ToExpression()
  nameWithType.vb: AndSpecification(Of TModel).ToExpression()
- uid: Raftel.Domain.Specifications.AndSpecification`1.ToExpression*
  name: ToExpression
  href: api/Raftel.Domain.Specifications.AndSpecification-1.yml
  commentId: Overload:Raftel.Domain.Specifications.AndSpecification`1.ToExpression
  isSpec: "True"
  fullName: Raftel.Domain.Specifications.AndSpecification<TModel>.ToExpression
  fullName.vb: Raftel.Domain.Specifications.AndSpecification(Of TModel).ToExpression
  nameWithType: AndSpecification<TModel>.ToExpression
  nameWithType.vb: AndSpecification(Of TModel).ToExpression
- uid: Raftel.Domain.Specifications.OrSpecification`1
  name: OrSpecification<TModel>
  href: api/Raftel.Domain.Specifications.OrSpecification-1.yml
  commentId: T:Raftel.Domain.Specifications.OrSpecification`1
  name.vb: OrSpecification(Of TModel)
  fullName: Raftel.Domain.Specifications.OrSpecification<TModel>
  fullName.vb: Raftel.Domain.Specifications.OrSpecification(Of TModel)
  nameWithType: OrSpecification<TModel>
  nameWithType.vb: OrSpecification(Of TModel)
- uid: Raftel.Domain.Specifications.OrSpecification`1.#ctor(Raftel.Domain.Specifications.Specification{`0},Raftel.Domain.Specifications.Specification{`0})
  name: OrSpecification(Specification<TModel>, Specification<TModel>)
  href: api/Raftel.Domain.Specifications.OrSpecification-1.yml
  commentId: M:Raftel.Domain.Specifications.OrSpecification`1.#ctor(Raftel.Domain.Specifications.Specification{`0},Raftel.Domain.Specifications.Specification{`0})
  name.vb: New(Specification(Of TModel), Specification(Of TModel))
  fullName: Raftel.Domain.Specifications.OrSpecification<TModel>.OrSpecification(Raftel.Domain.Specifications.Specification<TModel>, Raftel.Domain.Specifications.Specification<TModel>)
  fullName.vb: Raftel.Domain.Specifications.OrSpecification(Of TModel).New(Raftel.Domain.Specifications.Specification(Of TModel), Raftel.Domain.Specifications.Specification(Of TModel))
  nameWithType: OrSpecification<TModel>.OrSpecification(Specification<TModel>, Specification<TModel>)
  nameWithType.vb: OrSpecification(Of TModel).New(Specification(Of TModel), Specification(Of TModel))
- uid: Raftel.Domain.Specifications.OrSpecification`1.#ctor*
  name: OrSpecification
  href: api/Raftel.Domain.Specifications.OrSpecification-1.yml
  commentId: Overload:Raftel.Domain.Specifications.OrSpecification`1.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Raftel.Domain.Specifications.OrSpecification<TModel>.OrSpecification
  fullName.vb: Raftel.Domain.Specifications.OrSpecification(Of TModel).New
  nameWithType: OrSpecification<TModel>.OrSpecification
  nameWithType.vb: OrSpecification(Of TModel).New
- uid: Raftel.Domain.Specifications.OrSpecification`1.ToExpression
  name: ToExpression()
  href: api/Raftel.Domain.Specifications.OrSpecification-1.yml
  commentId: M:Raftel.Domain.Specifications.OrSpecification`1.ToExpression
  fullName: Raftel.Domain.Specifications.OrSpecification<TModel>.ToExpression()
  fullName.vb: Raftel.Domain.Specifications.OrSpecification(Of TModel).ToExpression()
  nameWithType: OrSpecification<TModel>.ToExpression()
  nameWithType.vb: OrSpecification(Of TModel).ToExpression()
- uid: Raftel.Domain.Specifications.OrSpecification`1.ToExpression*
  name: ToExpression
  href: api/Raftel.Domain.Specifications.OrSpecification-1.yml
  commentId: Overload:Raftel.Domain.Specifications.OrSpecification`1.ToExpression
  isSpec: "True"
  fullName: Raftel.Domain.Specifications.OrSpecification<TModel>.ToExpression
  fullName.vb: Raftel.Domain.Specifications.OrSpecification(Of TModel).ToExpression
  nameWithType: OrSpecification<TModel>.ToExpression
  nameWithType.vb: OrSpecification(Of TModel).ToExpression
- uid: Raftel.Domain.Specifications.Specification`1
  name: Specification<TModel>
  href: api/Raftel.Domain.Specifications.Specification-1.yml
  commentId: T:Raftel.Domain.Specifications.Specification`1
  name.vb: Specification(Of TModel)
  fullName: Raftel.Domain.Specifications.Specification<TModel>
  fullName.vb: Raftel.Domain.Specifications.Specification(Of TModel)
  nameWithType: Specification<TModel>
  nameWithType.vb: Specification(Of TModel)
- uid: Raftel.Domain.Specifications.Specification`1.And(Raftel.Domain.Specifications.Specification{`0})
  name: And(Specification<TModel>)
  href: api/Raftel.Domain.Specifications.Specification-1.yml
  commentId: M:Raftel.Domain.Specifications.Specification`1.And(Raftel.Domain.Specifications.Specification{`0})
  name.vb: And(Specification(Of TModel))
  fullName: Raftel.Domain.Specifications.Specification<TModel>.And(Raftel.Domain.Specifications.Specification<TModel>)
  fullName.vb: Raftel.Domain.Specifications.Specification(Of TModel).And(Raftel.Domain.Specifications.Specification(Of TModel))
  nameWithType: Specification<TModel>.And(Specification<TModel>)
  nameWithType.vb: Specification(Of TModel).And(Specification(Of TModel))
- uid: Raftel.Domain.Specifications.Specification`1.And*
  name: And
  href: api/Raftel.Domain.Specifications.Specification-1.yml
  commentId: Overload:Raftel.Domain.Specifications.Specification`1.And
  isSpec: "True"
  fullName: Raftel.Domain.Specifications.Specification<TModel>.And
  fullName.vb: Raftel.Domain.Specifications.Specification(Of TModel).And
  nameWithType: Specification<TModel>.And
  nameWithType.vb: Specification(Of TModel).And
- uid: Raftel.Domain.Specifications.Specification`1.IsSatisfiedBy(`0)
  name: IsSatisfiedBy(TModel)
  href: api/Raftel.Domain.Specifications.Specification-1.yml
  commentId: M:Raftel.Domain.Specifications.Specification`1.IsSatisfiedBy(`0)
  fullName: Raftel.Domain.Specifications.Specification<TModel>.IsSatisfiedBy(TModel)
  fullName.vb: Raftel.Domain.Specifications.Specification(Of TModel).IsSatisfiedBy(TModel)
  nameWithType: Specification<TModel>.IsSatisfiedBy(TModel)
  nameWithType.vb: Specification(Of TModel).IsSatisfiedBy(TModel)
- uid: Raftel.Domain.Specifications.Specification`1.IsSatisfiedBy*
  name: IsSatisfiedBy
  href: api/Raftel.Domain.Specifications.Specification-1.yml
  commentId: Overload:Raftel.Domain.Specifications.Specification`1.IsSatisfiedBy
  isSpec: "True"
  fullName: Raftel.Domain.Specifications.Specification<TModel>.IsSatisfiedBy
  fullName.vb: Raftel.Domain.Specifications.Specification(Of TModel).IsSatisfiedBy
  nameWithType: Specification<TModel>.IsSatisfiedBy
  nameWithType.vb: Specification(Of TModel).IsSatisfiedBy
- uid: Raftel.Domain.Specifications.Specification`1.Or(Raftel.Domain.Specifications.Specification{`0})
  name: Or(Specification<TModel>)
  href: api/Raftel.Domain.Specifications.Specification-1.yml
  commentId: M:Raftel.Domain.Specifications.Specification`1.Or(Raftel.Domain.Specifications.Specification{`0})
  name.vb: Or(Specification(Of TModel))
  fullName: Raftel.Domain.Specifications.Specification<TModel>.Or(Raftel.Domain.Specifications.Specification<TModel>)
  fullName.vb: Raftel.Domain.Specifications.Specification(Of TModel).Or(Raftel.Domain.Specifications.Specification(Of TModel))
  nameWithType: Specification<TModel>.Or(Specification<TModel>)
  nameWithType.vb: Specification(Of TModel).Or(Specification(Of TModel))
- uid: Raftel.Domain.Specifications.Specification`1.Or*
  name: Or
  href: api/Raftel.Domain.Specifications.Specification-1.yml
  commentId: Overload:Raftel.Domain.Specifications.Specification`1.Or
  isSpec: "True"
  fullName: Raftel.Domain.Specifications.Specification<TModel>.Or
  fullName.vb: Raftel.Domain.Specifications.Specification(Of TModel).Or
  nameWithType: Specification<TModel>.Or
  nameWithType.vb: Specification(Of TModel).Or
- uid: Raftel.Domain.Specifications.Specification`1.ToExpression
  name: ToExpression()
  href: api/Raftel.Domain.Specifications.Specification-1.yml
  commentId: M:Raftel.Domain.Specifications.Specification`1.ToExpression
  fullName: Raftel.Domain.Specifications.Specification<TModel>.ToExpression()
  fullName.vb: Raftel.Domain.Specifications.Specification(Of TModel).ToExpression()
  nameWithType: Specification<TModel>.ToExpression()
  nameWithType.vb: Specification(Of TModel).ToExpression()
- uid: Raftel.Domain.Specifications.Specification`1.ToExpression*
  name: ToExpression
  href: api/Raftel.Domain.Specifications.Specification-1.yml
  commentId: Overload:Raftel.Domain.Specifications.Specification`1.ToExpression
  isSpec: "True"
  fullName: Raftel.Domain.Specifications.Specification<TModel>.ToExpression
  fullName.vb: Raftel.Domain.Specifications.Specification(Of TModel).ToExpression
  nameWithType: Specification<TModel>.ToExpression
  nameWithType.vb: Specification(Of TModel).ToExpression
- uid: Raftel.Domain.Validators
  name: Raftel.Domain.Validators
  href: api/Raftel.Domain.Validators.yml
  commentId: N:Raftel.Domain.Validators
  fullName: Raftel.Domain.Validators
  nameWithType: Raftel.Domain.Validators
- uid: Raftel.Domain.Validators.ValidationResult
  name: ValidationResult
  href: api/Raftel.Domain.Validators.ValidationResult.yml
  commentId: T:Raftel.Domain.Validators.ValidationResult
  fullName: Raftel.Domain.Validators.ValidationResult
  nameWithType: ValidationResult
- uid: Raftel.Domain.Validators.ValidationResult.Errors
  name: Errors
  href: api/Raftel.Domain.Validators.ValidationResult.yml
  commentId: P:Raftel.Domain.Validators.ValidationResult.Errors
  fullName: Raftel.Domain.Validators.ValidationResult.Errors
  nameWithType: ValidationResult.Errors
- uid: Raftel.Domain.Validators.ValidationResult.Errors*
  name: Errors
  href: api/Raftel.Domain.Validators.ValidationResult.yml
  commentId: Overload:Raftel.Domain.Validators.ValidationResult.Errors
  isSpec: "True"
  fullName: Raftel.Domain.Validators.ValidationResult.Errors
  nameWithType: ValidationResult.Errors
- uid: Raftel.Domain.Validators.ValidationResult.Failure(System.Collections.Generic.IEnumerable{Raftel.Domain.Abstractions.Error})
  name: Failure(IEnumerable<Error>)
  href: api/Raftel.Domain.Validators.ValidationResult.yml
  commentId: M:Raftel.Domain.Validators.ValidationResult.Failure(System.Collections.Generic.IEnumerable{Raftel.Domain.Abstractions.Error})
  name.vb: Failure(IEnumerable(Of Error))
  fullName: Raftel.Domain.Validators.ValidationResult.Failure(System.Collections.Generic.IEnumerable<Raftel.Domain.Abstractions.Error>)
  fullName.vb: Raftel.Domain.Validators.ValidationResult.Failure(System.Collections.Generic.IEnumerable(Of Raftel.Domain.Abstractions.Error))
  nameWithType: ValidationResult.Failure(IEnumerable<Error>)
  nameWithType.vb: ValidationResult.Failure(IEnumerable(Of Error))
- uid: Raftel.Domain.Validators.ValidationResult.Failure*
  name: Failure
  href: api/Raftel.Domain.Validators.ValidationResult.yml
  commentId: Overload:Raftel.Domain.Validators.ValidationResult.Failure
  isSpec: "True"
  fullName: Raftel.Domain.Validators.ValidationResult.Failure
  nameWithType: ValidationResult.Failure
- uid: Raftel.Domain.Validators.ValidationResult.IsValid
  name: IsValid
  href: api/Raftel.Domain.Validators.ValidationResult.yml
  commentId: P:Raftel.Domain.Validators.ValidationResult.IsValid
  fullName: Raftel.Domain.Validators.ValidationResult.IsValid
  nameWithType: ValidationResult.IsValid
- uid: Raftel.Domain.Validators.ValidationResult.IsValid*
  name: IsValid
  href: api/Raftel.Domain.Validators.ValidationResult.yml
  commentId: Overload:Raftel.Domain.Validators.ValidationResult.IsValid
  isSpec: "True"
  fullName: Raftel.Domain.Validators.ValidationResult.IsValid
  nameWithType: ValidationResult.IsValid
- uid: Raftel.Domain.Validators.ValidationResult.Success
  name: Success()
  href: api/Raftel.Domain.Validators.ValidationResult.yml
  commentId: M:Raftel.Domain.Validators.ValidationResult.Success
  fullName: Raftel.Domain.Validators.ValidationResult.Success()
  nameWithType: ValidationResult.Success()
- uid: Raftel.Domain.Validators.ValidationResult.Success*
  name: Success
  href: api/Raftel.Domain.Validators.ValidationResult.yml
  commentId: Overload:Raftel.Domain.Validators.ValidationResult.Success
  isSpec: "True"
  fullName: Raftel.Domain.Validators.ValidationResult.Success
  nameWithType: ValidationResult.Success
- uid: Raftel.Domain.Validators.Validator`1
  name: Validator<TModel>
  href: api/Raftel.Domain.Validators.Validator-1.yml
  commentId: T:Raftel.Domain.Validators.Validator`1
  name.vb: Validator(Of TModel)
  fullName: Raftel.Domain.Validators.Validator<TModel>
  fullName.vb: Raftel.Domain.Validators.Validator(Of TModel)
  nameWithType: Validator<TModel>
  nameWithType.vb: Validator(Of TModel)
- uid: Raftel.Domain.Validators.Validator`1.EnsureThat(System.Func{`0,System.Boolean},Raftel.Domain.Abstractions.Error)
  name: EnsureThat(Func<TModel, bool>, Error)
  href: api/Raftel.Domain.Validators.Validator-1.yml
  commentId: M:Raftel.Domain.Validators.Validator`1.EnsureThat(System.Func{`0,System.Boolean},Raftel.Domain.Abstractions.Error)
  name.vb: EnsureThat(Func(Of TModel, Boolean), Error)
  fullName: Raftel.Domain.Validators.Validator<TModel>.EnsureThat(System.Func<TModel, bool>, Raftel.Domain.Abstractions.Error)
  fullName.vb: Raftel.Domain.Validators.Validator(Of TModel).EnsureThat(System.Func(Of TModel, Boolean), Raftel.Domain.Abstractions.Error)
  nameWithType: Validator<TModel>.EnsureThat(Func<TModel, bool>, Error)
  nameWithType.vb: Validator(Of TModel).EnsureThat(Func(Of TModel, Boolean), Error)
- uid: Raftel.Domain.Validators.Validator`1.EnsureThat*
  name: EnsureThat
  href: api/Raftel.Domain.Validators.Validator-1.yml
  commentId: Overload:Raftel.Domain.Validators.Validator`1.EnsureThat
  isSpec: "True"
  fullName: Raftel.Domain.Validators.Validator<TModel>.EnsureThat
  fullName.vb: Raftel.Domain.Validators.Validator(Of TModel).EnsureThat
  nameWithType: Validator<TModel>.EnsureThat
  nameWithType.vb: Validator(Of TModel).EnsureThat
- uid: Raftel.Domain.Validators.Validator`1.Validate(`0)
  name: Validate(TModel)
  href: api/Raftel.Domain.Validators.Validator-1.yml
  commentId: M:Raftel.Domain.Validators.Validator`1.Validate(`0)
  fullName: Raftel.Domain.Validators.Validator<TModel>.Validate(TModel)
  fullName.vb: Raftel.Domain.Validators.Validator(Of TModel).Validate(TModel)
  nameWithType: Validator<TModel>.Validate(TModel)
  nameWithType.vb: Validator(Of TModel).Validate(TModel)
- uid: Raftel.Domain.Validators.Validator`1.Validate*
  name: Validate
  href: api/Raftel.Domain.Validators.Validator-1.yml
  commentId: Overload:Raftel.Domain.Validators.Validator`1.Validate
  isSpec: "True"
  fullName: Raftel.Domain.Validators.Validator<TModel>.Validate
  fullName.vb: Raftel.Domain.Validators.Validator(Of TModel).Validate
  nameWithType: Validator<TModel>.Validate
  nameWithType.vb: Validator(Of TModel).Validate
- uid: Raftel.Infrastructure
  name: Raftel.Infrastructure
  href: api/Raftel.Infrastructure.yml
  commentId: N:Raftel.Infrastructure
  fullName: Raftel.Infrastructure
  nameWithType: Raftel.Infrastructure
- uid: Raftel.Infrastructure.Data
  name: Raftel.Infrastructure.Data
  href: api/Raftel.Infrastructure.Data.yml
  commentId: N:Raftel.Infrastructure.Data
  fullName: Raftel.Infrastructure.Data
  nameWithType: Raftel.Infrastructure.Data
- uid: Raftel.Infrastructure.Data.EfRepository`3
  name: EfRepository<TDbContext, TEntity, TId>
  href: api/Raftel.Infrastructure.Data.EfRepository-3.yml
  commentId: T:Raftel.Infrastructure.Data.EfRepository`3
  name.vb: EfRepository(Of TDbContext, TEntity, TId)
  fullName: Raftel.Infrastructure.Data.EfRepository<TDbContext, TEntity, TId>
  fullName.vb: Raftel.Infrastructure.Data.EfRepository(Of TDbContext, TEntity, TId)
  nameWithType: EfRepository<TDbContext, TEntity, TId>
  nameWithType.vb: EfRepository(Of TDbContext, TEntity, TId)
- uid: Raftel.Infrastructure.Data.EfRepository`3.#ctor(`0)
  name: EfRepository(TDbContext)
  href: api/Raftel.Infrastructure.Data.EfRepository-3.yml
  commentId: M:Raftel.Infrastructure.Data.EfRepository`3.#ctor(`0)
  name.vb: New(TDbContext)
  fullName: Raftel.Infrastructure.Data.EfRepository<TDbContext, TEntity, TId>.EfRepository(TDbContext)
  fullName.vb: Raftel.Infrastructure.Data.EfRepository(Of TDbContext, TEntity, TId).New(TDbContext)
  nameWithType: EfRepository<TDbContext, TEntity, TId>.EfRepository(TDbContext)
  nameWithType.vb: EfRepository(Of TDbContext, TEntity, TId).New(TDbContext)
- uid: Raftel.Infrastructure.Data.EfRepository`3.#ctor*
  name: EfRepository
  href: api/Raftel.Infrastructure.Data.EfRepository-3.yml
  commentId: Overload:Raftel.Infrastructure.Data.EfRepository`3.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Raftel.Infrastructure.Data.EfRepository<TDbContext, TEntity, TId>.EfRepository
  fullName.vb: Raftel.Infrastructure.Data.EfRepository(Of TDbContext, TEntity, TId).New
  nameWithType: EfRepository<TDbContext, TEntity, TId>.EfRepository
  nameWithType.vb: EfRepository(Of TDbContext, TEntity, TId).New
- uid: Raftel.Infrastructure.Data.EfRepository`3.AddAsync(`1,System.Threading.CancellationToken)
  name: AddAsync(TEntity, CancellationToken)
  href: api/Raftel.Infrastructure.Data.EfRepository-3.yml
  commentId: M:Raftel.Infrastructure.Data.EfRepository`3.AddAsync(`1,System.Threading.CancellationToken)
  fullName: Raftel.Infrastructure.Data.EfRepository<TDbContext, TEntity, TId>.AddAsync(TEntity, System.Threading.CancellationToken)
  fullName.vb: Raftel.Infrastructure.Data.EfRepository(Of TDbContext, TEntity, TId).AddAsync(TEntity, System.Threading.CancellationToken)
  nameWithType: EfRepository<TDbContext, TEntity, TId>.AddAsync(TEntity, CancellationToken)
  nameWithType.vb: EfRepository(Of TDbContext, TEntity, TId).AddAsync(TEntity, CancellationToken)
- uid: Raftel.Infrastructure.Data.EfRepository`3.AddAsync*
  name: AddAsync
  href: api/Raftel.Infrastructure.Data.EfRepository-3.yml
  commentId: Overload:Raftel.Infrastructure.Data.EfRepository`3.AddAsync
  isSpec: "True"
  fullName: Raftel.Infrastructure.Data.EfRepository<TDbContext, TEntity, TId>.AddAsync
  fullName.vb: Raftel.Infrastructure.Data.EfRepository(Of TDbContext, TEntity, TId).AddAsync
  nameWithType: EfRepository<TDbContext, TEntity, TId>.AddAsync
  nameWithType.vb: EfRepository(Of TDbContext, TEntity, TId).AddAsync
- uid: Raftel.Infrastructure.Data.EfRepository`3.GetByIdAsync(`2,System.Threading.CancellationToken)
  name: GetByIdAsync(TId, CancellationToken)
  href: api/Raftel.Infrastructure.Data.EfRepository-3.yml
  commentId: M:Raftel.Infrastructure.Data.EfRepository`3.GetByIdAsync(`2,System.Threading.CancellationToken)
  fullName: Raftel.Infrastructure.Data.EfRepository<TDbContext, TEntity, TId>.GetByIdAsync(TId, System.Threading.CancellationToken)
  fullName.vb: Raftel.Infrastructure.Data.EfRepository(Of TDbContext, TEntity, TId).GetByIdAsync(TId, System.Threading.CancellationToken)
  nameWithType: EfRepository<TDbContext, TEntity, TId>.GetByIdAsync(TId, CancellationToken)
  nameWithType.vb: EfRepository(Of TDbContext, TEntity, TId).GetByIdAsync(TId, CancellationToken)
- uid: Raftel.Infrastructure.Data.EfRepository`3.GetByIdAsync*
  name: GetByIdAsync
  href: api/Raftel.Infrastructure.Data.EfRepository-3.yml
  commentId: Overload:Raftel.Infrastructure.Data.EfRepository`3.GetByIdAsync
  isSpec: "True"
  fullName: Raftel.Infrastructure.Data.EfRepository<TDbContext, TEntity, TId>.GetByIdAsync
  fullName.vb: Raftel.Infrastructure.Data.EfRepository(Of TDbContext, TEntity, TId).GetByIdAsync
  nameWithType: EfRepository<TDbContext, TEntity, TId>.GetByIdAsync
  nameWithType.vb: EfRepository(Of TDbContext, TEntity, TId).GetByIdAsync
- uid: Raftel.Infrastructure.Data.EfRepository`3.ListAllAsync(System.Threading.CancellationToken)
  name: ListAllAsync(CancellationToken)
  href: api/Raftel.Infrastructure.Data.EfRepository-3.yml
  commentId: M:Raftel.Infrastructure.Data.EfRepository`3.ListAllAsync(System.Threading.CancellationToken)
  fullName: Raftel.Infrastructure.Data.EfRepository<TDbContext, TEntity, TId>.ListAllAsync(System.Threading.CancellationToken)
  fullName.vb: Raftel.Infrastructure.Data.EfRepository(Of TDbContext, TEntity, TId).ListAllAsync(System.Threading.CancellationToken)
  nameWithType: EfRepository<TDbContext, TEntity, TId>.ListAllAsync(CancellationToken)
  nameWithType.vb: EfRepository(Of TDbContext, TEntity, TId).ListAllAsync(CancellationToken)
- uid: Raftel.Infrastructure.Data.EfRepository`3.ListAllAsync*
  name: ListAllAsync
  href: api/Raftel.Infrastructure.Data.EfRepository-3.yml
  commentId: Overload:Raftel.Infrastructure.Data.EfRepository`3.ListAllAsync
  isSpec: "True"
  fullName: Raftel.Infrastructure.Data.EfRepository<TDbContext, TEntity, TId>.ListAllAsync
  fullName.vb: Raftel.Infrastructure.Data.EfRepository(Of TDbContext, TEntity, TId).ListAllAsync
  nameWithType: EfRepository<TDbContext, TEntity, TId>.ListAllAsync
  nameWithType.vb: EfRepository(Of TDbContext, TEntity, TId).ListAllAsync
- uid: Raftel.Infrastructure.Data.EfRepository`3.Remove(`1)
  name: Remove(TEntity)
  href: api/Raftel.Infrastructure.Data.EfRepository-3.yml
  commentId: M:Raftel.Infrastructure.Data.EfRepository`3.Remove(`1)
  fullName: Raftel.Infrastructure.Data.EfRepository<TDbContext, TEntity, TId>.Remove(TEntity)
  fullName.vb: Raftel.Infrastructure.Data.EfRepository(Of TDbContext, TEntity, TId).Remove(TEntity)
  nameWithType: EfRepository<TDbContext, TEntity, TId>.Remove(TEntity)
  nameWithType.vb: EfRepository(Of TDbContext, TEntity, TId).Remove(TEntity)
- uid: Raftel.Infrastructure.Data.EfRepository`3.Remove*
  name: Remove
  href: api/Raftel.Infrastructure.Data.EfRepository-3.yml
  commentId: Overload:Raftel.Infrastructure.Data.EfRepository`3.Remove
  isSpec: "True"
  fullName: Raftel.Infrastructure.Data.EfRepository<TDbContext, TEntity, TId>.Remove
  fullName.vb: Raftel.Infrastructure.Data.EfRepository(Of TDbContext, TEntity, TId).Remove
  nameWithType: EfRepository<TDbContext, TEntity, TId>.Remove
  nameWithType.vb: EfRepository(Of TDbContext, TEntity, TId).Remove
- uid: Raftel.Infrastructure.Data.EfRepository`3.Update(`1)
  name: Update(TEntity)
  href: api/Raftel.Infrastructure.Data.EfRepository-3.yml
  commentId: M:Raftel.Infrastructure.Data.EfRepository`3.Update(`1)
  fullName: Raftel.Infrastructure.Data.EfRepository<TDbContext, TEntity, TId>.Update(TEntity)
  fullName.vb: Raftel.Infrastructure.Data.EfRepository(Of TDbContext, TEntity, TId).Update(TEntity)
  nameWithType: EfRepository<TDbContext, TEntity, TId>.Update(TEntity)
  nameWithType.vb: EfRepository(Of TDbContext, TEntity, TId).Update(TEntity)
- uid: Raftel.Infrastructure.Data.EfRepository`3.Update*
  name: Update
  href: api/Raftel.Infrastructure.Data.EfRepository-3.yml
  commentId: Overload:Raftel.Infrastructure.Data.EfRepository`3.Update
  isSpec: "True"
  fullName: Raftel.Infrastructure.Data.EfRepository<TDbContext, TEntity, TId>.Update
  fullName.vb: Raftel.Infrastructure.Data.EfRepository(Of TDbContext, TEntity, TId).Update
  nameWithType: EfRepository<TDbContext, TEntity, TId>.Update
  nameWithType.vb: EfRepository(Of TDbContext, TEntity, TId).Update
- uid: Raftel.Infrastructure.Data.RaftelDbContext`1
  name: RaftelDbContext<TDbContext>
  href: api/Raftel.Infrastructure.Data.RaftelDbContext-1.yml
  commentId: T:Raftel.Infrastructure.Data.RaftelDbContext`1
  name.vb: RaftelDbContext(Of TDbContext)
  fullName: Raftel.Infrastructure.Data.RaftelDbContext<TDbContext>
  fullName.vb: Raftel.Infrastructure.Data.RaftelDbContext(Of TDbContext)
  nameWithType: RaftelDbContext<TDbContext>
  nameWithType.vb: RaftelDbContext(Of TDbContext)
- uid: Raftel.Infrastructure.Data.RaftelDbContext`1.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{`0})
  name: RaftelDbContext(DbContextOptions<TDbContext>)
  href: api/Raftel.Infrastructure.Data.RaftelDbContext-1.yml
  commentId: M:Raftel.Infrastructure.Data.RaftelDbContext`1.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{`0})
  name.vb: New(DbContextOptions(Of TDbContext))
  fullName: Raftel.Infrastructure.Data.RaftelDbContext<TDbContext>.RaftelDbContext(Microsoft.EntityFrameworkCore.DbContextOptions<TDbContext>)
  fullName.vb: Raftel.Infrastructure.Data.RaftelDbContext(Of TDbContext).New(Microsoft.EntityFrameworkCore.DbContextOptions(Of TDbContext))
  nameWithType: RaftelDbContext<TDbContext>.RaftelDbContext(DbContextOptions<TDbContext>)
  nameWithType.vb: RaftelDbContext(Of TDbContext).New(DbContextOptions(Of TDbContext))
- uid: Raftel.Infrastructure.Data.RaftelDbContext`1.#ctor*
  name: RaftelDbContext
  href: api/Raftel.Infrastructure.Data.RaftelDbContext-1.yml
  commentId: Overload:Raftel.Infrastructure.Data.RaftelDbContext`1.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Raftel.Infrastructure.Data.RaftelDbContext<TDbContext>.RaftelDbContext
  fullName.vb: Raftel.Infrastructure.Data.RaftelDbContext(Of TDbContext).New
  nameWithType: RaftelDbContext<TDbContext>.RaftelDbContext
  nameWithType.vb: RaftelDbContext(Of TDbContext).New
- uid: Raftel.Infrastructure.Data.RaftelDbContext`1.CommitAsync(System.Threading.CancellationToken)
  name: CommitAsync(CancellationToken)
  href: api/Raftel.Infrastructure.Data.RaftelDbContext-1.yml
  commentId: M:Raftel.Infrastructure.Data.RaftelDbContext`1.CommitAsync(System.Threading.CancellationToken)
  fullName: Raftel.Infrastructure.Data.RaftelDbContext<TDbContext>.CommitAsync(System.Threading.CancellationToken)
  fullName.vb: Raftel.Infrastructure.Data.RaftelDbContext(Of TDbContext).CommitAsync(System.Threading.CancellationToken)
  nameWithType: RaftelDbContext<TDbContext>.CommitAsync(CancellationToken)
  nameWithType.vb: RaftelDbContext(Of TDbContext).CommitAsync(CancellationToken)
- uid: Raftel.Infrastructure.Data.RaftelDbContext`1.CommitAsync*
  name: CommitAsync
  href: api/Raftel.Infrastructure.Data.RaftelDbContext-1.yml
  commentId: Overload:Raftel.Infrastructure.Data.RaftelDbContext`1.CommitAsync
  isSpec: "True"
  fullName: Raftel.Infrastructure.Data.RaftelDbContext<TDbContext>.CommitAsync
  fullName.vb: Raftel.Infrastructure.Data.RaftelDbContext(Of TDbContext).CommitAsync
  nameWithType: RaftelDbContext<TDbContext>.CommitAsync
  nameWithType.vb: RaftelDbContext(Of TDbContext).CommitAsync
- uid: Raftel.Infrastructure.DependencyInjection
  name: DependencyInjection
  href: api/Raftel.Infrastructure.DependencyInjection.yml
  commentId: T:Raftel.Infrastructure.DependencyInjection
  fullName: Raftel.Infrastructure.DependencyInjection
  nameWithType: DependencyInjection
- uid: Raftel.Infrastructure.DependencyInjection.AddRaftelData*
  name: AddRaftelData
  href: api/Raftel.Infrastructure.DependencyInjection.yml
  commentId: Overload:Raftel.Infrastructure.DependencyInjection.AddRaftelData
  isSpec: "True"
  fullName: Raftel.Infrastructure.DependencyInjection.AddRaftelData
  nameWithType: DependencyInjection.AddRaftelData
- uid: Raftel.Infrastructure.DependencyInjection.AddRaftelData``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.String)
  name: AddRaftelData<TDbContext>(IServiceCollection, IConfiguration, string)
  href: api/Raftel.Infrastructure.DependencyInjection.yml
  commentId: M:Raftel.Infrastructure.DependencyInjection.AddRaftelData``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.String)
  name.vb: AddRaftelData(Of TDbContext)(IServiceCollection, IConfiguration, String)
  fullName: Raftel.Infrastructure.DependencyInjection.AddRaftelData<TDbContext>(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration, string)
  fullName.vb: Raftel.Infrastructure.DependencyInjection.AddRaftelData(Of TDbContext)(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration, String)
  nameWithType: DependencyInjection.AddRaftelData<TDbContext>(IServiceCollection, IConfiguration, string)
  nameWithType.vb: DependencyInjection.AddRaftelData(Of TDbContext)(IServiceCollection, IConfiguration, String)
