{
  "README.html": {
    "href": "README.html",
    "title": "Raftel | Raftel",
    "summary": "Raftel Raftel is a training project. It's a small framework for building .NET Core applications, intended to be reused as a base for developing solutions that follow clean architecture and apply good coding practices. \uD83C\uDFAF Project Goals Serve as a learning environment to apply software development best practices. Practice methodologies and principles such as TDD, DDD, Object Calisthenics, and patterns like CQRS and Unit of Work. Provide an initial structure that facilitates scalability and code clarity. Avoid external library dependencies, favoring pure .NET solutions. ✨ Features Reusable foundation: designed to be the starting point for multiple .NET Core applications. Simple and extensible structure: clear project organization (cli/, src/, tests/) to support growth. Integrated testing: with code coverage and continuous integration from the start. Docker-ready development environment: quickly spin up dependencies like databases with a single command. No external dependencies: all code is built purely on the .NET platform, without additional frameworks. ⚙️ Requirements .NET SDK 9.0 or higher Docker (optional, but recommended for full development experience) \uD83D\uDCDA Documentation You can find the project documentation at: \uD83D\uDC49 franciscofsl.github.io/Raftel"
  },
  "api/Raftel.Application.Abstractions.IRequest-1.html": {
    "href": "api/Raftel.Application.Abstractions.IRequest-1.html",
    "title": "Interface IRequest<TResponse> | Raftel",
    "summary": "Interface IRequest<TResponse> Represents a request that produces a response of type TResponse. Namespace: Raftel.Application.Abstractions Assembly: Raftel.Application.dll Syntax public interface IRequest<TResponse> Type Parameters Name Description TResponse The type of response expected from the request."
  },
  "api/Raftel.Application.Abstractions.IRequestDispatcher.html": {
    "href": "api/Raftel.Application.Abstractions.IRequestDispatcher.html",
    "title": "Interface IRequestDispatcher | Raftel",
    "summary": "Interface IRequestDispatcher Dispatches requests through the pipeline and to their associated handler. Namespace: Raftel.Application.Abstractions Assembly: Raftel.Application.dll Syntax public interface IRequestDispatcher Methods | Edit this page View Source DispatchAsync<TRequest, TResponse>(TRequest) Dispatches the given request and returns the result asynchronously. Declaration Task<TResponse> DispatchAsync<TRequest, TResponse>(TRequest request) where TRequest : IRequest<TResponse> Parameters Type Name Description TRequest request The request to dispatch. Returns Type Description Task<TResponse> The result returned from the request handler or middleware. Type Parameters Name Description TRequest The type of the request. TResponse The type of the response."
  },
  "api/Raftel.Application.Abstractions.IRequestHandler-2.html": {
    "href": "api/Raftel.Application.Abstractions.IRequestHandler-2.html",
    "title": "Interface IRequestHandler<TRequest, TResponse> | Raftel",
    "summary": "Interface IRequestHandler<TRequest, TResponse> Defines a handler that processes a request of type TRequest and returns a response of type TResponse. Namespace: Raftel.Application.Abstractions Assembly: Raftel.Application.dll Syntax public interface IRequestHandler<TRequest, TResponse> where TRequest : IRequest<TResponse> Type Parameters Name Description TRequest The type of the request. TResponse The type of the response. Methods | Edit this page View Source HandleAsync(TRequest) Handles the given request asynchronously. Declaration Task<TResponse> HandleAsync(TRequest request) Parameters Type Name Description TRequest request The request to process. Returns Type Description Task<TResponse> A task representing the asynchronous operation, containing the response."
  },
  "api/Raftel.Application.Abstractions.IRequestMiddleware-2.html": {
    "href": "api/Raftel.Application.Abstractions.IRequestMiddleware-2.html",
    "title": "Interface IRequestMiddleware<TRequest, TResponse> | Raftel",
    "summary": "Interface IRequestMiddleware<TRequest, TResponse> Represents a middleware component in the request pipeline that can intercept and modify the processing of a request before and/or after the next component is invoked. Namespace: Raftel.Application.Abstractions Assembly: Raftel.Application.dll Syntax public interface IRequestMiddleware<TRequest, TResponse> where TRequest : IRequest<TResponse> Type Parameters Name Description TRequest The type of the request. TResponse The type of the response. Methods | Edit this page View Source HandleAsync(TRequest, RequestHandlerDelegate<TResponse>) Processes the request and optionally calls the next delegate in the pipeline. Declaration Task<TResponse> HandleAsync(TRequest request, RequestHandlerDelegate<TResponse> next) Parameters Type Name Description TRequest request The request instance. RequestHandlerDelegate<TResponse> next The next handler in the pipeline. Returns Type Description Task<TResponse> A task containing the result of the request."
  },
  "api/Raftel.Application.Abstractions.Middlewares.UnitOfWorkMiddleware-2.html": {
    "href": "api/Raftel.Application.Abstractions.Middlewares.UnitOfWorkMiddleware-2.html",
    "title": "Class UnitOfWorkMiddleware<TRequest, TResponse> | Raftel",
    "summary": "Class UnitOfWorkMiddleware<TRequest, TResponse> Inheritance object UnitOfWorkMiddleware<TRequest, TResponse> Implements IRequestMiddleware<TRequest, TResponse> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Raftel.Application.Abstractions.Middlewares Assembly: Raftel.Application.dll Syntax public class UnitOfWorkMiddleware<TRequest, TResponse> : IRequestMiddleware<TRequest, TResponse> where TRequest : IRequest<TResponse> Type Parameters Name Description TRequest TResponse Constructors | Edit this page View Source UnitOfWorkMiddleware(IUnitOfWork) Declaration public UnitOfWorkMiddleware(IUnitOfWork unitOfWork) Parameters Type Name Description IUnitOfWork unitOfWork Methods | Edit this page View Source HandleAsync(TRequest, RequestHandlerDelegate<TResponse>) Processes the request and optionally calls the next delegate in the pipeline. Declaration public Task<TResponse> HandleAsync(TRequest request, RequestHandlerDelegate<TResponse> next) Parameters Type Name Description TRequest request The request instance. RequestHandlerDelegate<TResponse> next The next handler in the pipeline. Returns Type Description Task<TResponse> A task containing the result of the request. Implements IRequestMiddleware<TRequest, TResponse>"
  },
  "api/Raftel.Application.Abstractions.Middlewares.ValidationMiddleware-2.html": {
    "href": "api/Raftel.Application.Abstractions.Middlewares.ValidationMiddleware-2.html",
    "title": "Class ValidationMiddleware<TRequest, TResponse> | Raftel",
    "summary": "Class ValidationMiddleware<TRequest, TResponse> Middleware that performs validation on the incoming request using all registered Validator<TModel> instances. If any validation rule fails, a ValidationException is thrown and the request pipeline is halted. Inheritance object ValidationMiddleware<TRequest, TResponse> Implements IRequestMiddleware<TRequest, TResponse> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Raftel.Application.Abstractions.Middlewares Assembly: Raftel.Application.dll Syntax public class ValidationMiddleware<TRequest, TResponse> : IRequestMiddleware<TRequest, TResponse> where TRequest : IRequest<TResponse> Type Parameters Name Description TRequest The type of the request being validated. TResponse The type of the expected response. Constructors | Edit this page View Source ValidationMiddleware(IEnumerable<Validator<TRequest>>) Middleware that performs validation on the incoming request using all registered Validator<TModel> instances. If any validation rule fails, a ValidationException is thrown and the request pipeline is halted. Declaration public ValidationMiddleware(IEnumerable<Validator<TRequest>> validators) Parameters Type Name Description IEnumerable<Validator<TRequest>> validators A collection of validators for the given TRequest. Methods | Edit this page View Source HandleAsync(TRequest, RequestHandlerDelegate<TResponse>) Handles the request by validating it before invoking the next delegate in the pipeline. If validation passes, the request continues to the next handler. If validation fails, a ValidationException is thrown containing all errors. Declaration public Task<TResponse> HandleAsync(TRequest request, RequestHandlerDelegate<TResponse> next) Parameters Type Name Description TRequest request The request to validate. RequestHandlerDelegate<TResponse> next The delegate representing the next middleware or handler in the pipeline. Returns Type Description Task<TResponse> The response returned by the next handler, if validation succeeds. Exceptions Type Condition ValidationException Thrown when one or more validation rules fail. Implements IRequestMiddleware<TRequest, TResponse>"
  },
  "api/Raftel.Application.Abstractions.Middlewares.html": {
    "href": "api/Raftel.Application.Abstractions.Middlewares.html",
    "title": "Namespace Raftel.Application.Abstractions.Middlewares | Raftel",
    "summary": "Namespace Raftel.Application.Abstractions.Middlewares Classes UnitOfWorkMiddleware<TRequest, TResponse> ValidationMiddleware<TRequest, TResponse> Middleware that performs validation on the incoming request using all registered Validator<TModel> instances. If any validation rule fails, a ValidationException is thrown and the request pipeline is halted."
  },
  "api/Raftel.Application.Abstractions.RequestDispatcher.html": {
    "href": "api/Raftel.Application.Abstractions.RequestDispatcher.html",
    "title": "Class RequestDispatcher | Raftel",
    "summary": "Class RequestDispatcher Default implementation of IRequestDispatcher that resolves the request handler and middleware pipeline from the dependency injection container. Inheritance object RequestDispatcher Implements IRequestDispatcher Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Raftel.Application.Abstractions Assembly: Raftel.Application.dll Syntax public class RequestDispatcher : IRequestDispatcher Constructors | Edit this page View Source RequestDispatcher(IServiceProvider) Creates a new instance of the RequestDispatcher class. Declaration public RequestDispatcher(IServiceProvider serviceProvider) Parameters Type Name Description IServiceProvider serviceProvider The dependency injection service provider. Methods | Edit this page View Source DispatchAsync<TRequest, TResponse>(TRequest) Dispatches the given request and returns the result asynchronously. Declaration public Task<TResponse> DispatchAsync<TRequest, TResponse>(TRequest request) where TRequest : IRequest<TResponse> Parameters Type Name Description TRequest request The request to dispatch. Returns Type Description Task<TResponse> The result returned from the request handler or middleware. Type Parameters Name Description TRequest The type of the request. TResponse The type of the response. Implements IRequestDispatcher"
  },
  "api/Raftel.Application.Abstractions.RequestHandlerDelegate-1.html": {
    "href": "api/Raftel.Application.Abstractions.RequestHandlerDelegate-1.html",
    "title": "Delegate RequestHandlerDelegate<TResponse> | Raftel",
    "summary": "Delegate RequestHandlerDelegate<TResponse> Delegate that represents the next handler or middleware in the request processing pipeline. Namespace: Raftel.Application.Abstractions Assembly: Raftel.Application.dll Syntax public delegate Task<TResponse> RequestHandlerDelegate<TResponse>() Returns Type Description Task<TResponse> The asynchronous result of the request pipeline execution. Type Parameters Name Description TResponse The type of response expected."
  },
  "api/Raftel.Application.Abstractions.html": {
    "href": "api/Raftel.Application.Abstractions.html",
    "title": "Namespace Raftel.Application.Abstractions | Raftel",
    "summary": "Namespace Raftel.Application.Abstractions Classes RequestDispatcher Default implementation of IRequestDispatcher that resolves the request handler and middleware pipeline from the dependency injection container. Interfaces IRequestDispatcher Dispatches requests through the pipeline and to their associated handler. IRequestHandler<TRequest, TResponse> Defines a handler that processes a request of type TRequest and returns a response of type TResponse. IRequestMiddleware<TRequest, TResponse> Represents a middleware component in the request pipeline that can intercept and modify the processing of a request before and/or after the next component is invoked. IRequest<TResponse> Represents a request that produces a response of type TResponse. Delegates RequestHandlerDelegate<TResponse> Delegate that represents the next handler or middleware in the request processing pipeline."
  },
  "api/Raftel.Application.Commands.CommandDispatcher.html": {
    "href": "api/Raftel.Application.Commands.CommandDispatcher.html",
    "title": "Class CommandDispatcher | Raftel",
    "summary": "Class CommandDispatcher Default implementation of ICommandDispatcher that delegates command execution to the IRequestDispatcher infrastructure. Inheritance object CommandDispatcher Implements ICommandDispatcher Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Raftel.Application.Commands Assembly: Raftel.Application.dll Syntax public class CommandDispatcher : ICommandDispatcher Constructors | Edit this page View Source CommandDispatcher(IRequestDispatcher) Initializes a new instance of the CommandDispatcher class. Declaration public CommandDispatcher(IRequestDispatcher dispatcher) Parameters Type Name Description IRequestDispatcher dispatcher The internal dispatcher used to route commands. Methods | Edit this page View Source DispatchAsync<TCommand>(TCommand) Dispatches a command asynchronously. Declaration public Task<Result> DispatchAsync<TCommand>(TCommand command) where TCommand : ICommand Parameters Type Name Description TCommand command The command instance to process. Returns Type Description Task<Result> A Result representing the outcome of the command execution. Type Parameters Name Description TCommand The type of command to dispatch. Implements ICommandDispatcher"
  },
  "api/Raftel.Application.Commands.ICommand.html": {
    "href": "api/Raftel.Application.Commands.ICommand.html",
    "title": "Interface ICommand | Raftel",
    "summary": "Interface ICommand Represents a command that does not return a value other than a Result. Namespace: Raftel.Application.Commands Assembly: Raftel.Application.dll Syntax public interface ICommand : IRequest<Result>"
  },
  "api/Raftel.Application.Commands.ICommandDispatcher.html": {
    "href": "api/Raftel.Application.Commands.ICommandDispatcher.html",
    "title": "Interface ICommandDispatcher | Raftel",
    "summary": "Interface ICommandDispatcher Dispatches a command to its corresponding handler. Namespace: Raftel.Application.Commands Assembly: Raftel.Application.dll Syntax public interface ICommandDispatcher Methods | Edit this page View Source DispatchAsync<TCommand>(TCommand) Dispatches a command asynchronously. Declaration Task<Result> DispatchAsync<TCommand>(TCommand command) where TCommand : ICommand Parameters Type Name Description TCommand command The command instance to process. Returns Type Description Task<Result> A Result representing the outcome of the command execution. Type Parameters Name Description TCommand The type of command to dispatch."
  },
  "api/Raftel.Application.Commands.ICommandHandler-1.html": {
    "href": "api/Raftel.Application.Commands.ICommandHandler-1.html",
    "title": "Interface ICommandHandler<TCommand> | Raftel",
    "summary": "Interface ICommandHandler<TCommand> Defines a handler for processing a command of type TCommand. Inherited Members IRequestHandler<TCommand, Result>.HandleAsync(TCommand) Namespace: Raftel.Application.Commands Assembly: Raftel.Application.dll Syntax public interface ICommandHandler<TCommand> : IRequestHandler<TCommand, Result> where TCommand : ICommand Type Parameters Name Description TCommand The type of command to handle."
  },
  "api/Raftel.Application.Commands.html": {
    "href": "api/Raftel.Application.Commands.html",
    "title": "Namespace Raftel.Application.Commands | Raftel",
    "summary": "Namespace Raftel.Application.Commands Classes CommandDispatcher Default implementation of ICommandDispatcher that delegates command execution to the IRequestDispatcher infrastructure. Interfaces ICommand Represents a command that does not return a value other than a Result. ICommandDispatcher Dispatches a command to its corresponding handler. ICommandHandler<TCommand> Defines a handler for processing a command of type TCommand."
  },
  "api/Raftel.Application.DependencyInjection.html": {
    "href": "api/Raftel.Application.DependencyInjection.html",
    "title": "Class DependencyInjection | Raftel",
    "summary": "Class DependencyInjection Inheritance object DependencyInjection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Raftel.Application Assembly: Raftel.Application.dll Syntax public static class DependencyInjection Methods | Edit this page View Source AddRaftelApplication(IServiceCollection) Declaration public static void AddRaftelApplication(this IServiceCollection services) Parameters Type Name Description IServiceCollection services"
  },
  "api/Raftel.Application.Exceptions.ValidationException.html": {
    "href": "api/Raftel.Application.Exceptions.ValidationException.html",
    "title": "Class ValidationException | Raftel",
    "summary": "Class ValidationException Exception thrown when a validation process fails. Inheritance object Exception ValidationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Raftel.Application.Exceptions Assembly: Raftel.Application.dll Syntax public class ValidationException : Exception, ISerializable Constructors | Edit this page View Source ValidationException(IEnumerable<Error>) Declaration public ValidationException(IEnumerable<Error> errors) Parameters Type Name Description IEnumerable<Error> errors Properties | Edit this page View Source Errors Declaration public IReadOnlyList<Error> Errors { get; } Property Value Type Description IReadOnlyList<Error> Methods | Edit this page View Source ToString() Creates and returns a string representation of the current exception. Declaration public override string ToString() Returns Type Description string A string representation of the current exception. Overrides Exception.ToString() Implements ISerializable"
  },
  "api/Raftel.Application.Exceptions.html": {
    "href": "api/Raftel.Application.Exceptions.html",
    "title": "Namespace Raftel.Application.Exceptions | Raftel",
    "summary": "Namespace Raftel.Application.Exceptions Classes ValidationException Exception thrown when a validation process fails."
  },
  "api/Raftel.Application.IUnitOfWork.html": {
    "href": "api/Raftel.Application.IUnitOfWork.html",
    "title": "Interface IUnitOfWork | Raftel",
    "summary": "Interface IUnitOfWork Namespace: Raftel.Application Assembly: Raftel.Application.dll Syntax public interface IUnitOfWork Methods | Edit this page View Source CommitAsync(CancellationToken) Declaration Task CommitAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task"
  },
  "api/Raftel.Application.Queries.IQuery-1.html": {
    "href": "api/Raftel.Application.Queries.IQuery-1.html",
    "title": "Interface IQuery<TResult> | Raftel",
    "summary": "Interface IQuery<TResult> Represents a query that returns a result of type TResult. Namespace: Raftel.Application.Queries Assembly: Raftel.Application.dll Syntax public interface IQuery<TResult> : IRequest<Result<TResult>> Type Parameters Name Description TResult The type of the result produced by the query."
  },
  "api/Raftel.Application.Queries.IQueryDispatcher.html": {
    "href": "api/Raftel.Application.Queries.IQueryDispatcher.html",
    "title": "Interface IQueryDispatcher | Raftel",
    "summary": "Interface IQueryDispatcher Dispatches a query to its corresponding handler and returns the result. Namespace: Raftel.Application.Queries Assembly: Raftel.Application.dll Syntax public interface IQueryDispatcher Methods | Edit this page View Source DispatchAsync<TQuery, TResult>(TQuery) Dispatches a query asynchronously and retrieves the result. Declaration Task<Result<TResult>> DispatchAsync<TQuery, TResult>(TQuery query) where TQuery : IQuery<TResult> Parameters Type Name Description TQuery query The query instance to process. Returns Type Description Task<Result<TResult>> A Result<TValue> representing the outcome of the query execution. Type Parameters Name Description TQuery The type of the query to dispatch. TResult The type of the result expected from the query."
  },
  "api/Raftel.Application.Queries.IQueryHandler-2.html": {
    "href": "api/Raftel.Application.Queries.IQueryHandler-2.html",
    "title": "Interface IQueryHandler<TQuery, TResult> | Raftel",
    "summary": "Interface IQueryHandler<TQuery, TResult> Defines a handler for processing a query of type TQuery that returns a result of type TResult. Inherited Members IRequestHandler<TQuery, Result<TResult>>.HandleAsync(TQuery) Namespace: Raftel.Application.Queries Assembly: Raftel.Application.dll Syntax public interface IQueryHandler<TQuery, TResult> : IRequestHandler<TQuery, Result<TResult>> where TQuery : IQuery<TResult> Type Parameters Name Description TQuery The type of the query to handle. TResult The type of the result produced by the query."
  },
  "api/Raftel.Application.Queries.QueryDispatcher.html": {
    "href": "api/Raftel.Application.Queries.QueryDispatcher.html",
    "title": "Class QueryDispatcher | Raftel",
    "summary": "Class QueryDispatcher Default implementation of IQueryDispatcher that delegates query execution to the IRequestDispatcher infrastructure. Inheritance object QueryDispatcher Implements IQueryDispatcher Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Raftel.Application.Queries Assembly: Raftel.Application.dll Syntax public class QueryDispatcher : IQueryDispatcher Constructors | Edit this page View Source QueryDispatcher(IRequestDispatcher) Initializes a new instance of the QueryDispatcher class. Declaration public QueryDispatcher(IRequestDispatcher dispatcher) Parameters Type Name Description IRequestDispatcher dispatcher The internal dispatcher used to route queries. Methods | Edit this page View Source DispatchAsync<TQuery, TResult>(TQuery) Dispatches a query asynchronously and retrieves the result. Declaration public Task<Result<TResult>> DispatchAsync<TQuery, TResult>(TQuery query) where TQuery : IQuery<TResult> Parameters Type Name Description TQuery query The query instance to process. Returns Type Description Task<Result<TResult>> A Result<TValue> representing the outcome of the query execution. Type Parameters Name Description TQuery The type of the query to dispatch. TResult The type of the result expected from the query. Implements IQueryDispatcher"
  },
  "api/Raftel.Application.Queries.html": {
    "href": "api/Raftel.Application.Queries.html",
    "title": "Namespace Raftel.Application.Queries | Raftel",
    "summary": "Namespace Raftel.Application.Queries Classes QueryDispatcher Default implementation of IQueryDispatcher that delegates query execution to the IRequestDispatcher infrastructure. Interfaces IQueryDispatcher Dispatches a query to its corresponding handler and returns the result. IQueryHandler<TQuery, TResult> Defines a handler for processing a query of type TQuery that returns a result of type TResult. IQuery<TResult> Represents a query that returns a result of type TResult."
  },
  "api/Raftel.Application.html": {
    "href": "api/Raftel.Application.html",
    "title": "Namespace Raftel.Application | Raftel",
    "summary": "Namespace Raftel.Application Classes DependencyInjection Interfaces IUnitOfWork"
  },
  "api/Raftel.Domain.Abstractions.Error.html": {
    "href": "api/Raftel.Domain.Abstractions.Error.html",
    "title": "Class Error | Raftel",
    "summary": "Class Error Inheritance object Error Implements IEquatable<Error> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Raftel.Domain.Abstractions Assembly: Raftel.Domain.dll Syntax public record Error : IEquatable<Error> Constructors | Edit this page View Source Error(string, string) Declaration public Error(string Code, string Message) Parameters Type Name Description string Code string Message Fields | Edit this page View Source None Declaration public static Error None Field Value Type Description Error | Edit this page View Source NullValue Declaration public static Error NullValue Field Value Type Description Error Properties | Edit this page View Source Code Declaration public string Code { get; init; } Property Value Type Description string | Edit this page View Source Message Declaration public string Message { get; init; } Property Value Type Description string Implements IEquatable<T>"
  },
  "api/Raftel.Domain.Abstractions.IRepository-2.html": {
    "href": "api/Raftel.Domain.Abstractions.IRepository-2.html",
    "title": "Interface IRepository<TEntity, TId> | Raftel",
    "summary": "Interface IRepository<TEntity, TId> Namespace: Raftel.Domain.Abstractions Assembly: Raftel.Domain.dll Syntax public interface IRepository<TEntity, in TId> where TEntity : AggregateRoot<in TId> where TId : TypedId<Guid> Type Parameters Name Description TEntity TId Methods | Edit this page View Source AddAsync(TEntity, CancellationToken) Declaration Task AddAsync(TEntity entity, CancellationToken cancellationToken = default) Parameters Type Name Description TEntity entity CancellationToken cancellationToken Returns Type Description Task | Edit this page View Source GetByIdAsync(TId, CancellationToken) Declaration Task<TEntity?> GetByIdAsync(TId id, CancellationToken cancellationToken = default) Parameters Type Name Description TId id CancellationToken cancellationToken Returns Type Description Task<TEntity> | Edit this page View Source ListAllAsync(CancellationToken) Declaration Task<List<TEntity>> ListAllAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task<List<TEntity>> | Edit this page View Source Remove(TEntity) Declaration void Remove(TEntity entity) Parameters Type Name Description TEntity entity | Edit this page View Source Update(TEntity) Declaration void Update(TEntity entity) Parameters Type Name Description TEntity entity"
  },
  "api/Raftel.Domain.Abstractions.Result-1.html": {
    "href": "api/Raftel.Domain.Abstractions.Result-1.html",
    "title": "Class Result<TValue> | Raftel",
    "summary": "Class Result<TValue> Inheritance object Result Result<TValue> Inherited Members Result.IsSuccess Result.IsFailure Result.Error Result.Success() Result.Success<TValue>(TValue) Result.Failure<TValue>(Error) Result.Create<TValue>(TValue) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Raftel.Domain.Abstractions Assembly: Raftel.Domain.dll Syntax public class Result<TValue> : Result Type Parameters Name Description TValue Constructors | Edit this page View Source Result(TValue, bool, Error) Initializes a new instance of the Result<TValue> class. Declaration protected Result(TValue value, bool isSuccess, Error error) Parameters Type Name Description TValue value The value returned by the operation. bool isSuccess Indicates whether the operation was successful. Error error The error associated with the operation. Properties | Edit this page View Source Value Gets the value returned by the operation, if successful. Declaration public TValue Value { get; } Property Value Type Description TValue Methods | Edit this page View Source Failure(Error) Creates a failed result with the specified error. Declaration public static Result<TValue> Failure(Error error) Parameters Type Name Description Error error The error associated with the failure. Returns Type Description Result<TValue> A failed result. | Edit this page View Source Success(TValue) Creates a successful result with the specified value. Declaration public static Result<TValue> Success(TValue value) Parameters Type Name Description TValue value The value returned by the operation. Returns Type Description Result<TValue> A successful result containing the value. Operators | Edit this page View Source implicit operator Result<TValue>(TValue) Declaration public static implicit operator Result<TValue>(TValue value) Parameters Type Name Description TValue value Returns Type Description Result<TValue>"
  },
  "api/Raftel.Domain.Abstractions.Result.html": {
    "href": "api/Raftel.Domain.Abstractions.Result.html",
    "title": "Class Result | Raftel",
    "summary": "Class Result Inheritance object Result Result<TValue> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Raftel.Domain.Abstractions Assembly: Raftel.Domain.dll Syntax public class Result Constructors | Edit this page View Source Result(bool, Error) Declaration protected Result(bool isSuccess, Error error) Parameters Type Name Description bool isSuccess Error error Properties | Edit this page View Source Error Declaration public Error Error { get; } Property Value Type Description Error | Edit this page View Source IsFailure Declaration public bool IsFailure { get; } Property Value Type Description bool | Edit this page View Source IsSuccess Declaration public bool IsSuccess { get; } Property Value Type Description bool Methods | Edit this page View Source Create<TValue>(TValue?) Declaration public static Result<TValue> Create<TValue>(TValue? value) Parameters Type Name Description TValue value Returns Type Description Result<TValue> Type Parameters Name Description TValue | Edit this page View Source Failure(Error) Declaration public static Result Failure(Error error) Parameters Type Name Description Error error Returns Type Description Result | Edit this page View Source Failure<TValue>(Error) Declaration public static Result<TValue> Failure<TValue>(Error error) Parameters Type Name Description Error error Returns Type Description Result<TValue> Type Parameters Name Description TValue | Edit this page View Source Success() Declaration public static Result Success() Returns Type Description Result | Edit this page View Source Success<TValue>(TValue) Declaration public static Result<TValue> Success<TValue>(TValue value) Parameters Type Name Description TValue value Returns Type Description Result<TValue> Type Parameters Name Description TValue"
  },
  "api/Raftel.Domain.Abstractions.html": {
    "href": "api/Raftel.Domain.Abstractions.html",
    "title": "Namespace Raftel.Domain.Abstractions | Raftel",
    "summary": "Namespace Raftel.Domain.Abstractions Classes Error Result Result<TValue> Interfaces IRepository<TEntity, TId>"
  },
  "api/Raftel.Domain.BaseTypes.AggregateRoot-1.html": {
    "href": "api/Raftel.Domain.BaseTypes.AggregateRoot-1.html",
    "title": "Class AggregateRoot<TId> | Raftel",
    "summary": "Class AggregateRoot<TId> Represents the root of an aggregate in the domain model. Inheritance object Entity<TId> AggregateRoot<TId> Inherited Members Entity<TId>.Id Entity<TId>.Equals(object) Entity<TId>.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Raftel.Domain.BaseTypes Assembly: Raftel.Domain.dll Syntax public abstract class AggregateRoot<TId> : Entity<TId> where TId : TypedId<Guid> Type Parameters Name Description TId The type of the aggregate's identifier. Constructors | Edit this page View Source AggregateRoot(TId) Initializes a new instance of the AggregateRoot<TId> class. Declaration protected AggregateRoot(TId id) Parameters Type Name Description TId id The identifier of the aggregate root."
  },
  "api/Raftel.Domain.BaseTypes.Entity-1.html": {
    "href": "api/Raftel.Domain.BaseTypes.Entity-1.html",
    "title": "Class Entity<TId> | Raftel",
    "summary": "Class Entity<TId> Base class for all domain entities with a strongly-typed ID. Inheritance object Entity<TId> AggregateRoot<TId> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Raftel.Domain.BaseTypes Assembly: Raftel.Domain.dll Syntax public abstract class Entity<TId> where TId : TypedId<Guid> Type Parameters Name Description TId The type of the entity's identifier. Constructors | Edit this page View Source Entity(TId) Initializes a new instance of the Entity<TId> class. Declaration protected Entity(TId id) Parameters Type Name Description TId id The identifier of the entity. Properties | Edit this page View Source Id Gets the unique identifier of the entity. Declaration public TId Id { get; protected set; } Property Value Type Description TId Methods | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides object.Equals(object) | Edit this page View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description int A hash code for the current object. Overrides object.GetHashCode()"
  },
  "api/Raftel.Domain.BaseTypes.TypedGuidId.html": {
    "href": "api/Raftel.Domain.BaseTypes.TypedGuidId.html",
    "title": "Class TypedGuidId | Raftel",
    "summary": "Class TypedGuidId Base class for identifiers that use Guid as the backing type. Inheritance object TypedId<Guid> TypedGuidId Implements IEquatable<TypedId<Guid>> IEquatable<TypedGuidId> Inherited Members TypedId<Guid>.ToString() TypedId<Guid>.Equals(TypedId<Guid>) TypedId<Guid>.GetHashCode() object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Raftel.Domain.BaseTypes Assembly: Raftel.Domain.dll Syntax public abstract record TypedGuidId : TypedId<Guid>, IEquatable<TypedId<Guid>>, IEquatable<TypedGuidId> Constructors | Edit this page View Source TypedGuidId(Guid) Initializes a new instance of the TypedGuidId class. Declaration protected TypedGuidId(Guid value) Parameters Type Name Description Guid value The GUID value. Methods | Edit this page View Source NewGuid() Generates a new GUID using version 7. Declaration public static Guid NewGuid() Returns Type Description Guid Implements IEquatable<T> IEquatable<T>"
  },
  "api/Raftel.Domain.BaseTypes.TypedId-1.html": {
    "href": "api/Raftel.Domain.BaseTypes.TypedId-1.html",
    "title": "Class TypedId<T> | Raftel",
    "summary": "Class TypedId<T> Represents a strongly-typed identifier based on a primitive type. Inheritance object TypedId<T> TypedGuidId Implements IEquatable<TypedId<T>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Raftel.Domain.BaseTypes Assembly: Raftel.Domain.dll Syntax public abstract record TypedId<T> : IEquatable<TypedId<T>> where T : notnull Type Parameters Name Description T The underlying primitive type (e.g., Guid, int). Constructors | Edit this page View Source TypedId(T) Initializes a new instance of the TypedId<T> class. Declaration protected TypedId(T value) Parameters Type Name Description T value The raw value of the identifier. Exceptions Type Condition ArgumentNullException Thrown when value is null. ArgumentException Thrown when value is Guid.Empty. Methods | Edit this page View Source Equals(TypedId<T>?) Indicates whether the current object is equal to another object of the same type. Declaration public virtual bool Equals(TypedId<T>? other) Parameters Type Name Description TypedId<T> other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description int A hash code for the current object. Overrides object.GetHashCode() | Edit this page View Source ToString() Returns a string that represents the current object. Declaration public override string? ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString() Operators | Edit this page View Source implicit operator T(TypedId<T>) Implicitly converts a TypedId<T> to its underlying value. Declaration public static implicit operator T(TypedId<T> id) Parameters Type Name Description TypedId<T> id Returns Type Description T Implements IEquatable<T>"
  },
  "api/Raftel.Domain.BaseTypes.html": {
    "href": "api/Raftel.Domain.BaseTypes.html",
    "title": "Namespace Raftel.Domain.BaseTypes | Raftel",
    "summary": "Namespace Raftel.Domain.BaseTypes Classes AggregateRoot<TId> Represents the root of an aggregate in the domain model. Entity<TId> Base class for all domain entities with a strongly-typed ID. TypedGuidId Base class for identifiers that use Guid as the backing type. TypedId<T> Represents a strongly-typed identifier based on a primitive type."
  },
  "api/Raftel.Domain.Specifications.AndSpecification-1.html": {
    "href": "api/Raftel.Domain.Specifications.AndSpecification-1.html",
    "title": "Class AndSpecification<TModel> | Raftel",
    "summary": "Class AndSpecification<TModel> Represents a logical AND specification that combines two other specifications. Inheritance object Specification<TModel> AndSpecification<TModel> Inherited Members Specification<TModel>.IsSatisfiedBy(TModel) Specification<TModel>.And(Specification<TModel>) Specification<TModel>.Or(Specification<TModel>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Raftel.Domain.Specifications Assembly: Raftel.Domain.dll Syntax public class AndSpecification<TModel> : Specification<TModel> Type Parameters Name Description TModel The type of the model to which the specification is applied. Constructors | Edit this page View Source AndSpecification(Specification<TModel>, Specification<TModel>) Represents a logical AND specification that combines two other specifications. Declaration public AndSpecification(Specification<TModel> left, Specification<TModel> right) Parameters Type Name Description Specification<TModel> left Specification<TModel> right Methods | Edit this page View Source ToExpression() Converts the specification to an expression. Declaration public override Expression<Func<TModel, bool>> ToExpression() Returns Type Description Expression<Func<TModel, bool>> A Expression{Func{TModel, bool}} that represents the logical AND between the two specifications. Overrides Specification<TModel>.ToExpression()"
  },
  "api/Raftel.Domain.Specifications.OrSpecification-1.html": {
    "href": "api/Raftel.Domain.Specifications.OrSpecification-1.html",
    "title": "Class OrSpecification<TModel> | Raftel",
    "summary": "Class OrSpecification<TModel> Represents a logical OR specification that combines two other specifications. Inheritance object Specification<TModel> OrSpecification<TModel> Inherited Members Specification<TModel>.IsSatisfiedBy(TModel) Specification<TModel>.And(Specification<TModel>) Specification<TModel>.Or(Specification<TModel>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Raftel.Domain.Specifications Assembly: Raftel.Domain.dll Syntax public class OrSpecification<TModel> : Specification<TModel> Type Parameters Name Description TModel The type of the model to which the specification is applied. Constructors | Edit this page View Source OrSpecification(Specification<TModel>, Specification<TModel>) Represents a logical OR specification that combines two other specifications. Declaration public OrSpecification(Specification<TModel> left, Specification<TModel> right) Parameters Type Name Description Specification<TModel> left Specification<TModel> right Methods | Edit this page View Source ToExpression() Converts the specification to an expression. Declaration public override Expression<Func<TModel, bool>> ToExpression() Returns Type Description Expression<Func<TModel, bool>> A Expression{Func{TModel, bool}} that represents the logical OR between the two specifications. Overrides Specification<TModel>.ToExpression()"
  },
  "api/Raftel.Domain.Specifications.Specification-1.html": {
    "href": "api/Raftel.Domain.Specifications.Specification-1.html",
    "title": "Class Specification<TModel> | Raftel",
    "summary": "Class Specification<TModel> Represents a base class for specifications that defines a condition for a given model. Inheritance object Specification<TModel> AndSpecification<TModel> OrSpecification<TModel> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Raftel.Domain.Specifications Assembly: Raftel.Domain.dll Syntax public abstract class Specification<TModel> Type Parameters Name Description TModel The type of the model to which the specification is applied. Methods | Edit this page View Source And(Specification<TModel>) Combines the current specification with another specification using a logical AND. Declaration public Specification<TModel> And(Specification<TModel> other) Parameters Type Name Description Specification<TModel> other The specification to combine with. Returns Type Description Specification<TModel> A new specification that represents the logical AND. | Edit this page View Source IsSatisfiedBy(TModel) Determines whether the model satisfies the specification. Declaration public bool IsSatisfiedBy(TModel model) Parameters Type Name Description TModel model The model to evaluate. Returns Type Description bool True if the model satisfies the specification, otherwise false. | Edit this page View Source Or(Specification<TModel>) Combines the current specification with another specification using a logical OR. Declaration public Specification<TModel> Or(Specification<TModel> other) Parameters Type Name Description Specification<TModel> other The specification to combine with. Returns Type Description Specification<TModel> A new specification that represents the logical OR. | Edit this page View Source ToExpression() Converts the specification to an expression that can be evaluated against a model. Declaration public abstract Expression<Func<TModel, bool>> ToExpression() Returns Type Description Expression<Func<TModel, bool>> An expression that represents the condition."
  },
  "api/Raftel.Domain.Specifications.html": {
    "href": "api/Raftel.Domain.Specifications.html",
    "title": "Namespace Raftel.Domain.Specifications | Raftel",
    "summary": "Namespace Raftel.Domain.Specifications Classes AndSpecification<TModel> Represents a logical AND specification that combines two other specifications. OrSpecification<TModel> Represents a logical OR specification that combines two other specifications. Specification<TModel> Represents a base class for specifications that defines a condition for a given model."
  },
  "api/Raftel.Domain.Validators.ValidationResult.html": {
    "href": "api/Raftel.Domain.Validators.ValidationResult.html",
    "title": "Class ValidationResult | Raftel",
    "summary": "Class ValidationResult Represents the result of a validation process, containing any validation errors found. Inheritance object ValidationResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Raftel.Domain.Validators Assembly: Raftel.Domain.dll Syntax public class ValidationResult Properties | Edit this page View Source Errors Gets the collection of validation errors. Declaration public IReadOnlyList<Error> Errors { get; } Property Value Type Description IReadOnlyList<Error> | Edit this page View Source IsValid Gets a value indicating whether the validation passed without any errors. Declaration public bool IsValid { get; } Property Value Type Description bool Methods | Edit this page View Source Failure(IEnumerable<Error>) Creates a failed ValidationResult instance with the specified errors. Declaration public static ValidationResult Failure(IEnumerable<Error> errors) Parameters Type Name Description IEnumerable<Error> errors A collection of Error instances representing the validation failures. Returns Type Description ValidationResult A result representing a failed state with associated errors. | Edit this page View Source Success() Creates a successful ValidationResult instance with no errors. Declaration public static ValidationResult Success() Returns Type Description ValidationResult A result representing a valid state."
  },
  "api/Raftel.Domain.Validators.Validator-1.html": {
    "href": "api/Raftel.Domain.Validators.Validator-1.html",
    "title": "Class Validator<TModel> | Raftel",
    "summary": "Class Validator<TModel> Represents a base class for defining validation logic for a given model type. Allows registering validation rules through the EnsureThat(Func<TModel, bool>, Error) method, and executing them via the Validate(TModel) method. Inheritance object Validator<TModel> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Raftel.Domain.Validators Assembly: Raftel.Domain.dll Syntax public abstract class Validator<TModel> Type Parameters Name Description TModel The type of the model to validate. Methods | Edit this page View Source EnsureThat(Func<TModel, bool>, Error) Registers a validation rule for the model. The rule is executed when Validate(TModel) is called. Declaration protected void EnsureThat(Func<TModel, bool> func, Error error) Parameters Type Name Description Func<TModel, bool> func A predicate that should return true if the model is valid. Error error The error to associate with the rule if the predicate returns false. | Edit this page View Source Validate(TModel) Validates the specified model against all registered rules. Declaration public ValidationResult Validate(TModel model) Parameters Type Name Description TModel model The model instance to validate. Returns Type Description ValidationResult A ValidationResult representing the outcome of the validation. Returns success if no errors are found, otherwise returns a failure result with collected errors."
  },
  "api/Raftel.Domain.Validators.html": {
    "href": "api/Raftel.Domain.Validators.html",
    "title": "Namespace Raftel.Domain.Validators | Raftel",
    "summary": "Namespace Raftel.Domain.Validators Classes ValidationResult Represents the result of a validation process, containing any validation errors found. Validator<TModel> Represents a base class for defining validation logic for a given model type. Allows registering validation rules through the EnsureThat(Func<TModel, bool>, Error) method, and executing them via the Validate(TModel) method."
  },
  "api/Raftel.Infrastructure.Data.EfRepository-3.html": {
    "href": "api/Raftel.Infrastructure.Data.EfRepository-3.html",
    "title": "Class EfRepository<TDbContext, TEntity, TId> | Raftel",
    "summary": "Class EfRepository<TDbContext, TEntity, TId> Inheritance object EfRepository<TDbContext, TEntity, TId> Implements IRepository<TEntity, TId> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Raftel.Infrastructure.Data Assembly: Raftel.Infrastructure.dll Syntax public abstract class EfRepository<TDbContext, TEntity, TId> : IRepository<TEntity, TId> where TDbContext : RaftelDbContext<TDbContext> where TEntity : AggregateRoot<TId> where TId : TypedId<Guid> Type Parameters Name Description TDbContext TEntity TId Constructors | Edit this page View Source EfRepository(TDbContext) Declaration protected EfRepository(TDbContext dbContext) Parameters Type Name Description TDbContext dbContext Methods | Edit this page View Source AddAsync(TEntity, CancellationToken) Declaration public Task AddAsync(TEntity entity, CancellationToken cancellationToken = default) Parameters Type Name Description TEntity entity CancellationToken cancellationToken Returns Type Description Task | Edit this page View Source GetByIdAsync(TId, CancellationToken) Declaration public Task<TEntity?> GetByIdAsync(TId id, CancellationToken cancellationToken = default) Parameters Type Name Description TId id CancellationToken cancellationToken Returns Type Description Task<TEntity> | Edit this page View Source ListAllAsync(CancellationToken) Declaration public Task<List<TEntity>> ListAllAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task<List<TEntity>> | Edit this page View Source Remove(TEntity) Declaration public void Remove(TEntity entity) Parameters Type Name Description TEntity entity | Edit this page View Source Update(TEntity) Declaration public void Update(TEntity entity) Parameters Type Name Description TEntity entity Implements IRepository<TEntity, TId>"
  },
  "api/Raftel.Infrastructure.Data.RaftelDbContext-1.html": {
    "href": "api/Raftel.Infrastructure.Data.RaftelDbContext-1.html",
    "title": "Class RaftelDbContext<TDbContext> | Raftel",
    "summary": "Class RaftelDbContext<TDbContext> Inheritance object DbContext RaftelDbContext<TDbContext> Implements IInfrastructure<IServiceProvider> IDbContextDependencies IDbSetCache IDbContextPoolable IResettableService IDisposable IAsyncDisposable IUnitOfWork Inherited Members DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.OnConfiguring(DbContextOptionsBuilder) DbContext.ConfigureConventions(ModelConfigurationBuilder) DbContext.OnModelCreating(ModelBuilder) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Raftel.Infrastructure.Data Assembly: Raftel.Infrastructure.dll Syntax public abstract class RaftelDbContext<TDbContext> : DbContext, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable, IUnitOfWork where TDbContext : RaftelDbContext<TDbContext> Type Parameters Name Description TDbContext Constructors | Edit this page View Source RaftelDbContext(DbContextOptions<TDbContext>) Declaration protected RaftelDbContext(DbContextOptions<TDbContext> options) Parameters Type Name Description DbContextOptions<TDbContext> options Methods | Edit this page View Source CommitAsync(CancellationToken) Declaration public Task CommitAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task Implements IInfrastructure<T> IDbContextDependencies IDbSetCache IDbContextPoolable IResettableService IDisposable IAsyncDisposable IUnitOfWork"
  },
  "api/Raftel.Infrastructure.Data.html": {
    "href": "api/Raftel.Infrastructure.Data.html",
    "title": "Namespace Raftel.Infrastructure.Data | Raftel",
    "summary": "Namespace Raftel.Infrastructure.Data Classes EfRepository<TDbContext, TEntity, TId> RaftelDbContext<TDbContext>"
  },
  "api/Raftel.Infrastructure.DependencyInjection.html": {
    "href": "api/Raftel.Infrastructure.DependencyInjection.html",
    "title": "Class DependencyInjection | Raftel",
    "summary": "Class DependencyInjection Inheritance object DependencyInjection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Raftel.Infrastructure Assembly: Raftel.Infrastructure.dll Syntax public static class DependencyInjection Methods | Edit this page View Source AddRaftelData<TDbContext>(IServiceCollection, IConfiguration, string) Declaration public static IServiceCollection AddRaftelData<TDbContext>(this IServiceCollection services, IConfiguration configuration, string connectionStringName = \"DefaultConnection\") where TDbContext : RaftelDbContext<TDbContext> Parameters Type Name Description IServiceCollection services IConfiguration configuration string connectionStringName Returns Type Description IServiceCollection Type Parameters Name Description TDbContext"
  },
  "api/Raftel.Infrastructure.html": {
    "href": "api/Raftel.Infrastructure.html",
    "title": "Namespace Raftel.Infrastructure | Raftel",
    "summary": "Namespace Raftel.Infrastructure Classes DependencyInjection"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | Raftel",
    "summary": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | Raftel",
    "summary": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | Raftel",
    "summary": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}