{
  "README.html": {
    "href": "README.html",
    "title": "Raftel | Raftel",
    "summary": "Raftel Raftel is a training project. It's a small framework for building .NET Core applications, intended to be reused as a base for developing solutions that follow clean architecture and apply good coding practices. \uD83C\uDFAF Project Goals Serve as a learning environment to apply software development best practices. Practice methodologies and principles such as TDD, DDD, Object Calisthenics, and patterns like CQRS and Unit of Work. Provide an initial structure that facilitates scalability and code clarity. Avoid external library dependencies, favoring pure .NET solutions. ✨ Features Reusable foundation: designed to be the starting point for multiple .NET Core applications. Simple and extensible structure: clear project organization (cli/, src/, tests/) to support growth. Integrated testing: with code coverage and continuous integration from the start. Docker-ready development environment: quickly spin up dependencies like databases with a single command. No external dependencies: all code is built purely on the .NET platform, without additional frameworks. ⚙️ Requirements .NET SDK 9.0 or higher Docker (optional, but recommended for full development experience) \uD83D\uDCDA Documentation You can find the project documentation at: \uD83D\uDC49 franciscofsl.github.io/Raftel"
  },
  "api/Raftel.Api.Client.QueryFilter.html": {
    "href": "api/Raftel.Api.Client.QueryFilter.html",
    "title": "Class QueryFilter | Raftel",
    "summary": "Class QueryFilter Namespace Raftel.Api.Client Assembly Raftel.Api.Client.dll public sealed class QueryFilter Inheritance object QueryFilter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Methods Empty() public static QueryFilter Empty() Returns QueryFilter FromObject(object?) public static QueryFilter FromObject(object? parameters) Parameters parameters object Returns QueryFilter ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Raftel.Api.Client.html": {
    "href": "api/Raftel.Api.Client.html",
    "title": "Namespace Raftel.Api.Client | Raftel",
    "summary": "Namespace Raftel.Api.Client Classes QueryFilter"
  },
  "api/Raftel.Api.Server.AutoEndpoints.AutoEndpointGroupExtensions.html": {
    "href": "api/Raftel.Api.Server.AutoEndpoints.AutoEndpointGroupExtensions.html",
    "title": "Class AutoEndpointGroupExtensions | Raftel",
    "summary": "Class AutoEndpointGroupExtensions Namespace Raftel.Api.Server.AutoEndpoints Assembly Raftel.Api.Server.dll public static class AutoEndpointGroupExtensions Inheritance object AutoEndpointGroupExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddEndpointGroup(IEndpointRouteBuilder, Action<RouteOptions>) public static IEndpointRouteBuilder AddEndpointGroup(this IEndpointRouteBuilder app, Action<RouteOptions> configure) Parameters app IEndpointRouteBuilder configure Action<RouteOptions> Returns IEndpointRouteBuilder"
  },
  "api/Raftel.Api.Server.AutoEndpoints.CommandDefinition.html": {
    "href": "api/Raftel.Api.Server.AutoEndpoints.CommandDefinition.html",
    "title": "Class CommandDefinition | Raftel",
    "summary": "Class CommandDefinition Namespace Raftel.Api.Server.AutoEndpoints Assembly Raftel.Api.Server.dll public record CommandDefinition : IEquatable<CommandDefinition> Inheritance object CommandDefinition Implements IEquatable<CommandDefinition> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CommandDefinition(Type, string, HttpMethod) public CommandDefinition(Type Request, string Route, HttpMethod Method) Parameters Request Type Route string Method HttpMethod Properties Method public HttpMethod Method { get; init; } Property Value HttpMethod Request public Type Request { get; init; } Property Value Type Route public string Route { get; init; } Property Value string Methods AllowAnonymous() public CommandDefinition AllowAnonymous() Returns CommandDefinition"
  },
  "api/Raftel.Api.Server.AutoEndpoints.CommandEndpointMapper.html": {
    "href": "api/Raftel.Api.Server.AutoEndpoints.CommandEndpointMapper.html",
    "title": "Class CommandEndpointMapper | Raftel",
    "summary": "Class CommandEndpointMapper Namespace Raftel.Api.Server.AutoEndpoints Assembly Raftel.Api.Server.dll public static class CommandEndpointMapper Inheritance object CommandEndpointMapper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods MapCommandEndpoint<TCommand>(RouteGroupBuilder, CommandDefinition) public static void MapCommandEndpoint<TCommand>(RouteGroupBuilder group, CommandDefinition command) where TCommand : ICommand Parameters group RouteGroupBuilder command CommandDefinition Type Parameters TCommand"
  },
  "api/Raftel.Api.Server.AutoEndpoints.QueryDefinition.html": {
    "href": "api/Raftel.Api.Server.AutoEndpoints.QueryDefinition.html",
    "title": "Class QueryDefinition | Raftel",
    "summary": "Class QueryDefinition Namespace Raftel.Api.Server.AutoEndpoints Assembly Raftel.Api.Server.dll public record QueryDefinition : IEquatable<QueryDefinition> Inheritance object QueryDefinition Implements IEquatable<QueryDefinition> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors QueryDefinition(Type, Type, string, HttpMethod) public QueryDefinition(Type Request, Type Result, string Route, HttpMethod Method) Parameters Request Type Result Type Route string Method HttpMethod Properties Method public HttpMethod Method { get; init; } Property Value HttpMethod Request public Type Request { get; init; } Property Value Type Result public Type Result { get; init; } Property Value Type Route public string Route { get; init; } Property Value string"
  },
  "api/Raftel.Api.Server.AutoEndpoints.QueryEndpointMapper.html": {
    "href": "api/Raftel.Api.Server.AutoEndpoints.QueryEndpointMapper.html",
    "title": "Class QueryEndpointMapper | Raftel",
    "summary": "Class QueryEndpointMapper Namespace Raftel.Api.Server.AutoEndpoints Assembly Raftel.Api.Server.dll public static class QueryEndpointMapper Inheritance object QueryEndpointMapper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods MapQueryEndpoint<TRequest, TResult>(RouteGroupBuilder, string, HttpMethod) public static void MapQueryEndpoint<TRequest, TResult>(RouteGroupBuilder group, string route, HttpMethod method) where TRequest : IQuery<TResult> Parameters group RouteGroupBuilder route string method HttpMethod Type Parameters TRequest TResult"
  },
  "api/Raftel.Api.Server.AutoEndpoints.RouteOptions.html": {
    "href": "api/Raftel.Api.Server.AutoEndpoints.RouteOptions.html",
    "title": "Class RouteOptions | Raftel",
    "summary": "Class RouteOptions Namespace Raftel.Api.Server.AutoEndpoints Assembly Raftel.Api.Server.dll public sealed class RouteOptions Inheritance object RouteOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties BaseUri public string BaseUri { get; set; } Property Value string Name public string Name { get; set; } Property Value string Methods AddCommand<TRequest>(string, HttpMethod) public CommandDefinition AddCommand<TRequest>(string route, HttpMethod method) where TRequest : ICommand Parameters route string method HttpMethod Returns CommandDefinition Type Parameters TRequest AddQuery<TRequest, TResult>(string, HttpMethod) public RouteOptions AddQuery<TRequest, TResult>(string route, HttpMethod method) where TRequest : IQuery<TResult> Parameters route string method HttpMethod Returns RouteOptions Type Parameters TRequest TResult"
  },
  "api/Raftel.Api.Server.AutoEndpoints.html": {
    "href": "api/Raftel.Api.Server.AutoEndpoints.html",
    "title": "Namespace Raftel.Api.Server.AutoEndpoints | Raftel",
    "summary": "Namespace Raftel.Api.Server.AutoEndpoints Classes AutoEndpointGroupExtensions CommandDefinition CommandEndpointMapper QueryDefinition QueryEndpointMapper RouteOptions"
  },
  "api/Raftel.Api.Server.Features.Users.AuthorizationController.html": {
    "href": "api/Raftel.Api.Server.Features.Users.AuthorizationController.html",
    "title": "Class AuthorizationController | Raftel",
    "summary": "Class AuthorizationController Namespace Raftel.Api.Server.Features.Users Assembly Raftel.Api.Server.dll [ApiController] public class AuthorizationController : Controller, IActionFilter, IAsyncActionFilter, IFilterMetadata, IDisposable Inheritance object ControllerBase Controller AuthorizationController Implements IActionFilter IAsyncActionFilter IFilterMetadata IDisposable Inherited Members Controller.View() Controller.View(string) Controller.View(object) Controller.View(string, object) Controller.PartialView() Controller.PartialView(string) Controller.PartialView(object) Controller.PartialView(string, object) Controller.ViewComponent(string) Controller.ViewComponent(Type) Controller.ViewComponent(string, object) Controller.ViewComponent(Type, object) Controller.Json(object) Controller.Json(object, object) Controller.OnActionExecuting(ActionExecutingContext) Controller.OnActionExecuted(ActionExecutedContext) Controller.OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) Controller.Dispose() Controller.Dispose(bool) Controller.ViewData Controller.TempData Controller.ViewBag ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AuthorizationController(IQueryDispatcher) public AuthorizationController(IQueryDispatcher dispatcher) Parameters dispatcher IQueryDispatcher Methods Exchange() [HttpPost(\"~/connect/token\")] [Produces(\"application/json\", new string[] { })] [AllowAnonymous] public Task<IActionResult> Exchange() Returns Task<IActionResult>"
  },
  "api/Raftel.Api.Server.Features.Users.UsersDependencyInjection.html": {
    "href": "api/Raftel.Api.Server.Features.Users.UsersDependencyInjection.html",
    "title": "Class UsersDependencyInjection | Raftel",
    "summary": "Class UsersDependencyInjection Namespace Raftel.Api.Server.Features.Users Assembly Raftel.Api.Server.dll public static class UsersDependencyInjection Inheritance object UsersDependencyInjection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddRaftelUsers(IEndpointRouteBuilder) public static IEndpointRouteBuilder AddRaftelUsers(this IEndpointRouteBuilder app) Parameters app IEndpointRouteBuilder Returns IEndpointRouteBuilder"
  },
  "api/Raftel.Api.Server.Features.Users.html": {
    "href": "api/Raftel.Api.Server.Features.Users.html",
    "title": "Namespace Raftel.Api.Server.Features.Users | Raftel",
    "summary": "Namespace Raftel.Api.Server.Features.Users Classes AuthorizationController UsersDependencyInjection"
  },
  "api/Raftel.Application.Abstractions.Authentication.IAuthenticationService.html": {
    "href": "api/Raftel.Application.Abstractions.Authentication.IAuthenticationService.html",
    "title": "Interface IAuthenticationService | Raftel",
    "summary": "Interface IAuthenticationService Namespace Raftel.Application.Abstractions.Authentication Assembly Raftel.Application.dll public interface IAuthenticationService Methods LogInAsync(string, string, CancellationToken) Task<Result<LogInResult>> LogInAsync(string email, string password, CancellationToken cancellationToken = default) Parameters email string password string cancellationToken CancellationToken Returns Task<Result<LogInResult>> RegisterAsync(User, string, CancellationToken) Task<Result> RegisterAsync(User user, string password, CancellationToken cancellationToken = default) Parameters user User password string cancellationToken CancellationToken Returns Task<Result>"
  },
  "api/Raftel.Application.Abstractions.Authentication.ICurrentUser.html": {
    "href": "api/Raftel.Application.Abstractions.Authentication.ICurrentUser.html",
    "title": "Interface ICurrentUser | Raftel",
    "summary": "Interface ICurrentUser Namespace Raftel.Application.Abstractions.Authentication Assembly Raftel.Application.dll public interface ICurrentUser Properties IsAuthenticated bool IsAuthenticated { get; } Property Value bool Roles IEnumerable<string> Roles { get; } Property Value IEnumerable<string> UserId Guid? UserId { get; } Property Value Guid? UserName string? UserName { get; } Property Value string"
  },
  "api/Raftel.Application.Abstractions.Authentication.html": {
    "href": "api/Raftel.Application.Abstractions.Authentication.html",
    "title": "Namespace Raftel.Application.Abstractions.Authentication | Raftel",
    "summary": "Namespace Raftel.Application.Abstractions.Authentication Interfaces IAuthenticationService ICurrentUser"
  },
  "api/Raftel.Application.Abstractions.IRequest-1.html": {
    "href": "api/Raftel.Application.Abstractions.IRequest-1.html",
    "title": "Interface IRequest<TResponse> | Raftel",
    "summary": "Interface IRequest<TResponse> Namespace Raftel.Application.Abstractions Assembly Raftel.Application.dll Represents a request that produces a response of type TResponse. public interface IRequest<TResponse> Type Parameters TResponse The type of response expected from the request."
  },
  "api/Raftel.Application.Abstractions.IRequestDispatcher.html": {
    "href": "api/Raftel.Application.Abstractions.IRequestDispatcher.html",
    "title": "Interface IRequestDispatcher | Raftel",
    "summary": "Interface IRequestDispatcher Namespace Raftel.Application.Abstractions Assembly Raftel.Application.dll Dispatches requests through the pipeline and to their associated handler. public interface IRequestDispatcher Methods DispatchAsync<TRequest, TResponse>(TRequest) Dispatches the given request and returns the result asynchronously. Task<TResponse> DispatchAsync<TRequest, TResponse>(TRequest request) where TRequest : IRequest<TResponse> Parameters request TRequest The request to dispatch. Returns Task<TResponse> The result returned from the request handler or middleware. Type Parameters TRequest The type of the request. TResponse The type of the response."
  },
  "api/Raftel.Application.Abstractions.IRequestHandler-2.html": {
    "href": "api/Raftel.Application.Abstractions.IRequestHandler-2.html",
    "title": "Interface IRequestHandler<TRequest, TResponse> | Raftel",
    "summary": "Interface IRequestHandler<TRequest, TResponse> Namespace Raftel.Application.Abstractions Assembly Raftel.Application.dll Defines a handler that processes a request of type TRequest and returns a response of type TResponse. public interface IRequestHandler<TRequest, TResponse> where TRequest : IRequest<TResponse> Type Parameters TRequest The type of the request. TResponse The type of the response. Methods HandleAsync(TRequest, CancellationToken) Handles the given request asynchronously. Task<TResponse> HandleAsync(TRequest request, CancellationToken token = default) Parameters request TRequest The request to process. token CancellationToken Returns Task<TResponse> A task representing the asynchronous operation, containing the response."
  },
  "api/Raftel.Application.Abstractions.RequestDispatcher.html": {
    "href": "api/Raftel.Application.Abstractions.RequestDispatcher.html",
    "title": "Class RequestDispatcher | Raftel",
    "summary": "Class RequestDispatcher Namespace Raftel.Application.Abstractions Assembly Raftel.Application.dll Default implementation of IRequestDispatcher that resolves the request handler and middleware pipeline from the dependency injection container. public class RequestDispatcher : IRequestDispatcher Inheritance object RequestDispatcher Implements IRequestDispatcher Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RequestDispatcher(IServiceProvider) Default implementation of IRequestDispatcher that resolves the request handler and middleware pipeline from the dependency injection container. public RequestDispatcher(IServiceProvider serviceProvider) Parameters serviceProvider IServiceProvider Methods DispatchAsync<TRequest, TResponse>(TRequest) Dispatches the given request and returns the result asynchronously. public Task<TResponse> DispatchAsync<TRequest, TResponse>(TRequest request) where TRequest : IRequest<TResponse> Parameters request TRequest The request to dispatch. Returns Task<TResponse> The result returned from the request handler or middleware. Type Parameters TRequest The type of the request. TResponse The type of the response."
  },
  "api/Raftel.Application.Abstractions.RequestHandlerDelegate-1.html": {
    "href": "api/Raftel.Application.Abstractions.RequestHandlerDelegate-1.html",
    "title": "Delegate RequestHandlerDelegate<TResponse> | Raftel",
    "summary": "Delegate RequestHandlerDelegate<TResponse> Namespace Raftel.Application.Abstractions Assembly Raftel.Application.dll Delegate that represents the next handler or middleware in the request processing pipeline. public delegate Task<TResponse> RequestHandlerDelegate<TResponse>() Returns Task<TResponse> The asynchronous result of the request pipeline execution. Type Parameters TResponse The type of response expected."
  },
  "api/Raftel.Application.Abstractions.html": {
    "href": "api/Raftel.Application.Abstractions.html",
    "title": "Namespace Raftel.Application.Abstractions | Raftel",
    "summary": "Namespace Raftel.Application.Abstractions Classes RequestDispatcher Default implementation of IRequestDispatcher that resolves the request handler and middleware pipeline from the dependency injection container. Interfaces IRequestDispatcher Dispatches requests through the pipeline and to their associated handler. IRequestHandler<TRequest, TResponse> Defines a handler that processes a request of type TRequest and returns a response of type TResponse. IRequest<TResponse> Represents a request that produces a response of type TResponse. Delegates RequestHandlerDelegate<TResponse> Delegate that represents the next handler or middleware in the request processing pipeline."
  },
  "api/Raftel.Application.Commands.CommandDispatcher.html": {
    "href": "api/Raftel.Application.Commands.CommandDispatcher.html",
    "title": "Class CommandDispatcher | Raftel",
    "summary": "Class CommandDispatcher Namespace Raftel.Application.Commands Assembly Raftel.Application.dll Default implementation of ICommandDispatcher that delegates command execution to the IRequestDispatcher infrastructure. public class CommandDispatcher : ICommandDispatcher Inheritance object CommandDispatcher Implements ICommandDispatcher Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CommandDispatcher(IRequestDispatcher) Default implementation of ICommandDispatcher that delegates command execution to the IRequestDispatcher infrastructure. public CommandDispatcher(IRequestDispatcher dispatcher) Parameters dispatcher IRequestDispatcher Methods DispatchAsync<TCommand>(TCommand, CancellationToken) Dispatches a command asynchronously. public Task<Result> DispatchAsync<TCommand>(TCommand command, CancellationToken token = default) where TCommand : ICommand Parameters command TCommand The command instance to process. token CancellationToken Returns Task<Result> A Result representing the outcome of the command execution. Type Parameters TCommand The type of command to dispatch."
  },
  "api/Raftel.Application.Commands.ICommand.html": {
    "href": "api/Raftel.Application.Commands.ICommand.html",
    "title": "Interface ICommand | Raftel",
    "summary": "Interface ICommand Namespace Raftel.Application.Commands Assembly Raftel.Application.dll Represents a command that does not return a value other than a Result. public interface ICommand : IRequest<Result>"
  },
  "api/Raftel.Application.Commands.ICommandDispatcher.html": {
    "href": "api/Raftel.Application.Commands.ICommandDispatcher.html",
    "title": "Interface ICommandDispatcher | Raftel",
    "summary": "Interface ICommandDispatcher Namespace Raftel.Application.Commands Assembly Raftel.Application.dll Dispatches a command to its corresponding handler. public interface ICommandDispatcher Methods DispatchAsync<TCommand>(TCommand, CancellationToken) Dispatches a command asynchronously. Task<Result> DispatchAsync<TCommand>(TCommand command, CancellationToken token = default) where TCommand : ICommand Parameters command TCommand The command instance to process. token CancellationToken Returns Task<Result> A Result representing the outcome of the command execution. Type Parameters TCommand The type of command to dispatch."
  },
  "api/Raftel.Application.Commands.ICommandHandler-1.html": {
    "href": "api/Raftel.Application.Commands.ICommandHandler-1.html",
    "title": "Interface ICommandHandler<TCommand> | Raftel",
    "summary": "Interface ICommandHandler<TCommand> Namespace Raftel.Application.Commands Assembly Raftel.Application.dll Defines a handler for processing a command of type TCommand. public interface ICommandHandler<TCommand> : IRequestHandler<TCommand, Result> where TCommand : ICommand Type Parameters TCommand The type of command to handle. Inherited Members IRequestHandler<TCommand, Result>.HandleAsync(TCommand, CancellationToken)"
  },
  "api/Raftel.Application.Commands.html": {
    "href": "api/Raftel.Application.Commands.html",
    "title": "Namespace Raftel.Application.Commands | Raftel",
    "summary": "Namespace Raftel.Application.Commands Classes CommandDispatcher Default implementation of ICommandDispatcher that delegates command execution to the IRequestDispatcher infrastructure. Interfaces ICommand Represents a command that does not return a value other than a Result. ICommandDispatcher Dispatches a command to its corresponding handler. ICommandHandler<TCommand> Defines a handler for processing a command of type TCommand."
  },
  "api/Raftel.Application.DependencyInjection.html": {
    "href": "api/Raftel.Application.DependencyInjection.html",
    "title": "Class DependencyInjection | Raftel",
    "summary": "Class DependencyInjection Namespace Raftel.Application Assembly Raftel.Application.dll public static class DependencyInjection Inheritance object DependencyInjection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddRaftelApplication(IServiceCollection, Action<IRaftelApplicationBuilder>) public static void AddRaftelApplication(this IServiceCollection services, Action<IRaftelApplicationBuilder> configure) Parameters services IServiceCollection configure Action<IRaftelApplicationBuilder>"
  },
  "api/Raftel.Application.Exceptions.ValidationException.html": {
    "href": "api/Raftel.Application.Exceptions.ValidationException.html",
    "title": "Class ValidationException | Raftel",
    "summary": "Class ValidationException Namespace Raftel.Application.Exceptions Assembly Raftel.Application.dll Exception thrown when a validation process fails. public class ValidationException : Exception, ISerializable Inheritance object Exception ValidationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ValidationException(IEnumerable<Error>) Exception thrown when a validation process fails. public ValidationException(IEnumerable<Error> errors) Parameters errors IEnumerable<Error> Properties Errors public IReadOnlyList<Error> Errors { get; } Property Value IReadOnlyList<Error> Methods ToString() Creates and returns a string representation of the current exception. public override string ToString() Returns string A string representation of the current exception."
  },
  "api/Raftel.Application.Exceptions.html": {
    "href": "api/Raftel.Application.Exceptions.html",
    "title": "Namespace Raftel.Application.Exceptions | Raftel",
    "summary": "Namespace Raftel.Application.Exceptions Classes ValidationException Exception thrown when a validation process fails."
  },
  "api/Raftel.Application.Features.Users.GetUserProfile.GetUserProfileQuery.html": {
    "href": "api/Raftel.Application.Features.Users.GetUserProfile.GetUserProfileQuery.html",
    "title": "Class GetUserProfileQuery | Raftel",
    "summary": "Class GetUserProfileQuery Namespace Raftel.Application.Features.Users.GetUserProfile Assembly Raftel.Application.dll public sealed record GetUserProfileQuery : IQuery<GetUserProfileResponse>, IRequest<Result<GetUserProfileResponse>>, IEquatable<GetUserProfileQuery> Inheritance object GetUserProfileQuery Implements IQuery<GetUserProfileResponse> IRequest<Result<GetUserProfileResponse>> IEquatable<GetUserProfileQuery> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors GetUserProfileQuery() public GetUserProfileQuery()"
  },
  "api/Raftel.Application.Features.Users.GetUserProfile.GetUserProfileResponse.html": {
    "href": "api/Raftel.Application.Features.Users.GetUserProfile.GetUserProfileResponse.html",
    "title": "Class GetUserProfileResponse | Raftel",
    "summary": "Class GetUserProfileResponse Namespace Raftel.Application.Features.Users.GetUserProfile Assembly Raftel.Application.dll public sealed class GetUserProfileResponse Inheritance object GetUserProfileResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties IsAuthenticated public bool IsAuthenticated { get; set; } Property Value bool Roles public IEnumerable<string> Roles { get; set; } Property Value IEnumerable<string> UserId public Guid UserId { get; set; } Property Value Guid UserName public string UserName { get; set; } Property Value string"
  },
  "api/Raftel.Application.Features.Users.GetUserProfile.html": {
    "href": "api/Raftel.Application.Features.Users.GetUserProfile.html",
    "title": "Namespace Raftel.Application.Features.Users.GetUserProfile | Raftel",
    "summary": "Namespace Raftel.Application.Features.Users.GetUserProfile Classes GetUserProfileQuery GetUserProfileResponse"
  },
  "api/Raftel.Application.Features.Users.LogInUser.LogInResult.html": {
    "href": "api/Raftel.Application.Features.Users.LogInUser.LogInResult.html",
    "title": "Class LogInResult | Raftel",
    "summary": "Class LogInResult Namespace Raftel.Application.Features.Users.LogInUser Assembly Raftel.Application.dll public sealed record LogInResult : IEquatable<LogInResult> Inheritance object LogInResult Implements IEquatable<LogInResult> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors LogInResult(ClaimsPrincipal, string) public LogInResult(ClaimsPrincipal ClaimsPrincipal, string Scheme) Parameters ClaimsPrincipal ClaimsPrincipal Scheme string Properties ClaimsPrincipal public ClaimsPrincipal ClaimsPrincipal { get; init; } Property Value ClaimsPrincipal Scheme public string Scheme { get; init; } Property Value string"
  },
  "api/Raftel.Application.Features.Users.LogInUser.LogInUserQuery.html": {
    "href": "api/Raftel.Application.Features.Users.LogInUser.LogInUserQuery.html",
    "title": "Class LogInUserQuery | Raftel",
    "summary": "Class LogInUserQuery Namespace Raftel.Application.Features.Users.LogInUser Assembly Raftel.Application.dll public sealed record LogInUserQuery : IQuery<LogInUserResponse>, IRequest<Result<LogInUserResponse>>, IEquatable<LogInUserQuery> Inheritance object LogInUserQuery Implements IQuery<LogInUserResponse> IRequest<Result<LogInUserResponse>> IEquatable<LogInUserQuery> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors LogInUserQuery(string, string) public LogInUserQuery(string Email, string Password) Parameters Email string Password string Properties Email public string Email { get; init; } Property Value string Password public string Password { get; init; } Property Value string"
  },
  "api/Raftel.Application.Features.Users.LogInUser.LogInUserResponse.html": {
    "href": "api/Raftel.Application.Features.Users.LogInUser.LogInUserResponse.html",
    "title": "Class LogInUserResponse | Raftel",
    "summary": "Class LogInUserResponse Namespace Raftel.Application.Features.Users.LogInUser Assembly Raftel.Application.dll public sealed record LogInUserResponse : IEquatable<LogInUserResponse> Inheritance object LogInUserResponse Implements IEquatable<LogInUserResponse> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors LogInUserResponse(ClaimsPrincipal, string) public LogInUserResponse(ClaimsPrincipal Claims, string Scheme) Parameters Claims ClaimsPrincipal Scheme string Properties Claims public ClaimsPrincipal Claims { get; init; } Property Value ClaimsPrincipal Scheme public string Scheme { get; init; } Property Value string"
  },
  "api/Raftel.Application.Features.Users.LogInUser.html": {
    "href": "api/Raftel.Application.Features.Users.LogInUser.html",
    "title": "Namespace Raftel.Application.Features.Users.LogInUser | Raftel",
    "summary": "Namespace Raftel.Application.Features.Users.LogInUser Classes LogInResult LogInUserQuery LogInUserResponse"
  },
  "api/Raftel.Application.Features.Users.RegisterUser.RegisterUserCommand.html": {
    "href": "api/Raftel.Application.Features.Users.RegisterUser.RegisterUserCommand.html",
    "title": "Class RegisterUserCommand | Raftel",
    "summary": "Class RegisterUserCommand Namespace Raftel.Application.Features.Users.RegisterUser Assembly Raftel.Application.dll public sealed record RegisterUserCommand : ICommand, IRequest<Result>, IEquatable<RegisterUserCommand> Inheritance object RegisterUserCommand Implements ICommand IRequest<Result> IEquatable<RegisterUserCommand> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors RegisterUserCommand(string, string) public RegisterUserCommand(string Email, string Password) Parameters Email string Password string Properties Email public string Email { get; init; } Property Value string Password public string Password { get; init; } Property Value string"
  },
  "api/Raftel.Application.Features.Users.RegisterUser.RegisterUserCommandValidator.html": {
    "href": "api/Raftel.Application.Features.Users.RegisterUser.RegisterUserCommandValidator.html",
    "title": "Class RegisterUserCommandValidator | Raftel",
    "summary": "Class RegisterUserCommandValidator Namespace Raftel.Application.Features.Users.RegisterUser Assembly Raftel.Application.dll public sealed class RegisterUserCommandValidator : Validator<RegisterUserCommand> Inheritance object Validator<RegisterUserCommand> RegisterUserCommandValidator Inherited Members Validator<RegisterUserCommand>.Validate(RegisterUserCommand) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors RegisterUserCommandValidator() public RegisterUserCommandValidator()"
  },
  "api/Raftel.Application.Features.Users.RegisterUser.html": {
    "href": "api/Raftel.Application.Features.Users.RegisterUser.html",
    "title": "Namespace Raftel.Application.Features.Users.RegisterUser | Raftel",
    "summary": "Namespace Raftel.Application.Features.Users.RegisterUser Classes RegisterUserCommand RegisterUserCommandValidator"
  },
  "api/Raftel.Application.IRaftelApplicationBuilder.html": {
    "href": "api/Raftel.Application.IRaftelApplicationBuilder.html",
    "title": "Interface IRaftelApplicationBuilder | Raftel",
    "summary": "Interface IRaftelApplicationBuilder Namespace Raftel.Application Assembly Raftel.Application.dll Defines the contract for building and configuring the application by registering services and middleware components. public interface IRaftelApplicationBuilder Methods AddCommandMiddleware(Type) Adds a middleware type specific to command handling to the application pipeline. void AddCommandMiddleware(Type middleware) Parameters middleware Type The type of the middleware to add. AddGlobalMiddleware(Type) Adds a global middleware type to the application pipeline. void AddGlobalMiddleware(Type middleware) Parameters middleware Type The type of the middleware to add. AddQueryMiddleware(Type) Adds a middleware type specific to query handling to the application pipeline. void AddQueryMiddleware(Type openMiddleware) Parameters openMiddleware Type The type of the middleware to add. RegisterServicesFromAssembly(Assembly) Registers all services from the specified assembly. void RegisterServicesFromAssembly(Assembly assembly) Parameters assembly Assembly The assembly containing the services to register."
  },
  "api/Raftel.Application.IUnitOfWork.html": {
    "href": "api/Raftel.Application.IUnitOfWork.html",
    "title": "Interface IUnitOfWork | Raftel",
    "summary": "Interface IUnitOfWork Namespace Raftel.Application Assembly Raftel.Application.dll Represents a unit of work that encapsulates a series of operations to be committed as a single transaction. public interface IUnitOfWork Methods CommitAsync(CancellationToken) Commits all changes made within the unit of work asynchronously. Task CommitAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken A token to monitor for cancellation requests. Defaults to None. Returns Task A task that represents the asynchronous commit operation."
  },
  "api/Raftel.Application.Middlewares.ICommandMiddleware-1.html": {
    "href": "api/Raftel.Application.Middlewares.ICommandMiddleware-1.html",
    "title": "Interface ICommandMiddleware<TRequest> | Raftel",
    "summary": "Interface ICommandMiddleware<TRequest> Namespace Raftel.Application.Middlewares Assembly Raftel.Application.dll Represents a middleware specific to command handling in the request pipeline. Inherits from IGlobalMiddleware<TRequest, TResponse> with a fixed response type of Result. public interface ICommandMiddleware<TRequest> : IGlobalMiddleware<TRequest, Result> where TRequest : ICommand Type Parameters TRequest The type of the command request. Inherited Members IGlobalMiddleware<TRequest, Result>.HandleAsync(TRequest, RequestHandlerDelegate<Result>)"
  },
  "api/Raftel.Application.Middlewares.IGlobalMiddleware-2.html": {
    "href": "api/Raftel.Application.Middlewares.IGlobalMiddleware-2.html",
    "title": "Interface IGlobalMiddleware<TRequest, TResponse> | Raftel",
    "summary": "Interface IGlobalMiddleware<TRequest, TResponse> Namespace Raftel.Application.Middlewares Assembly Raftel.Application.dll Represents a middleware component in the request pipeline that can intercept and modify the processing of a request before and/or after the next component is invoked. public interface IGlobalMiddleware<TRequest, TResponse> where TRequest : IRequest<TResponse> Type Parameters TRequest The type of the request. TResponse The type of the response. Methods HandleAsync(TRequest, RequestHandlerDelegate<TResponse>) Processes the request and optionally calls the next delegate in the pipeline. Task<TResponse> HandleAsync(TRequest request, RequestHandlerDelegate<TResponse> next) Parameters request TRequest The request instance. next RequestHandlerDelegate<TResponse> The next handler in the pipeline. Returns Task<TResponse> A task containing the result of the request."
  },
  "api/Raftel.Application.Middlewares.IQueryMiddleware-2.html": {
    "href": "api/Raftel.Application.Middlewares.IQueryMiddleware-2.html",
    "title": "Interface IQueryMiddleware<TRequest, TResponse> | Raftel",
    "summary": "Interface IQueryMiddleware<TRequest, TResponse> Namespace Raftel.Application.Middlewares Assembly Raftel.Application.dll Represents a middleware specific to query handling in the request pipeline. Inherits from IGlobalMiddleware<TRequest, TResponse> with a response type of Result<TValue>. public interface IQueryMiddleware<TRequest, TResponse> : IGlobalMiddleware<TRequest, Result<TResponse>> where TRequest : IQuery<TResponse> Type Parameters TRequest The type of the query request. TResponse The type of the query response. Inherited Members IGlobalMiddleware<TRequest, Result<TResponse>>.HandleAsync(TRequest, RequestHandlerDelegate<Result<TResponse>>)"
  },
  "api/Raftel.Application.Middlewares.UnitOfWorkMiddleware-1.html": {
    "href": "api/Raftel.Application.Middlewares.UnitOfWorkMiddleware-1.html",
    "title": "Class UnitOfWorkMiddleware<TRequest> | Raftel",
    "summary": "Class UnitOfWorkMiddleware<TRequest> Namespace Raftel.Application.Middlewares Assembly Raftel.Application.dll Middleware that ensures a unit of work is committed only if the preceding operation was successful. public class UnitOfWorkMiddleware<TRequest> : ICommandMiddleware<TRequest>, IGlobalMiddleware<TRequest, Result> where TRequest : ICommand Type Parameters TRequest The type of the request implementing ICommand. Inheritance object UnitOfWorkMiddleware<TRequest> Implements ICommandMiddleware<TRequest> IGlobalMiddleware<TRequest, Result> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UnitOfWorkMiddleware(IUnitOfWork) Middleware that ensures a unit of work is committed only if the preceding operation was successful. public UnitOfWorkMiddleware(IUnitOfWork unitOfWork) Parameters unitOfWork IUnitOfWork The unit of work instance used to perform the commit. Methods HandleAsync(TRequest, RequestHandlerDelegate<Result>) Handles the request by executing the next delegate in the middleware pipeline and commits the unit of work if the result is successful. public Task<Result> HandleAsync(TRequest request, RequestHandlerDelegate<Result> next) Parameters request TRequest The request being processed. next RequestHandlerDelegate<Result> The delegate representing the next middleware or handler in the pipeline. Returns Task<Result> A Result indicating the outcome of the operation."
  },
  "api/Raftel.Application.Middlewares.ValidationMiddleware-2.html": {
    "href": "api/Raftel.Application.Middlewares.ValidationMiddleware-2.html",
    "title": "Class ValidationMiddleware<TRequest, TResponse> | Raftel",
    "summary": "Class ValidationMiddleware<TRequest, TResponse> Namespace Raftel.Application.Middlewares Assembly Raftel.Application.dll Middleware that performs validation on the incoming request using all registered Validator<TModel> instances. If any validation rule fails, a ValidationException is thrown and the request pipeline is halted. public class ValidationMiddleware<TRequest, TResponse> : IGlobalMiddleware<TRequest, TResponse> where TRequest : IRequest<TResponse> Type Parameters TRequest The type of the request being validated. TResponse The type of the expected response. Inheritance object ValidationMiddleware<TRequest, TResponse> Implements IGlobalMiddleware<TRequest, TResponse> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ValidationMiddleware(IEnumerable<Validator<TRequest>>) Middleware that performs validation on the incoming request using all registered Validator<TModel> instances. If any validation rule fails, a ValidationException is thrown and the request pipeline is halted. public ValidationMiddleware(IEnumerable<Validator<TRequest>> validators) Parameters validators IEnumerable<Validator<TRequest>> A collection of validators for the given TRequest. Methods HandleAsync(TRequest, RequestHandlerDelegate<TResponse>) Handles the request by validating it before invoking the next delegate in the pipeline. If validation passes, the request continues to the next handler. If validation fails, a ValidationException is thrown containing all errors. public Task<TResponse> HandleAsync(TRequest request, RequestHandlerDelegate<TResponse> next) Parameters request TRequest The request to validate. next RequestHandlerDelegate<TResponse> The delegate representing the next middleware or handler in the pipeline. Returns Task<TResponse> The response returned by the next handler, if validation succeeds. Exceptions ValidationException Thrown when one or more validation rules fail."
  },
  "api/Raftel.Application.Middlewares.html": {
    "href": "api/Raftel.Application.Middlewares.html",
    "title": "Namespace Raftel.Application.Middlewares | Raftel",
    "summary": "Namespace Raftel.Application.Middlewares Classes UnitOfWorkMiddleware<TRequest> Middleware that ensures a unit of work is committed only if the preceding operation was successful. ValidationMiddleware<TRequest, TResponse> Middleware that performs validation on the incoming request using all registered Validator<TModel> instances. If any validation rule fails, a ValidationException is thrown and the request pipeline is halted. Interfaces ICommandMiddleware<TRequest> Represents a middleware specific to command handling in the request pipeline. Inherits from IGlobalMiddleware<TRequest, TResponse> with a fixed response type of Result. IGlobalMiddleware<TRequest, TResponse> Represents a middleware component in the request pipeline that can intercept and modify the processing of a request before and/or after the next component is invoked. IQueryMiddleware<TRequest, TResponse> Represents a middleware specific to query handling in the request pipeline. Inherits from IGlobalMiddleware<TRequest, TResponse> with a response type of Result<TValue>."
  },
  "api/Raftel.Application.Queries.IQuery-1.html": {
    "href": "api/Raftel.Application.Queries.IQuery-1.html",
    "title": "Interface IQuery<TResult> | Raftel",
    "summary": "Interface IQuery<TResult> Namespace Raftel.Application.Queries Assembly Raftel.Application.dll Represents a query that returns a result of type TResult. public interface IQuery<TResult> : IRequest<Result<TResult>> Type Parameters TResult The type of the result produced by the query."
  },
  "api/Raftel.Application.Queries.IQueryDispatcher.html": {
    "href": "api/Raftel.Application.Queries.IQueryDispatcher.html",
    "title": "Interface IQueryDispatcher | Raftel",
    "summary": "Interface IQueryDispatcher Namespace Raftel.Application.Queries Assembly Raftel.Application.dll Dispatches a query to its corresponding handler and returns the result. public interface IQueryDispatcher Methods DispatchAsync<TQuery, TResult>(TQuery) Dispatches a query asynchronously and retrieves the result. Task<Result<TResult>> DispatchAsync<TQuery, TResult>(TQuery query) where TQuery : IQuery<TResult> Parameters query TQuery The query instance to process. Returns Task<Result<TResult>> A Result<TValue> representing the outcome of the query execution. Type Parameters TQuery The type of the query to dispatch. TResult The type of the result expected from the query."
  },
  "api/Raftel.Application.Queries.IQueryHandler-2.html": {
    "href": "api/Raftel.Application.Queries.IQueryHandler-2.html",
    "title": "Interface IQueryHandler<TQuery, TResult> | Raftel",
    "summary": "Interface IQueryHandler<TQuery, TResult> Namespace Raftel.Application.Queries Assembly Raftel.Application.dll Defines a handler for processing a query of type TQuery that returns a result of type TResult. public interface IQueryHandler<TQuery, TResult> : IRequestHandler<TQuery, Result<TResult>> where TQuery : IQuery<TResult> Type Parameters TQuery The type of the query to handle. TResult The type of the result produced by the query. Inherited Members IRequestHandler<TQuery, Result<TResult>>.HandleAsync(TQuery, CancellationToken)"
  },
  "api/Raftel.Application.Queries.QueryDispatcher.html": {
    "href": "api/Raftel.Application.Queries.QueryDispatcher.html",
    "title": "Class QueryDispatcher | Raftel",
    "summary": "Class QueryDispatcher Namespace Raftel.Application.Queries Assembly Raftel.Application.dll Default implementation of IQueryDispatcher that delegates query execution to the IRequestDispatcher infrastructure. public class QueryDispatcher : IQueryDispatcher Inheritance object QueryDispatcher Implements IQueryDispatcher Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors QueryDispatcher(IRequestDispatcher) Initializes a new instance of the QueryDispatcher class. public QueryDispatcher(IRequestDispatcher dispatcher) Parameters dispatcher IRequestDispatcher The internal dispatcher used to route queries. Methods DispatchAsync<TQuery, TResult>(TQuery) Dispatches a query asynchronously and retrieves the result. public Task<Result<TResult>> DispatchAsync<TQuery, TResult>(TQuery query) where TQuery : IQuery<TResult> Parameters query TQuery The query instance to process. Returns Task<Result<TResult>> A Result<TValue> representing the outcome of the query execution. Type Parameters TQuery The type of the query to dispatch. TResult The type of the result expected from the query."
  },
  "api/Raftel.Application.Queries.html": {
    "href": "api/Raftel.Application.Queries.html",
    "title": "Namespace Raftel.Application.Queries | Raftel",
    "summary": "Namespace Raftel.Application.Queries Classes QueryDispatcher Default implementation of IQueryDispatcher that delegates query execution to the IRequestDispatcher infrastructure. Interfaces IQueryDispatcher Dispatches a query to its corresponding handler and returns the result. IQueryHandler<TQuery, TResult> Defines a handler for processing a query of type TQuery that returns a result of type TResult. IQuery<TResult> Represents a query that returns a result of type TResult."
  },
  "api/Raftel.Application.RaftelApplicationBuilder.html": {
    "href": "api/Raftel.Application.RaftelApplicationBuilder.html",
    "title": "Class RaftelApplicationBuilder | Raftel",
    "summary": "Class RaftelApplicationBuilder Namespace Raftel.Application Assembly Raftel.Application.dll Builder class for configuring and registering application services, middlewares, and assemblies. public sealed class RaftelApplicationBuilder : IRaftelApplicationBuilder Inheritance object RaftelApplicationBuilder Implements IRaftelApplicationBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Assemblies Gets the list of assemblies registered in the application. public List<Assembly> Assemblies { get; } Property Value List<Assembly> CommandMiddlewares Gets the list of middleware types specific to command handling. public List<Type> CommandMiddlewares { get; } Property Value List<Type> GlobalMiddlewares Gets the list of globally registered middleware types. public List<Type> GlobalMiddlewares { get; } Property Value List<Type> QueryMiddlewares Gets the list of middleware types specific to query handling. public List<Type> QueryMiddlewares { get; } Property Value List<Type> Methods AddCommandMiddleware(Type) Adds a middleware type specific to command handling to the application. public void AddCommandMiddleware(Type openMiddleware) Parameters openMiddleware Type The type of the middleware to add. AddGlobalMiddleware(Type) Adds a global middleware type to the application. public void AddGlobalMiddleware(Type openMiddleware) Parameters openMiddleware Type The type of the middleware to add. AddQueryMiddleware(Type) Adds a middleware type specific to query handling to the application. public void AddQueryMiddleware(Type openMiddleware) Parameters openMiddleware Type The type of the middleware to add. RegisterServicesFromAssembly(Assembly) Registers all services from the specified assembly if it has not already been registered. public void RegisterServicesFromAssembly(Assembly assembly) Parameters assembly Assembly The assembly to register services from."
  },
  "api/Raftel.Application.html": {
    "href": "api/Raftel.Application.html",
    "title": "Namespace Raftel.Application | Raftel",
    "summary": "Namespace Raftel.Application Classes DependencyInjection RaftelApplicationBuilder Builder class for configuring and registering application services, middlewares, and assemblies. Interfaces IRaftelApplicationBuilder Defines the contract for building and configuring the application by registering services and middleware components. IUnitOfWork Represents a unit of work that encapsulates a series of operations to be committed as a single transaction."
  },
  "api/Raftel.Domain.Abstractions.Error.html": {
    "href": "api/Raftel.Domain.Abstractions.Error.html",
    "title": "Class Error | Raftel",
    "summary": "Class Error Namespace Raftel.Domain.Abstractions Assembly Raftel.Domain.dll Represents an error with a specific code and message. public record Error : IEquatable<Error> Inheritance object Error Implements IEquatable<Error> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Error(string, string) Represents an error with a specific code and message. public Error(string Code, string Message) Parameters Code string The unique code identifying the error. Message string The descriptive message of the error. Fields None Represents the absence of an error. public static Error None Field Value Error NullValue Represents an error indicating that a null value was provided. public static Error NullValue Field Value Error Properties Code The unique code identifying the error. public string Code { get; init; } Property Value string Message The descriptive message of the error. public string Message { get; init; } Property Value string"
  },
  "api/Raftel.Domain.Abstractions.IRepository-2.html": {
    "href": "api/Raftel.Domain.Abstractions.IRepository-2.html",
    "title": "Interface IRepository<TEntity, TId> | Raftel",
    "summary": "Interface IRepository<TEntity, TId> Namespace Raftel.Domain.Abstractions Assembly Raftel.Domain.dll Defines a generic repository interface for managing aggregate root entities. public interface IRepository<TEntity, in TId> where TEntity : AggregateRoot<in TId> where TId : TypedId<Guid> Type Parameters TEntity The type of the aggregate root entity. TId The type of the identifier for the aggregate root entity. Methods AddAsync(TEntity, CancellationToken) Adds a new entity to the repository asynchronously. Task AddAsync(TEntity entity, CancellationToken cancellationToken = default) Parameters entity TEntity The entity to add. cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task A task that represents the asynchronous operation. GetByIdAsync(TId, CancellationToken) Retrieves an entity by its identifier asynchronously. Task<TEntity?> GetByIdAsync(TId id, CancellationToken cancellationToken = default) Parameters id TId The identifier of the entity to retrieve. cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task<TEntity> A task that represents the asynchronous operation. The task result contains the entity if found, or null otherwise. ListAllAsync(CancellationToken) Retrieves all entities asynchronously. Task<List<TEntity>> ListAllAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task<List<TEntity>> A task that represents the asynchronous operation. The task result contains a list of all entities. Remove(TEntity) Removes an entity from the repository. void Remove(TEntity entity) Parameters entity TEntity The entity to remove. Update(TEntity) Updates an existing entity in the repository. void Update(TEntity entity) Parameters entity TEntity The entity to update."
  },
  "api/Raftel.Domain.Abstractions.Result-1.html": {
    "href": "api/Raftel.Domain.Abstractions.Result-1.html",
    "title": "Class Result<TValue> | Raftel",
    "summary": "Class Result<TValue> Namespace Raftel.Domain.Abstractions Assembly Raftel.Domain.dll Represents the result of an operation with a value. public class Result<TValue> : Result Type Parameters TValue The type of the value. Inheritance object Result Result<TValue> Inherited Members Result.IsSuccess Result.IsFailure Result.Error Result.Success() Result.Success<TValue>(TValue) Result.Failure<TValue>(Error) Result.Create<TValue>(TValue) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Result(TValue, bool, Error) Initializes a new instance of the Result<TValue> class. protected Result(TValue value, bool isSuccess, Error error) Parameters value TValue The value returned by the operation. isSuccess bool Indicates whether the operation was successful. error Error The error associated with the operation. Properties Value Gets the value returned by the operation, if successful. public TValue Value { get; } Property Value TValue Exceptions InvalidOperationException Thrown if the result represents a failure. Methods Failure(Error) Creates a failed result with the specified error. public static Result<TValue> Failure(Error error) Parameters error Error The error associated with the failure. Returns Result<TValue> A failed result. Success(TValue) Creates a successful result with the specified value. public static Result<TValue> Success(TValue value) Parameters value TValue The value returned by the operation. Returns Result<TValue> A successful result containing the value. Operators implicit operator Result<TValue>(TValue) Implicitly creates a result from the provided value. public static implicit operator Result<TValue>(TValue value) Parameters value TValue The value to create the result from. Returns Result<TValue>"
  },
  "api/Raftel.Domain.Abstractions.Result.html": {
    "href": "api/Raftel.Domain.Abstractions.Result.html",
    "title": "Class Result | Raftel",
    "summary": "Class Result Namespace Raftel.Domain.Abstractions Assembly Raftel.Domain.dll Represents the result of an operation, encapsulating success or failure information. public class Result Inheritance object Result Derived Result<TValue> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Result(bool, Error) Initializes a new instance of the Result class. protected Result(bool isSuccess, Error error) Parameters isSuccess bool Indicates whether the operation was successful. error Error The error associated with the operation, if any. Exceptions InvalidOperationException Thrown if the success state and error state are inconsistent. Properties Error Gets the error associated with the operation, if any. public Error Error { get; } Property Value Error IsFailure Gets a value indicating whether the operation failed. public bool IsFailure { get; } Property Value bool IsSuccess Gets a value indicating whether the operation was successful. public bool IsSuccess { get; } Property Value bool Methods Create<TValue>(TValue?) Creates a result based on the provided value. public static Result<TValue> Create<TValue>(TValue? value) Parameters value TValue The value to evaluate. Returns Result<TValue> A successful result if the value is not null; otherwise, a failed result with a null value error. Type Parameters TValue The type of the value. Failure(Error) Creates a failed result with the specified error. public static Result Failure(Error error) Parameters error Error The error associated with the failure. Returns Result A failed result. Failure<TValue>(Error) Creates a failed result with the specified error. public static Result<TValue> Failure<TValue>(Error error) Parameters error Error The error associated with the failure. Returns Result<TValue> A failed result. Type Parameters TValue The type of the value. Success() Creates a successful result. public static Result Success() Returns Result A successful result. Success<TValue>(TValue) Creates a successful result with a value. public static Result<TValue> Success<TValue>(TValue value) Parameters value TValue The value returned by the operation. Returns Result<TValue> A successful result containing the value. Type Parameters TValue The type of the value."
  },
  "api/Raftel.Domain.Abstractions.html": {
    "href": "api/Raftel.Domain.Abstractions.html",
    "title": "Namespace Raftel.Domain.Abstractions | Raftel",
    "summary": "Namespace Raftel.Domain.Abstractions Classes Error Represents an error with a specific code and message. Result Represents the result of an operation, encapsulating success or failure information. Result<TValue> Represents the result of an operation with a value. Interfaces IRepository<TEntity, TId> Defines a generic repository interface for managing aggregate root entities."
  },
  "api/Raftel.Domain.BaseTypes.AggregateRoot-1.html": {
    "href": "api/Raftel.Domain.BaseTypes.AggregateRoot-1.html",
    "title": "Class AggregateRoot<TId> | Raftel",
    "summary": "Class AggregateRoot<TId> Namespace Raftel.Domain.BaseTypes Assembly Raftel.Domain.dll Represents the root of an aggregate in the domain model. public abstract class AggregateRoot<TId> : Entity<TId> where TId : TypedId<Guid> Type Parameters TId The type of the aggregate's identifier. Inheritance object Entity<TId> AggregateRoot<TId> Derived User Inherited Members Entity<TId>.Id Entity<TId>.Equals(object) Entity<TId>.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AggregateRoot() protected AggregateRoot() AggregateRoot(TId) Initializes a new instance of the AggregateRoot<TId> class. protected AggregateRoot(TId id) Parameters id TId The identifier of the aggregate root."
  },
  "api/Raftel.Domain.BaseTypes.Entity-1.html": {
    "href": "api/Raftel.Domain.BaseTypes.Entity-1.html",
    "title": "Class Entity<TId> | Raftel",
    "summary": "Class Entity<TId> Namespace Raftel.Domain.BaseTypes Assembly Raftel.Domain.dll Base class for all domain entities with a strongly-typed ID. public abstract class Entity<TId> where TId : TypedId<Guid> Type Parameters TId The type of the entity's identifier. Inheritance object Entity<TId> Derived AggregateRoot<TId> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Entity() protected Entity() Entity(TId) Initializes a new instance of the Entity<TId> class. protected Entity(TId id) Parameters id TId The identifier of the entity. Properties Id Gets the unique identifier of the entity. public TId Id { get; protected set; } Property Value TId Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/Raftel.Domain.BaseTypes.TypedGuidId.html": {
    "href": "api/Raftel.Domain.BaseTypes.TypedGuidId.html",
    "title": "Class TypedGuidId | Raftel",
    "summary": "Class TypedGuidId Namespace Raftel.Domain.BaseTypes Assembly Raftel.Domain.dll Base class for identifiers that use Guid as the backing type. public abstract record TypedGuidId : TypedId<Guid>, IEquatable<TypedId<Guid>>, IEquatable<TypedGuidId> Inheritance object TypedId<Guid> TypedGuidId Implements IEquatable<TypedId<Guid>> IEquatable<TypedGuidId> Derived UserId Inherited Members TypedId<Guid>.ToString() TypedId<Guid>.Equals(TypedId<Guid>) TypedId<Guid>.GetHashCode() object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors TypedGuidId(Guid) Initializes a new instance of the TypedGuidId class. protected TypedGuidId(Guid value) Parameters value Guid The GUID value. Methods NewGuid() Generates a new GUID using version 7. public static Guid NewGuid() Returns Guid"
  },
  "api/Raftel.Domain.BaseTypes.TypedId-1.html": {
    "href": "api/Raftel.Domain.BaseTypes.TypedId-1.html",
    "title": "Class TypedId<T> | Raftel",
    "summary": "Class TypedId<T> Namespace Raftel.Domain.BaseTypes Assembly Raftel.Domain.dll Represents a strongly-typed identifier based on a primitive type. public abstract record TypedId<T> : IEquatable<TypedId<T>> where T : notnull Type Parameters T The underlying primitive type (e.g., Guid, int). Inheritance object TypedId<T> Implements IEquatable<TypedId<T>> Derived TypedGuidId Inherited Members object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors TypedId(T) Initializes a new instance of the TypedId<T> class. protected TypedId(T value) Parameters value T The raw value of the identifier. Exceptions ArgumentNullException Thrown when value is null. ArgumentException Thrown when value is Guid.Empty. Methods Equals(TypedId<T>?) Indicates whether the current object is equal to another object of the same type. public virtual bool Equals(TypedId<T>? other) Parameters other TypedId<T> An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns a string that represents the current object. public override string? ToString() Returns string A string that represents the current object. Operators implicit operator T(TypedId<T>) Implicitly converts a TypedId<T> to its underlying value. public static implicit operator T(TypedId<T> id) Parameters id TypedId<T> Returns T"
  },
  "api/Raftel.Domain.BaseTypes.html": {
    "href": "api/Raftel.Domain.BaseTypes.html",
    "title": "Namespace Raftel.Domain.BaseTypes | Raftel",
    "summary": "Namespace Raftel.Domain.BaseTypes Classes AggregateRoot<TId> Represents the root of an aggregate in the domain model. Entity<TId> Base class for all domain entities with a strongly-typed ID. TypedGuidId Base class for identifiers that use Guid as the backing type. TypedId<T> Represents a strongly-typed identifier based on a primitive type."
  },
  "api/Raftel.Domain.Features.Users.IUsersRepository.html": {
    "href": "api/Raftel.Domain.Features.Users.IUsersRepository.html",
    "title": "Interface IUsersRepository | Raftel",
    "summary": "Interface IUsersRepository Namespace Raftel.Domain.Features.Users Assembly Raftel.Domain.dll public interface IUsersRepository : IRepository<User, UserId> Inherited Members IRepository<User, UserId>.GetByIdAsync(UserId, CancellationToken) IRepository<User, UserId>.ListAllAsync(CancellationToken) IRepository<User, UserId>.AddAsync(User, CancellationToken) IRepository<User, UserId>.Update(User) IRepository<User, UserId>.Remove(User) Methods EmailIsUniqueAsync(string, CancellationToken) Task<bool> EmailIsUniqueAsync(string email, CancellationToken token) Parameters email string token CancellationToken Returns Task<bool>"
  },
  "api/Raftel.Domain.Features.Users.User.html": {
    "href": "api/Raftel.Domain.Features.Users.User.html",
    "title": "Class User | Raftel",
    "summary": "Class User Namespace Raftel.Domain.Features.Users Assembly Raftel.Domain.dll public sealed class User : AggregateRoot<UserId> Inheritance object Entity<UserId> AggregateRoot<UserId> User Inherited Members Entity<UserId>.Id Entity<UserId>.Equals(object) Entity<UserId>.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Email public Email Email { get; set; } Property Value Email Name public string Name { get; set; } Property Value string Surname public string Surname { get; set; } Property Value string Methods Create(Email, string, string) public static User Create(Email email, string name, string surname) Parameters email Email name string surname string Returns User"
  },
  "api/Raftel.Domain.Features.Users.UserErrors.html": {
    "href": "api/Raftel.Domain.Features.Users.UserErrors.html",
    "title": "Class UserErrors | Raftel",
    "summary": "Class UserErrors Namespace Raftel.Domain.Features.Users Assembly Raftel.Domain.dll public static class UserErrors Inheritance object UserErrors Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DuplicatedEmail public static Error DuplicatedEmail { get; } Property Value Error"
  },
  "api/Raftel.Domain.Features.Users.ValueObjects.Email.html": {
    "href": "api/Raftel.Domain.Features.Users.ValueObjects.Email.html",
    "title": "Class Email | Raftel",
    "summary": "Class Email Namespace Raftel.Domain.Features.Users.ValueObjects Assembly Raftel.Domain.dll public sealed record Email : IEquatable<Email> Inheritance object Email Implements IEquatable<Email> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Properties InvalidFormatError public static Error InvalidFormatError { get; } Property Value Error Methods IsEmail(string) public static bool IsEmail(string value) Parameters value string Returns bool ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. Operators implicit operator string(Email) public static implicit operator string(Email email) Parameters email Email Returns string implicit operator Email(string) public static implicit operator Email(string email) Parameters email string Returns Email"
  },
  "api/Raftel.Domain.Features.Users.ValueObjects.UserId.html": {
    "href": "api/Raftel.Domain.Features.Users.ValueObjects.UserId.html",
    "title": "Class UserId | Raftel",
    "summary": "Class UserId Namespace Raftel.Domain.Features.Users.ValueObjects Assembly Raftel.Domain.dll public sealed record UserId : TypedGuidId, IEquatable<TypedId<Guid>>, IEquatable<TypedGuidId>, IEquatable<UserId> Inheritance object TypedId<Guid> TypedGuidId UserId Implements IEquatable<TypedId<Guid>> IEquatable<TypedGuidId> IEquatable<UserId> Inherited Members TypedGuidId.NewGuid() TypedId<Guid>.ToString() TypedId<Guid>.Equals(TypedId<Guid>) TypedId<Guid>.GetHashCode() object.Equals(object) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors UserId(Guid) public UserId(Guid value) Parameters value Guid Methods New() public static UserId New() Returns UserId"
  },
  "api/Raftel.Domain.Features.Users.ValueObjects.html": {
    "href": "api/Raftel.Domain.Features.Users.ValueObjects.html",
    "title": "Namespace Raftel.Domain.Features.Users.ValueObjects | Raftel",
    "summary": "Namespace Raftel.Domain.Features.Users.ValueObjects Classes Email UserId"
  },
  "api/Raftel.Domain.Features.Users.html": {
    "href": "api/Raftel.Domain.Features.Users.html",
    "title": "Namespace Raftel.Domain.Features.Users | Raftel",
    "summary": "Namespace Raftel.Domain.Features.Users Classes User UserErrors Interfaces IUsersRepository"
  },
  "api/Raftel.Domain.Specifications.AndSpecification-1.html": {
    "href": "api/Raftel.Domain.Specifications.AndSpecification-1.html",
    "title": "Class AndSpecification<TModel> | Raftel",
    "summary": "Class AndSpecification<TModel> Namespace Raftel.Domain.Specifications Assembly Raftel.Domain.dll Represents a logical AND specification that combines two other specifications. public class AndSpecification<TModel> : Specification<TModel> Type Parameters TModel The type of the model to which the specification is applied. Inheritance object Specification<TModel> AndSpecification<TModel> Inherited Members Specification<TModel>.IsSatisfiedBy(TModel) Specification<TModel>.And(Specification<TModel>) Specification<TModel>.Or(Specification<TModel>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AndSpecification(Specification<TModel>, Specification<TModel>) Represents a logical AND specification that combines two other specifications. public AndSpecification(Specification<TModel> left, Specification<TModel> right) Parameters left Specification<TModel> right Specification<TModel> Methods ToExpression() Converts the specification to an expression. public override Expression<Func<TModel, bool>> ToExpression() Returns Expression<Func<TModel, bool>> A Expression{Func{TModel, bool}} that represents the logical AND between the two specifications."
  },
  "api/Raftel.Domain.Specifications.OrSpecification-1.html": {
    "href": "api/Raftel.Domain.Specifications.OrSpecification-1.html",
    "title": "Class OrSpecification<TModel> | Raftel",
    "summary": "Class OrSpecification<TModel> Namespace Raftel.Domain.Specifications Assembly Raftel.Domain.dll Represents a logical OR specification that combines two other specifications. public class OrSpecification<TModel> : Specification<TModel> Type Parameters TModel The type of the model to which the specification is applied. Inheritance object Specification<TModel> OrSpecification<TModel> Inherited Members Specification<TModel>.IsSatisfiedBy(TModel) Specification<TModel>.And(Specification<TModel>) Specification<TModel>.Or(Specification<TModel>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors OrSpecification(Specification<TModel>, Specification<TModel>) Represents a logical OR specification that combines two other specifications. public OrSpecification(Specification<TModel> left, Specification<TModel> right) Parameters left Specification<TModel> right Specification<TModel> Methods ToExpression() Converts the specification to an expression. public override Expression<Func<TModel, bool>> ToExpression() Returns Expression<Func<TModel, bool>> A Expression{Func{TModel, bool}} that represents the logical OR between the two specifications."
  },
  "api/Raftel.Domain.Specifications.Specification-1.html": {
    "href": "api/Raftel.Domain.Specifications.Specification-1.html",
    "title": "Class Specification<TModel> | Raftel",
    "summary": "Class Specification<TModel> Namespace Raftel.Domain.Specifications Assembly Raftel.Domain.dll Represents a base class for specifications that defines a condition for a given model. public abstract class Specification<TModel> Type Parameters TModel The type of the model to which the specification is applied. Inheritance object Specification<TModel> Derived AndSpecification<TModel> OrSpecification<TModel> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods And(Specification<TModel>) Combines the current specification with another specification using a logical AND. public Specification<TModel> And(Specification<TModel> other) Parameters other Specification<TModel> The specification to combine with. Returns Specification<TModel> A new specification that represents the logical AND. IsSatisfiedBy(TModel) Determines whether the model satisfies the specification. public bool IsSatisfiedBy(TModel model) Parameters model TModel The model to evaluate. Returns bool True if the model satisfies the specification, otherwise false. Or(Specification<TModel>) Combines the current specification with another specification using a logical OR. public Specification<TModel> Or(Specification<TModel> other) Parameters other Specification<TModel> The specification to combine with. Returns Specification<TModel> A new specification that represents the logical OR. ToExpression() Converts the specification to an expression that can be evaluated against a model. public abstract Expression<Func<TModel, bool>> ToExpression() Returns Expression<Func<TModel, bool>> An expression that represents the condition."
  },
  "api/Raftel.Domain.Specifications.html": {
    "href": "api/Raftel.Domain.Specifications.html",
    "title": "Namespace Raftel.Domain.Specifications | Raftel",
    "summary": "Namespace Raftel.Domain.Specifications Classes AndSpecification<TModel> Represents a logical AND specification that combines two other specifications. OrSpecification<TModel> Represents a logical OR specification that combines two other specifications. Specification<TModel> Represents a base class for specifications that defines a condition for a given model."
  },
  "api/Raftel.Domain.Validators.ValidationResult.html": {
    "href": "api/Raftel.Domain.Validators.ValidationResult.html",
    "title": "Class ValidationResult | Raftel",
    "summary": "Class ValidationResult Namespace Raftel.Domain.Validators Assembly Raftel.Domain.dll Represents the result of a validation process, containing any validation errors found. public class ValidationResult Inheritance object ValidationResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Errors Gets the collection of validation errors. public IReadOnlyList<Error> Errors { get; } Property Value IReadOnlyList<Error> IsValid Gets a value indicating whether the validation passed without any errors. public bool IsValid { get; } Property Value bool Methods Failure(IEnumerable<Error>) Creates a failed ValidationResult instance with the specified errors. public static ValidationResult Failure(IEnumerable<Error> errors) Parameters errors IEnumerable<Error> A collection of Error instances representing the validation failures. Returns ValidationResult A result representing a failed state with associated errors. Success() Creates a successful ValidationResult instance with no errors. public static ValidationResult Success() Returns ValidationResult A result representing a valid state."
  },
  "api/Raftel.Domain.Validators.Validator-1.html": {
    "href": "api/Raftel.Domain.Validators.Validator-1.html",
    "title": "Class Validator<TModel> | Raftel",
    "summary": "Class Validator<TModel> Namespace Raftel.Domain.Validators Assembly Raftel.Domain.dll Represents a base class for defining validation logic for a given model type. Allows registering validation rules through the EnsureThat(Func<TModel, bool>, Error) method, and executing them via the Validate(TModel) method. public abstract class Validator<TModel> Type Parameters TModel The type of the model to validate. Inheritance object Validator<TModel> Derived RegisterUserCommandValidator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods EnsureThat(Func<TModel, bool>, Error) Registers a validation rule for the model. The rule is executed when Validate(TModel) is called. protected void EnsureThat(Func<TModel, bool> func, Error error) Parameters func Func<TModel, bool> A predicate that should return true if the model is valid. error Error The error to associate with the rule if the predicate returns false. Validate(TModel) Validates the specified model against all registered rules. public ValidationResult Validate(TModel model) Parameters model TModel The model instance to validate. Returns ValidationResult A ValidationResult representing the outcome of the validation. Returns success if no errors are found, otherwise returns a failure result with collected errors."
  },
  "api/Raftel.Domain.Validators.html": {
    "href": "api/Raftel.Domain.Validators.html",
    "title": "Namespace Raftel.Domain.Validators | Raftel",
    "summary": "Namespace Raftel.Domain.Validators Classes ValidationResult Represents the result of a validation process, containing any validation errors found. Validator<TModel> Represents a base class for defining validation logic for a given model type. Allows registering validation rules through the EnsureThat(Func<TModel, bool>, Error) method, and executing them via the Validate(TModel) method."
  },
  "api/Raftel.Infrastructure.Authentication.IClaimsPrincipalFactory.html": {
    "href": "api/Raftel.Infrastructure.Authentication.IClaimsPrincipalFactory.html",
    "title": "Interface IClaimsPrincipalFactory | Raftel",
    "summary": "Interface IClaimsPrincipalFactory Namespace Raftel.Infrastructure.Authentication Assembly Raftel.Infrastructure.dll public interface IClaimsPrincipalFactory Methods CreateAsync(IdentityUser) Task<ClaimsPrincipal> CreateAsync(IdentityUser user) Parameters user IdentityUser Returns Task<ClaimsPrincipal>"
  },
  "api/Raftel.Infrastructure.Authentication.html": {
    "href": "api/Raftel.Infrastructure.Authentication.html",
    "title": "Namespace Raftel.Infrastructure.Authentication | Raftel",
    "summary": "Namespace Raftel.Infrastructure.Authentication Interfaces IClaimsPrincipalFactory"
  },
  "api/Raftel.Infrastructure.Data.Configuration.UserConfiguration.html": {
    "href": "api/Raftel.Infrastructure.Data.Configuration.UserConfiguration.html",
    "title": "Class UserConfiguration | Raftel",
    "summary": "Class UserConfiguration Namespace Raftel.Infrastructure.Data.Configuration Assembly Raftel.Infrastructure.dll public sealed class UserConfiguration : IEntityTypeConfiguration<User> Inheritance object UserConfiguration Implements IEntityTypeConfiguration<User> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Configure(EntityTypeBuilder<User>) Configures the entity of type User. public void Configure(EntityTypeBuilder<User> builder) Parameters builder EntityTypeBuilder<User> The builder to be used to configure the entity type."
  },
  "api/Raftel.Infrastructure.Data.Configuration.html": {
    "href": "api/Raftel.Infrastructure.Data.Configuration.html",
    "title": "Namespace Raftel.Infrastructure.Data.Configuration | Raftel",
    "summary": "Namespace Raftel.Infrastructure.Data.Configuration Classes UserConfiguration"
  },
  "api/Raftel.Infrastructure.Data.EfRepository-3.html": {
    "href": "api/Raftel.Infrastructure.Data.EfRepository-3.html",
    "title": "Class EfRepository<TDbContext, TEntity, TId> | Raftel",
    "summary": "Class EfRepository<TDbContext, TEntity, TId> Namespace Raftel.Infrastructure.Data Assembly Raftel.Infrastructure.dll Represents a base implementation of a repository using Entity Framework. public abstract class EfRepository<TDbContext, TEntity, TId> : IRepository<TEntity, TId> where TDbContext : RaftelDbContext<TDbContext> where TEntity : AggregateRoot<TId> where TId : TypedId<Guid> Type Parameters TDbContext The type of the database context. TEntity The type of the aggregate root entity. TId The type of the identifier for the aggregate root entity. Inheritance object EfRepository<TDbContext, TEntity, TId> Implements IRepository<TEntity, TId> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EfRepository(TDbContext) Represents a base implementation of a repository using Entity Framework. protected EfRepository(TDbContext dbContext) Parameters dbContext TDbContext The database context instance. Methods AddAsync(TEntity, CancellationToken) Adds a new entity to the repository asynchronously. public Task AddAsync(TEntity entity, CancellationToken cancellationToken = default) Parameters entity TEntity The entity to add. cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task A task that represents the asynchronous operation. GetByIdAsync(TId, CancellationToken) Retrieves an entity by its identifier asynchronously. public Task<TEntity?> GetByIdAsync(TId id, CancellationToken cancellationToken = default) Parameters id TId The identifier of the entity to retrieve. cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task<TEntity> A task that represents the asynchronous operation. The task result contains the entity if found, or null otherwise. ListAllAsync(CancellationToken) Retrieves all entities asynchronously. public Task<List<TEntity>> ListAllAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task<List<TEntity>> A task that represents the asynchronous operation. The task result contains a list of all entities. Remove(TEntity) Removes an entity from the repository. public void Remove(TEntity entity) Parameters entity TEntity The entity to remove. Update(TEntity) Updates an existing entity in the repository. public void Update(TEntity entity) Parameters entity TEntity The entity to update."
  },
  "api/Raftel.Infrastructure.Data.Filters.IDataFilter.html": {
    "href": "api/Raftel.Infrastructure.Data.Filters.IDataFilter.html",
    "title": "Interface IDataFilter | Raftel",
    "summary": "Interface IDataFilter Namespace Raftel.Infrastructure.Data.Filters Assembly Raftel.Infrastructure.dll Provides a mechanism to enable or disable data-level filters dynamically at runtime, such as soft delete or multi-tenancy filters. Filters are typically evaluated during query execution to include or exclude entities based on application-specific rules. public interface IDataFilter Methods Disable<TFilter>() Temporarily disables the specified data filter for the current asynchronous execution scope. When the returned IDisposable is disposed, the filter is automatically re-enabled. IDisposable Disable<TFilter>() Returns IDisposable An IDisposable handle that, when disposed, restores the filter to its previous state. Type Parameters TFilter The marker type that identifies the filter to disable. IsEnabled<TFilter>() Determines whether a given data filter is currently enabled in the active execution context. bool IsEnabled<TFilter>() Returns bool true if the specified filter is enabled and should be applied to queries; otherwise, false. Type Parameters TFilter The marker type that identifies the filter (e.g., ISoftDeleteFilter)."
  },
  "api/Raftel.Infrastructure.Data.Filters.ISoftDeleteFilter.html": {
    "href": "api/Raftel.Infrastructure.Data.Filters.ISoftDeleteFilter.html",
    "title": "Interface ISoftDeleteFilter | Raftel",
    "summary": "Interface ISoftDeleteFilter Namespace Raftel.Infrastructure.Data.Filters Assembly Raftel.Infrastructure.dll Marker interface used to identify the soft delete filter in the data filtering system. public interface ISoftDeleteFilter Remarks This interface has no members and is used exclusively as a type token to represent the soft delete filter when enabling or disabling it at runtime via IDataFilter."
  },
  "api/Raftel.Infrastructure.Data.Filters.html": {
    "href": "api/Raftel.Infrastructure.Data.Filters.html",
    "title": "Namespace Raftel.Infrastructure.Data.Filters | Raftel",
    "summary": "Namespace Raftel.Infrastructure.Data.Filters Interfaces IDataFilter Provides a mechanism to enable or disable data-level filters dynamically at runtime, such as soft delete or multi-tenancy filters. Filters are typically evaluated during query execution to include or exclude entities based on application-specific rules. ISoftDeleteFilter Marker interface used to identify the soft delete filter in the data filtering system."
  },
  "api/Raftel.Infrastructure.Data.IEntityTypeConfigurationExtensions.html": {
    "href": "api/Raftel.Infrastructure.Data.IEntityTypeConfigurationExtensions.html",
    "title": "Class IEntityTypeConfigurationExtensions | Raftel",
    "summary": "Class IEntityTypeConfigurationExtensions Namespace Raftel.Infrastructure.Data Assembly Raftel.Infrastructure.dll Provides extension methods for configuring entity types in Entity Framework Core. public static class IEntityTypeConfigurationExtensions Inheritance object IEntityTypeConfigurationExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HasSoftDelete<TEntity>(EntityTypeBuilder<TEntity>) Configures a shadow property for soft delete functionality on the specified entity type. public static void HasSoftDelete<TEntity>(this EntityTypeBuilder<TEntity> builder) where TEntity : class Parameters builder EntityTypeBuilder<TEntity> The EntityTypeBuilder<TEntity> used to configure the entity type. Type Parameters TEntity The type of the entity being configured."
  },
  "api/Raftel.Infrastructure.Data.RaftelDbContext-1.html": {
    "href": "api/Raftel.Infrastructure.Data.RaftelDbContext-1.html",
    "title": "Class RaftelDbContext<TDbContext> | Raftel",
    "summary": "Class RaftelDbContext<TDbContext> Namespace Raftel.Infrastructure.Data Assembly Raftel.Infrastructure.dll Abstract base class for the Raftel database context, providing common functionality such as global query filters and unit of work implementation. public abstract class RaftelDbContext<TDbContext> : IdentityDbContext, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable, IUnitOfWork where TDbContext : RaftelDbContext<TDbContext> Type Parameters TDbContext The type of the derived DbContext. Inheritance object DbContext IdentityUserContext<IdentityUser, string, IdentityUserClaim<string>, IdentityUserLogin<string>, IdentityUserToken<string>> IdentityDbContext<IdentityUser, IdentityRole, string, IdentityUserClaim<string>, IdentityUserRole<string>, IdentityUserLogin<string>, IdentityRoleClaim<string>, IdentityUserToken<string>> IdentityDbContext<IdentityUser, IdentityRole, string> IdentityDbContext RaftelDbContext<TDbContext> Implements IInfrastructure<IServiceProvider> IDbContextDependencies IDbSetCache IDbContextPoolable IResettableService IDisposable IAsyncDisposable IUnitOfWork Inherited Members IdentityDbContext<IdentityUser, IdentityRole, string, IdentityUserClaim<string>, IdentityUserRole<string>, IdentityUserLogin<string>, IdentityRoleClaim<string>, IdentityUserToken<string>>.OnModelCreating(ModelBuilder) IdentityDbContext<IdentityUser, IdentityRole, string, IdentityUserClaim<string>, IdentityUserRole<string>, IdentityUserLogin<string>, IdentityRoleClaim<string>, IdentityUserToken<string>>.UserRoles IdentityDbContext<IdentityUser, IdentityRole, string, IdentityUserClaim<string>, IdentityUserRole<string>, IdentityUserLogin<string>, IdentityRoleClaim<string>, IdentityUserToken<string>>.Roles IdentityDbContext<IdentityUser, IdentityRole, string, IdentityUserClaim<string>, IdentityUserRole<string>, IdentityUserLogin<string>, IdentityRoleClaim<string>, IdentityUserToken<string>>.RoleClaims IdentityUserContext<IdentityUser, string, IdentityUserClaim<string>, IdentityUserLogin<string>, IdentityUserToken<string>>.OnModelCreating(ModelBuilder) IdentityUserContext<IdentityUser, string, IdentityUserClaim<string>, IdentityUserLogin<string>, IdentityUserToken<string>>.Users IdentityUserContext<IdentityUser, string, IdentityUserClaim<string>, IdentityUserLogin<string>, IdentityUserToken<string>>.UserClaims IdentityUserContext<IdentityUser, string, IdentityUserClaim<string>, IdentityUserLogin<string>, IdentityUserToken<string>>.UserLogins IdentityUserContext<IdentityUser, string, IdentityUserClaim<string>, IdentityUserLogin<string>, IdentityUserToken<string>>.UserTokens IdentityUserContext<IdentityUser, string, IdentityUserClaim<string>, IdentityUserLogin<string>, IdentityUserToken<string>>.SchemaVersion DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.OnConfiguring(DbContextOptionsBuilder) DbContext.ConfigureConventions(ModelConfigurationBuilder) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RaftelDbContext() protected RaftelDbContext() RaftelDbContext(DbContextOptions<TDbContext>) protected RaftelDbContext(DbContextOptions<TDbContext> options) Parameters options DbContextOptions<TDbContext> RaftelDbContext(DbContextOptions<TDbContext>, IDataFilter) protected RaftelDbContext(DbContextOptions<TDbContext> options, IDataFilter dataFilter) Parameters options DbContextOptions<TDbContext> dataFilter IDataFilter Properties IsSoftDeleteFilterEnabled protected bool IsSoftDeleteFilterEnabled { get; } Property Value bool User public DbSet<User> User { get; set; } Property Value DbSet<User> Methods CommitAsync(CancellationToken) Commits all changes made within the unit of work asynchronously. public Task CommitAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken A token to monitor for cancellation requests. Defaults to None. Returns Task A task that represents the asynchronous commit operation. OnModelCreating(ModelBuilder) Configures the schema needed for the identity framework. protected override void OnModelCreating(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder"
  },
  "api/Raftel.Infrastructure.Data.ShadowPropertyNames.html": {
    "href": "api/Raftel.Infrastructure.Data.ShadowPropertyNames.html",
    "title": "Class ShadowPropertyNames | Raftel",
    "summary": "Class ShadowPropertyNames Namespace Raftel.Infrastructure.Data Assembly Raftel.Infrastructure.dll Provides the names of shadow properties used in the application. Shadow properties are properties that are not part of the entity class but are defined in the model. public static class ShadowPropertyNames Inheritance object ShadowPropertyNames Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields IsDeleted The name of the shadow property that indicates whether an entity is soft-deleted. public const string IsDeleted = \"IsDeleted\" Field Value string"
  },
  "api/Raftel.Infrastructure.Data.html": {
    "href": "api/Raftel.Infrastructure.Data.html",
    "title": "Namespace Raftel.Infrastructure.Data | Raftel",
    "summary": "Namespace Raftel.Infrastructure.Data Classes EfRepository<TDbContext, TEntity, TId> Represents a base implementation of a repository using Entity Framework. IEntityTypeConfigurationExtensions Provides extension methods for configuring entity types in Entity Framework Core. RaftelDbContext<TDbContext> Abstract base class for the Raftel database context, providing common functionality such as global query filters and unit of work implementation. ShadowPropertyNames Provides the names of shadow properties used in the application. Shadow properties are properties that are not part of the entity class but are defined in the model."
  },
  "api/Raftel.Infrastructure.DependencyInjection.html": {
    "href": "api/Raftel.Infrastructure.DependencyInjection.html",
    "title": "Class DependencyInjection | Raftel",
    "summary": "Class DependencyInjection Namespace Raftel.Infrastructure Assembly Raftel.Infrastructure.dll public static class DependencyInjection Inheritance object DependencyInjection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddRaftelData<TDbContext>(IServiceCollection, IConfiguration, string) public static IServiceCollection AddRaftelData<TDbContext>(this IServiceCollection services, IConfiguration configuration, string connectionStringName = \"Default\") where TDbContext : RaftelDbContext<TDbContext> Parameters services IServiceCollection configuration IConfiguration connectionStringName string Returns IServiceCollection Type Parameters TDbContext"
  },
  "api/Raftel.Infrastructure.html": {
    "href": "api/Raftel.Infrastructure.html",
    "title": "Namespace Raftel.Infrastructure | Raftel",
    "summary": "Namespace Raftel.Infrastructure Classes DependencyInjection"
  },
  "api/Raftel.Shared.Attributes.MarkerAttribute.html": {
    "href": "api/Raftel.Shared.Attributes.MarkerAttribute.html",
    "title": "Class MarkerAttribute | Raftel",
    "summary": "Class MarkerAttribute Namespace Raftel.Shared.Attributes Assembly Raftel.Shared.dll [AttributeUsage(AttributeTargets.Interface, Inherited = false, AllowMultiple = false)] public sealed class MarkerAttribute : Attribute Inheritance object Attribute MarkerAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Raftel.Shared.Attributes.html": {
    "href": "api/Raftel.Shared.Attributes.html",
    "title": "Namespace Raftel.Shared.Attributes | Raftel",
    "summary": "Namespace Raftel.Shared.Attributes Classes MarkerAttribute"
  },
  "api/Raftel.Shared.DisposeAction.html": {
    "href": "api/Raftel.Shared.DisposeAction.html",
    "title": "Class DisposeAction | Raftel",
    "summary": "Class DisposeAction Namespace Raftel.Shared Assembly Raftel.Shared.dll public class DisposeAction : IDisposable Inheritance object DisposeAction Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DisposeAction(Action) public DisposeAction(Action onDispose) Parameters onDispose Action Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose()"
  },
  "api/Raftel.Shared.Extensions.EnumerableExtensions.html": {
    "href": "api/Raftel.Shared.Extensions.EnumerableExtensions.html",
    "title": "Class EnumerableExtensions | Raftel",
    "summary": "Class EnumerableExtensions Namespace Raftel.Shared.Extensions Assembly Raftel.Shared.dll public static class EnumerableExtensions Inheritance object EnumerableExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods WhereIf<T>(IEnumerable<T>, bool, Func<T, bool>) public static IEnumerable<T> WhereIf<T>(this IEnumerable<T> source, bool condition, Func<T, bool> predicate) Parameters source IEnumerable<T> condition bool predicate Func<T, bool> Returns IEnumerable<T> Type Parameters T"
  },
  "api/Raftel.Shared.Extensions.StringExtensions.html": {
    "href": "api/Raftel.Shared.Extensions.StringExtensions.html",
    "title": "Class StringExtensions | Raftel",
    "summary": "Class StringExtensions Namespace Raftel.Shared.Extensions Assembly Raftel.Shared.dll public static class StringExtensions Inheritance object StringExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToCamelCase(string) public static string ToCamelCase(this string input) Parameters input string Returns string"
  },
  "api/Raftel.Shared.Extensions.TypeExtensions.html": {
    "href": "api/Raftel.Shared.Extensions.TypeExtensions.html",
    "title": "Class TypeExtensions | Raftel",
    "summary": "Class TypeExtensions Namespace Raftel.Shared.Extensions Assembly Raftel.Shared.dll public static class TypeExtensions Inheritance object TypeExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsNullable(Type) public static bool IsNullable(this Type type) Parameters type Type Returns bool"
  },
  "api/Raftel.Shared.Extensions.html": {
    "href": "api/Raftel.Shared.Extensions.html",
    "title": "Namespace Raftel.Shared.Extensions | Raftel",
    "summary": "Namespace Raftel.Shared.Extensions Classes EnumerableExtensions StringExtensions TypeExtensions"
  },
  "api/Raftel.Shared.html": {
    "href": "api/Raftel.Shared.html",
    "title": "Namespace Raftel.Shared | Raftel",
    "summary": "Namespace Raftel.Shared Classes DisposeAction"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | Raftel",
    "summary": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | Raftel",
    "summary": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | Raftel",
    "summary": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}