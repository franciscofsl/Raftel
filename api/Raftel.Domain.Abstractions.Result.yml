### YamlMime:ManagedReference
items:
- uid: Raftel.Domain.Abstractions.Result
  commentId: T:Raftel.Domain.Abstractions.Result
  id: Result
  parent: Raftel.Domain.Abstractions
  children:
  - Raftel.Domain.Abstractions.Result.#ctor(System.Boolean,Raftel.Domain.Abstractions.Error)
  - Raftel.Domain.Abstractions.Result.Create``1(``0)
  - Raftel.Domain.Abstractions.Result.Error
  - Raftel.Domain.Abstractions.Result.Failure(Raftel.Domain.Abstractions.Error)
  - Raftel.Domain.Abstractions.Result.Failure``1(Raftel.Domain.Abstractions.Error)
  - Raftel.Domain.Abstractions.Result.IsFailure
  - Raftel.Domain.Abstractions.Result.IsSuccess
  - Raftel.Domain.Abstractions.Result.Success
  - Raftel.Domain.Abstractions.Result.Success``1(``0)
  langs:
  - csharp
  - vb
  name: Result
  nameWithType: Result
  fullName: Raftel.Domain.Abstractions.Result
  type: Class
  source:
    remote:
      path: src/Raftel.Domain/Abstractions/Result.cs
      branch: feature/docs
      repo: https://github.com/franciscofsl/Raftel
    id: Result
    path: src/Raftel.Domain/Abstractions/Result.cs
    startLine: 4
  assemblies:
  - Raftel.Domain
  namespace: Raftel.Domain.Abstractions
  syntax:
    content: public class Result
    content.vb: Public Class Result
  inheritance:
  - System.Object
  derivedClasses:
  - Raftel.Domain.Abstractions.Result`1
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Raftel.Domain.Abstractions.Result.#ctor(System.Boolean,Raftel.Domain.Abstractions.Error)
  commentId: M:Raftel.Domain.Abstractions.Result.#ctor(System.Boolean,Raftel.Domain.Abstractions.Error)
  id: '#ctor(System.Boolean,Raftel.Domain.Abstractions.Error)'
  parent: Raftel.Domain.Abstractions.Result
  langs:
  - csharp
  - vb
  name: Result(bool, Error)
  nameWithType: Result.Result(bool, Error)
  fullName: Raftel.Domain.Abstractions.Result.Result(bool, Raftel.Domain.Abstractions.Error)
  type: Constructor
  source:
    remote:
      path: src/Raftel.Domain/Abstractions/Result.cs
      branch: feature/docs
      repo: https://github.com/franciscofsl/Raftel
    id: .ctor
    path: src/Raftel.Domain/Abstractions/Result.cs
    startLine: 6
  assemblies:
  - Raftel.Domain
  namespace: Raftel.Domain.Abstractions
  syntax:
    content: protected Result(bool isSuccess, Error error)
    parameters:
    - id: isSuccess
      type: System.Boolean
    - id: error
      type: Raftel.Domain.Abstractions.Error
    content.vb: Protected Sub New(isSuccess As Boolean, [error] As [Error])
  overload: Raftel.Domain.Abstractions.Result.#ctor*
  nameWithType.vb: Result.New(Boolean, Error)
  fullName.vb: Raftel.Domain.Abstractions.Result.New(Boolean, Raftel.Domain.Abstractions.Error)
  name.vb: New(Boolean, Error)
- uid: Raftel.Domain.Abstractions.Result.IsSuccess
  commentId: P:Raftel.Domain.Abstractions.Result.IsSuccess
  id: IsSuccess
  parent: Raftel.Domain.Abstractions.Result
  langs:
  - csharp
  - vb
  name: IsSuccess
  nameWithType: Result.IsSuccess
  fullName: Raftel.Domain.Abstractions.Result.IsSuccess
  type: Property
  source:
    remote:
      path: src/Raftel.Domain/Abstractions/Result.cs
      branch: feature/docs
      repo: https://github.com/franciscofsl/Raftel
    id: IsSuccess
    path: src/Raftel.Domain/Abstractions/Result.cs
    startLine: 22
  assemblies:
  - Raftel.Domain
  namespace: Raftel.Domain.Abstractions
  syntax:
    content: public bool IsSuccess { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsSuccess As Boolean
  overload: Raftel.Domain.Abstractions.Result.IsSuccess*
- uid: Raftel.Domain.Abstractions.Result.IsFailure
  commentId: P:Raftel.Domain.Abstractions.Result.IsFailure
  id: IsFailure
  parent: Raftel.Domain.Abstractions.Result
  langs:
  - csharp
  - vb
  name: IsFailure
  nameWithType: Result.IsFailure
  fullName: Raftel.Domain.Abstractions.Result.IsFailure
  type: Property
  source:
    remote:
      path: src/Raftel.Domain/Abstractions/Result.cs
      branch: feature/docs
      repo: https://github.com/franciscofsl/Raftel
    id: IsFailure
    path: src/Raftel.Domain/Abstractions/Result.cs
    startLine: 23
  assemblies:
  - Raftel.Domain
  namespace: Raftel.Domain.Abstractions
  syntax:
    content: public bool IsFailure { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsFailure As Boolean
  overload: Raftel.Domain.Abstractions.Result.IsFailure*
- uid: Raftel.Domain.Abstractions.Result.Error
  commentId: P:Raftel.Domain.Abstractions.Result.Error
  id: Error
  parent: Raftel.Domain.Abstractions.Result
  langs:
  - csharp
  - vb
  name: Error
  nameWithType: Result.Error
  fullName: Raftel.Domain.Abstractions.Result.Error
  type: Property
  source:
    remote:
      path: src/Raftel.Domain/Abstractions/Result.cs
      branch: feature/docs
      repo: https://github.com/franciscofsl/Raftel
    id: Error
    path: src/Raftel.Domain/Abstractions/Result.cs
    startLine: 24
  assemblies:
  - Raftel.Domain
  namespace: Raftel.Domain.Abstractions
  syntax:
    content: public Error Error { get; }
    parameters: []
    return:
      type: Raftel.Domain.Abstractions.Error
    content.vb: Public ReadOnly Property [Error] As [Error]
  overload: Raftel.Domain.Abstractions.Result.Error*
- uid: Raftel.Domain.Abstractions.Result.Success
  commentId: M:Raftel.Domain.Abstractions.Result.Success
  id: Success
  parent: Raftel.Domain.Abstractions.Result
  langs:
  - csharp
  - vb
  name: Success()
  nameWithType: Result.Success()
  fullName: Raftel.Domain.Abstractions.Result.Success()
  type: Method
  source:
    remote:
      path: src/Raftel.Domain/Abstractions/Result.cs
      branch: feature/docs
      repo: https://github.com/franciscofsl/Raftel
    id: Success
    path: src/Raftel.Domain/Abstractions/Result.cs
    startLine: 26
  assemblies:
  - Raftel.Domain
  namespace: Raftel.Domain.Abstractions
  syntax:
    content: public static Result Success()
    return:
      type: Raftel.Domain.Abstractions.Result
    content.vb: Public Shared Function Success() As Result
  overload: Raftel.Domain.Abstractions.Result.Success*
- uid: Raftel.Domain.Abstractions.Result.Failure(Raftel.Domain.Abstractions.Error)
  commentId: M:Raftel.Domain.Abstractions.Result.Failure(Raftel.Domain.Abstractions.Error)
  id: Failure(Raftel.Domain.Abstractions.Error)
  parent: Raftel.Domain.Abstractions.Result
  langs:
  - csharp
  - vb
  name: Failure(Error)
  nameWithType: Result.Failure(Error)
  fullName: Raftel.Domain.Abstractions.Result.Failure(Raftel.Domain.Abstractions.Error)
  type: Method
  source:
    remote:
      path: src/Raftel.Domain/Abstractions/Result.cs
      branch: feature/docs
      repo: https://github.com/franciscofsl/Raftel
    id: Failure
    path: src/Raftel.Domain/Abstractions/Result.cs
    startLine: 27
  assemblies:
  - Raftel.Domain
  namespace: Raftel.Domain.Abstractions
  syntax:
    content: public static Result Failure(Error error)
    parameters:
    - id: error
      type: Raftel.Domain.Abstractions.Error
    return:
      type: Raftel.Domain.Abstractions.Result
    content.vb: Public Shared Function Failure([error] As [Error]) As Result
  overload: Raftel.Domain.Abstractions.Result.Failure*
- uid: Raftel.Domain.Abstractions.Result.Success``1(``0)
  commentId: M:Raftel.Domain.Abstractions.Result.Success``1(``0)
  id: Success``1(``0)
  parent: Raftel.Domain.Abstractions.Result
  langs:
  - csharp
  - vb
  name: Success<TValue>(TValue)
  nameWithType: Result.Success<TValue>(TValue)
  fullName: Raftel.Domain.Abstractions.Result.Success<TValue>(TValue)
  type: Method
  source:
    remote:
      path: src/Raftel.Domain/Abstractions/Result.cs
      branch: feature/docs
      repo: https://github.com/franciscofsl/Raftel
    id: Success
    path: src/Raftel.Domain/Abstractions/Result.cs
    startLine: 30
  assemblies:
  - Raftel.Domain
  namespace: Raftel.Domain.Abstractions
  syntax:
    content: public static Result<TValue> Success<TValue>(TValue value)
    parameters:
    - id: value
      type: '{TValue}'
    typeParameters:
    - id: TValue
    return:
      type: Raftel.Domain.Abstractions.Result{{TValue}}
    content.vb: Public Shared Function Success(Of TValue)(value As TValue) As Result(Of TValue)
  overload: Raftel.Domain.Abstractions.Result.Success*
  nameWithType.vb: Result.Success(Of TValue)(TValue)
  fullName.vb: Raftel.Domain.Abstractions.Result.Success(Of TValue)(TValue)
  name.vb: Success(Of TValue)(TValue)
- uid: Raftel.Domain.Abstractions.Result.Failure``1(Raftel.Domain.Abstractions.Error)
  commentId: M:Raftel.Domain.Abstractions.Result.Failure``1(Raftel.Domain.Abstractions.Error)
  id: Failure``1(Raftel.Domain.Abstractions.Error)
  parent: Raftel.Domain.Abstractions.Result
  langs:
  - csharp
  - vb
  name: Failure<TValue>(Error)
  nameWithType: Result.Failure<TValue>(Error)
  fullName: Raftel.Domain.Abstractions.Result.Failure<TValue>(Raftel.Domain.Abstractions.Error)
  type: Method
  source:
    remote:
      path: src/Raftel.Domain/Abstractions/Result.cs
      branch: feature/docs
      repo: https://github.com/franciscofsl/Raftel
    id: Failure
    path: src/Raftel.Domain/Abstractions/Result.cs
    startLine: 32
  assemblies:
  - Raftel.Domain
  namespace: Raftel.Domain.Abstractions
  syntax:
    content: public static Result<TValue> Failure<TValue>(Error error)
    parameters:
    - id: error
      type: Raftel.Domain.Abstractions.Error
    typeParameters:
    - id: TValue
    return:
      type: Raftel.Domain.Abstractions.Result{{TValue}}
    content.vb: Public Shared Function Failure(Of TValue)([error] As [Error]) As Result(Of TValue)
  overload: Raftel.Domain.Abstractions.Result.Failure*
  nameWithType.vb: Result.Failure(Of TValue)(Error)
  fullName.vb: Raftel.Domain.Abstractions.Result.Failure(Of TValue)(Raftel.Domain.Abstractions.Error)
  name.vb: Failure(Of TValue)(Error)
- uid: Raftel.Domain.Abstractions.Result.Create``1(``0)
  commentId: M:Raftel.Domain.Abstractions.Result.Create``1(``0)
  id: Create``1(``0)
  parent: Raftel.Domain.Abstractions.Result
  langs:
  - csharp
  - vb
  name: Create<TValue>(TValue?)
  nameWithType: Result.Create<TValue>(TValue?)
  fullName: Raftel.Domain.Abstractions.Result.Create<TValue>(TValue?)
  type: Method
  source:
    remote:
      path: src/Raftel.Domain/Abstractions/Result.cs
      branch: feature/docs
      repo: https://github.com/franciscofsl/Raftel
    id: Create
    path: src/Raftel.Domain/Abstractions/Result.cs
    startLine: 34
  assemblies:
  - Raftel.Domain
  namespace: Raftel.Domain.Abstractions
  syntax:
    content: public static Result<TValue> Create<TValue>(TValue? value)
    parameters:
    - id: value
      type: '{TValue}'
    typeParameters:
    - id: TValue
    return:
      type: Raftel.Domain.Abstractions.Result{{TValue}}
    content.vb: Public Shared Function Create(Of TValue)(value As TValue) As Result(Of TValue)
  overload: Raftel.Domain.Abstractions.Result.Create*
  nameWithType.vb: Result.Create(Of TValue)(TValue)
  fullName.vb: Raftel.Domain.Abstractions.Result.Create(Of TValue)(TValue)
  name.vb: Create(Of TValue)(TValue)
references:
- uid: Raftel.Domain.Abstractions
  commentId: N:Raftel.Domain.Abstractions
  href: Raftel.html
  name: Raftel.Domain.Abstractions
  nameWithType: Raftel.Domain.Abstractions
  fullName: Raftel.Domain.Abstractions
  spec.csharp:
  - uid: Raftel
    name: Raftel
    href: Raftel.html
  - name: .
  - uid: Raftel.Domain
    name: Domain
    href: Raftel.Domain.html
  - name: .
  - uid: Raftel.Domain.Abstractions
    name: Abstractions
    href: Raftel.Domain.Abstractions.html
  spec.vb:
  - uid: Raftel
    name: Raftel
    href: Raftel.html
  - name: .
  - uid: Raftel.Domain
    name: Domain
    href: Raftel.Domain.html
  - name: .
  - uid: Raftel.Domain.Abstractions
    name: Abstractions
    href: Raftel.Domain.Abstractions.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Raftel.Domain.Abstractions.Result.#ctor*
  commentId: Overload:Raftel.Domain.Abstractions.Result.#ctor
  href: Raftel.Domain.Abstractions.Result.html#Raftel_Domain_Abstractions_Result__ctor_System_Boolean_Raftel_Domain_Abstractions_Error_
  name: Result
  nameWithType: Result.Result
  fullName: Raftel.Domain.Abstractions.Result.Result
  nameWithType.vb: Result.New
  fullName.vb: Raftel.Domain.Abstractions.Result.New
  name.vb: New
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Raftel.Domain.Abstractions.Error
  commentId: T:Raftel.Domain.Abstractions.Error
  parent: Raftel.Domain.Abstractions
  href: Raftel.Domain.Abstractions.Error.html
  name: Error
  nameWithType: Error
  fullName: Raftel.Domain.Abstractions.Error
- uid: Raftel.Domain.Abstractions.Result.IsSuccess*
  commentId: Overload:Raftel.Domain.Abstractions.Result.IsSuccess
  href: Raftel.Domain.Abstractions.Result.html#Raftel_Domain_Abstractions_Result_IsSuccess
  name: IsSuccess
  nameWithType: Result.IsSuccess
  fullName: Raftel.Domain.Abstractions.Result.IsSuccess
- uid: Raftel.Domain.Abstractions.Result.IsFailure*
  commentId: Overload:Raftel.Domain.Abstractions.Result.IsFailure
  href: Raftel.Domain.Abstractions.Result.html#Raftel_Domain_Abstractions_Result_IsFailure
  name: IsFailure
  nameWithType: Result.IsFailure
  fullName: Raftel.Domain.Abstractions.Result.IsFailure
- uid: Raftel.Domain.Abstractions.Result.Error*
  commentId: Overload:Raftel.Domain.Abstractions.Result.Error
  href: Raftel.Domain.Abstractions.Result.html#Raftel_Domain_Abstractions_Result_Error
  name: Error
  nameWithType: Result.Error
  fullName: Raftel.Domain.Abstractions.Result.Error
- uid: Raftel.Domain.Abstractions.Result.Success*
  commentId: Overload:Raftel.Domain.Abstractions.Result.Success
  href: Raftel.Domain.Abstractions.Result.html#Raftel_Domain_Abstractions_Result_Success
  name: Success
  nameWithType: Result.Success
  fullName: Raftel.Domain.Abstractions.Result.Success
- uid: Raftel.Domain.Abstractions.Result
  commentId: T:Raftel.Domain.Abstractions.Result
  parent: Raftel.Domain.Abstractions
  href: Raftel.Domain.Abstractions.Result.html
  name: Result
  nameWithType: Result
  fullName: Raftel.Domain.Abstractions.Result
- uid: Raftel.Domain.Abstractions.Result.Failure*
  commentId: Overload:Raftel.Domain.Abstractions.Result.Failure
  href: Raftel.Domain.Abstractions.Result.html#Raftel_Domain_Abstractions_Result_Failure_Raftel_Domain_Abstractions_Error_
  name: Failure
  nameWithType: Result.Failure
  fullName: Raftel.Domain.Abstractions.Result.Failure
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: Raftel.Domain.Abstractions.Result{{TValue}}
  commentId: T:Raftel.Domain.Abstractions.Result{``0}
  parent: Raftel.Domain.Abstractions
  definition: Raftel.Domain.Abstractions.Result`1
  href: Raftel.Domain.Abstractions.Result-1.html
  name: Result<TValue>
  nameWithType: Result<TValue>
  fullName: Raftel.Domain.Abstractions.Result<TValue>
  nameWithType.vb: Result(Of TValue)
  fullName.vb: Raftel.Domain.Abstractions.Result(Of TValue)
  name.vb: Result(Of TValue)
  spec.csharp:
  - uid: Raftel.Domain.Abstractions.Result`1
    name: Result
    href: Raftel.Domain.Abstractions.Result-1.html
  - name: <
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: Raftel.Domain.Abstractions.Result`1
    name: Result
    href: Raftel.Domain.Abstractions.Result-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
- uid: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: Raftel.Domain.Abstractions.Result`1
  commentId: T:Raftel.Domain.Abstractions.Result`1
  parent: Raftel.Domain.Abstractions
  href: Raftel.Domain.Abstractions.Result-1.html
  name: Result<TValue>
  nameWithType: Result<TValue>
  fullName: Raftel.Domain.Abstractions.Result<TValue>
  nameWithType.vb: Result(Of TValue)
  fullName.vb: Raftel.Domain.Abstractions.Result(Of TValue)
  name.vb: Result(Of TValue)
  spec.csharp:
  - uid: Raftel.Domain.Abstractions.Result`1
    name: Result
    href: Raftel.Domain.Abstractions.Result-1.html
  - name: <
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: Raftel.Domain.Abstractions.Result`1
    name: Result
    href: Raftel.Domain.Abstractions.Result-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
- uid: Raftel.Domain.Abstractions.Result.Create*
  commentId: Overload:Raftel.Domain.Abstractions.Result.Create
  href: Raftel.Domain.Abstractions.Result.html#Raftel_Domain_Abstractions_Result_Create__1___0_
  name: Create
  nameWithType: Result.Create
  fullName: Raftel.Domain.Abstractions.Result.Create
